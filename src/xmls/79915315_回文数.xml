<article class="baidu_pl">
		<div id="article_content" class="article_content clearfix csdn-tracking-statistics" data-pid="blog"  data-mod=popu_307  data-dsm = "post" >
								<div class="article-copyright">
                  					<svg class="icon" title="CSDN认证原创" aria-hidden="true" style="width:53px; height: 18px; vertical-align: -4px;">
							<use xlink:href="#CSDN_Cert"></use>
					</svg>
                  					
					版权声明：看我干嘛? 你又没打算转载我的博客~					https://blog.csdn.net/wjh2622075127/article/details/79915315				</div>
								<link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/template/css/ck_htmledit_views-f57960eb32.css" />
        								            <div id="content_views" class="markdown_views prism-atom-one-light">
							<!-- flowchart 箭头图标 勿删 -->
							<svg xmlns="http://www.w3.org/2000/svg" style="display: none;"><path stroke-linecap="round" d="M5,0 0,2.5 5,5z" id="raphael-marker-block" style="-webkit-tap-highlight-color: rgba(0, 0, 0, 0);"></path></svg>
							<blockquote>
  <p>一个正整数，如果交换高低位以后和原数相等，那么称这个数为回文数。比如 121121，23322332 <br>
  都是回文数，13,456713,4567 不是回文数。</p>
  
  <p>任意一个正整数，如果其不是回文数，将该数交换高低位以后和原数相加得到一个新的数，如果新数不是回文数，重复这个变换，直到得到一个回文数为止。例如，5757 <br>
  变换后得到 132(57 + 75)132(57+75)，132132 得到 363(132 + <br>
  231)363(132+231)，363363 是一个回文数。</p>
  
  <p>曾经有数学家猜想：对于任意正整数，经过有限次上述变换以后，一定能得出一个回文数。至今这个猜想还没有被证明是对的。现在请你通过程序来验证。</p>
  
  <p>输入格式 输入一行一个正整数 nn。</p>
  
  <p>输出格式 输出第一行一个正整数，表示得到一个回文数的最少变换次数。</p>
  
  <p>接下来一行，输出变换过程，相邻的数之间用”—&gt;”连接。输出格式可以参见样例。</p>
  
  <p>保证最后生成的数在 int 范围内。</p>
  
  <p>349  <br>
  样例输出  <br>
  3 </p>
</blockquote>

<p>简单的模拟一下就好。不过， 计蒜客的官方思路有点意思。 <br>
官方思路：</p>



<pre class="prettyprint"><code class=" hljs cpp"><span class="hljs-preprocessor">#include &lt;iostream&gt;</span>
<span class="hljs-preprocessor">#include &lt;vector&gt;</span>
<span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;

<span class="hljs-keyword">int</span> fz(<span class="hljs-keyword">int</span> n)
{
    <span class="hljs-keyword">int</span> x = <span class="hljs-number">0</span>;
    <span class="hljs-keyword">while</span>(n) {
        x = x*<span class="hljs-number">10</span> + n%<span class="hljs-number">10</span>;
        n /= <span class="hljs-number">10</span>;
    }
    <span class="hljs-keyword">return</span> x;
}

<span class="hljs-keyword">int</span> main()
{
    <span class="hljs-keyword">int</span> n, cur = <span class="hljs-number">0</span>, tmp;
    <span class="hljs-built_in">cin</span> &gt;&gt; n;
    cur = fz(n);
    tmp = n;
    <span class="hljs-stl_container"><span class="hljs-built_in">vector</span> &lt;<span class="hljs-keyword">int</span>&gt;</span> v;
    <span class="hljs-keyword">while</span>(n != cur) {
        n += cur;
        v.push_back(n);
        cur = fz(n);
    }
    <span class="hljs-built_in">cout</span> &lt;&lt; v.size() &lt;&lt; endl;
    <span class="hljs-built_in">cout</span> &lt;&lt; tmp;
    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; v.size(); ++i) {
        <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">"---&gt;"</span> &lt;&lt; v[i];
    }
}</code></pre>

<p>我的思路：</p>



<pre class="prettyprint"><code class=" hljs cpp"><span class="hljs-preprocessor">#include &lt;iostream&gt;</span>
<span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;

<span class="hljs-keyword">bool</span> isH(<span class="hljs-keyword">int</span> &amp;n)
{
    <span class="hljs-keyword">int</span> a = n, b = <span class="hljs-number">0</span>;
    <span class="hljs-keyword">while</span>(a) {
        b = b*<span class="hljs-number">10</span> + a%<span class="hljs-number">10</span>;
        a /= <span class="hljs-number">10</span>;
    }
    <span class="hljs-keyword">if</span>(b == n) <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;
    <span class="hljs-keyword">else</span> {
        n += b;
        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;
    }
}

<span class="hljs-keyword">int</span> main()
{
    <span class="hljs-keyword">int</span> n, cnt = <span class="hljs-number">0</span>, tmp;
    <span class="hljs-built_in">cin</span> &gt;&gt; n;
    tmp = n;
    <span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>) {
        <span class="hljs-keyword">if</span>(isH(n)) {
            <span class="hljs-keyword">break</span>;
        } <span class="hljs-keyword">else</span> {
            cnt ++;
        }
    }
    <span class="hljs-built_in">cout</span> &lt;&lt; cnt &lt;&lt; endl;
    n = tmp;
    <span class="hljs-built_in">cout</span> &lt;&lt; n;
    <span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>) {
        <span class="hljs-keyword">if</span>(isH(n)) {
            <span class="hljs-keyword">break</span>;
        } <span class="hljs-keyword">else</span> {
            cnt ++;
            <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">"---&gt;"</span> &lt;&lt; n;
        }
    }
}</code></pre>

<p>其实都差不多， 就是为了水个题解（。。。）</p>            </div>
						<link href="https://csdnimg.cn/release/phoenix/mdeditor/markdown_views-258a4616f7.css" rel="stylesheet">
                      </div>
	</article>