<article class="baidu_pl">
		<div id="article_content" class="article_content clearfix csdn-tracking-statistics" data-pid="blog"  data-mod=popu_307  data-dsm = "post" >
								<div class="article-copyright">
                  					<svg class="icon" title="CSDN认证原创" aria-hidden="true" style="width:53px; height: 18px; vertical-align: -4px;">
							<use xlink:href="#CSDN_Cert"></use>
					</svg>
                  					
					版权声明：看我干嘛? 你又没打算转载我的博客~					https://blog.csdn.net/wjh2622075127/article/details/79456601				</div>
								<link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/template/css/ck_htmledit_views-f57960eb32.css" />
        								            <div id="content_views" class="markdown_views prism-atom-one-light">
							<!-- flowchart 箭头图标 勿删 -->
							<svg xmlns="http://www.w3.org/2000/svg" style="display: none;"><path stroke-linecap="round" d="M5,0 0,2.5 5,5z" id="raphael-marker-block" style="-webkit-tap-highlight-color: rgba(0, 0, 0, 0);"></path></svg>
							<ul>
<li>前序遍历( Preorder Tree Walk). 按照根节点, 左子树, 右子树顺序给出节点编号.</li>
<li>中序遍历( Inorder Tree Walk). 按照左子树, 根节点, 右子树顺序给出结点编号</li>
<li>后序遍历( Postorder Tree Walk). 按照左子树, 右子树, 根节点顺序给出结点编号</li>
</ul>

<p>这三种遍历方法十分接近, 思路上, 使用递归表达, 每个递归函数做好当前的工作就好了, 更小的工作交给下一层递归来实现.</p>

<p>同时, 也可以用堆栈的方式进行遍历, 实现起来较为复杂, 但思路是基本一致的.</p>

<p>使用递归地方法实现时, 三种遍历方法基本只要改动代码顺序即可.</p>

<pre class="prettyprint"><code class=" hljs cpp"><span class="hljs-preprocessor">#include &lt;bits/stdc++.h&gt;</span>
<span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;
<span class="hljs-preprocessor">#define MAX 10005</span>
<span class="hljs-preprocessor">#define NIL -1</span>

<span class="hljs-keyword">struct</span> Node { <span class="hljs-keyword">int</span> p, l, r; };

Node T[MAX];
<span class="hljs-keyword">int</span> n, root;

<span class="hljs-keyword">void</span> preOrder(<span class="hljs-keyword">int</span> u)  <span class="hljs-comment">//前序遍历 </span>
{
    <span class="hljs-keyword">if</span>(u == NIL) <span class="hljs-keyword">return</span>;
    <span class="hljs-built_in">cout</span> &lt;&lt; u &lt;&lt; <span class="hljs-string">' '</span>;
    preOrder(T[u].l);
    preOrder(T[u].r);
}

<span class="hljs-keyword">void</span> inOrder(<span class="hljs-keyword">int</span> u) <span class="hljs-comment">//中序遍历 </span>
{
    <span class="hljs-keyword">if</span>(u == NIL) <span class="hljs-keyword">return</span>;
    inOrder(T[u].l);
    <span class="hljs-built_in">cout</span> &lt;&lt; u &lt;&lt; <span class="hljs-string">' '</span>;
    inOrder(T[u].r);
}

<span class="hljs-keyword">void</span> postOrder(<span class="hljs-keyword">int</span> u)  <span class="hljs-comment">//后序遍历</span>
{
    <span class="hljs-keyword">if</span>(u == NIL) <span class="hljs-keyword">return</span>;
    postOrder(T[u].l);
    postOrder(T[u].r);
    <span class="hljs-built_in">cout</span> &lt;&lt; u &lt;&lt; <span class="hljs-string">' '</span>;
} 

<span class="hljs-keyword">void</span> buildTree()  <span class="hljs-comment">//构建一棵树</span>
{
    <span class="hljs-keyword">int</span> k, l, r;
    <span class="hljs-built_in">cin</span> &gt;&gt; n;
    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; ++i)
        T[i].l = T[i].r = NIL;
    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; ++i) {
        <span class="hljs-built_in">cin</span> &gt;&gt; k &gt;&gt; l &gt;&gt; r;
        T[k].l = l, T[k].r = r;
        <span class="hljs-keyword">if</span>(l != NIL) T[l].p = k;
        <span class="hljs-keyword">if</span>(r != NIL) T[r].p = k;
    }
    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; ++i) 
        <span class="hljs-keyword">if</span>(T[i].p == NIL) root = i;
}

<span class="hljs-keyword">int</span> main()
{
    buildTree();
    <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">"preOrder: \n"</span>;
    preOrder(root);
    <span class="hljs-built_in">cout</span> &lt;&lt; endl;
    <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">"inOrder: \n"</span>;
    inOrder(root);
    <span class="hljs-built_in">cout</span> &lt;&lt; endl;
    <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">"postOrder: \n"</span>;
    postOrder(root);
    <span class="hljs-built_in">cout</span> &lt;&lt; endl;
}</code></pre>

<p>数据输入:</p>

<blockquote>
  <p>9 <br>
  0 1 4 <br>
  1 2 3 <br>
  2 -1 -1 <br>
  3 -1 -1 <br>
  4 5 8 <br>
  5 6 7 <br>
  6 -1 -1 <br>
  7 -1 -1 <br>
  8 -1 -1</p>
</blockquote>

<p>数据输出:</p>

<blockquote>
  <p>preOrder: <br>
  0 1 2 3 4 5 6 7 8 <br>
  inOrder: <br>
  2 1 3 0 6 5 7 4 8 <br>
  postOrder: <br>
  2 3 1 6 7 5 8 4 0</p>
</blockquote>

<p>有一个性质值得注意:</p>

<blockquote>
  <p><strong>给出任意二叉树中序遍历结点编号, 以及前序或后序中任一结果, 可确定唯一的二叉树</strong> <br>
  因为: <br>
  前序 = 根节点 + 左子树 + 右子树 <br>
  中序 = 左子树 + 根节点 + 右子树 <br>
  后序 = 左子树 + 右子树 + 根节点</p>
</blockquote>            </div>
						<link href="https://csdnimg.cn/release/phoenix/mdeditor/markdown_views-258a4616f7.css" rel="stylesheet">
                      </div>
	</article>