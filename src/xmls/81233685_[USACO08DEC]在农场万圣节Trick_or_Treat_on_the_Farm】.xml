<article class="baidu_pl">
		<div id="article_content" class="article_content clearfix csdn-tracking-statistics" data-pid="blog"  data-mod=popu_307  data-dsm = "post" >
								<link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/template/css/ck_htmledit_views-f57960eb32.css" />
        								            <div id="content_views" class="markdown_views prism-atom-one-light">
							<!-- flowchart 箭头图标 勿删 -->
							<svg xmlns="http://www.w3.org/2000/svg" style="display: none;"><path stroke-linecap="round" d="M5,0 0,2.5 5,5z" id="raphael-marker-block" style="-webkit-tap-highlight-color: rgba(0, 0, 0, 0);"></path></svg>
							<p>转载自洛谷博客-<a href="https://www.luogu.org/blog/planetarian/solution-p2921" rel="nofollow">传送门</a></p>

<p></p><h2 id="题解-p2921-usaco08dec在农场万圣节trick-or-treat-on-the-farm">题解 P2921 【[USACO08DEC]在农场万圣节Trick or Treat on the Farm】</h2><p></p>

<p>做完以后粗略翻了下题解，发现都是 TarjanTarjan 或记忆化搜索，总之逃不出 dfsdfs ，所以我就把我的非递归方法贡献一下吧。</p>

<p>事实上，这道题用 TarjanTarjan 是大材小用了。此题不需要任何算法，两层简单的循环就能解决。</p>

<p>首先我们需要注意到一点，虽然此题也是一张有向图，但是每个点的出度有且只有 “1”。这说明什么？不需要递归，直接沿着这条唯一的路径走下去就行了……</p>

<p></p><h4 id="一为了实现这一方法我们对每个点设置两个属性"> 一、为了实现这一方法，我们对每个点设置两个属性：</h4><p></p>

<p>1、颜色 (color)(color) ： 此节点第一次被访问时，这条访问他的路径是由那个节点发出的（起点）。</p>

<p>2、时间戳 (dfn)(dfn) ：此节点第一次被访问时，他到发出这条路径的起点的距离（发出节点的 dfn = 0dfn=0 ，第二个被访问的节点的 dfn = 1dfn=1 ，第三个 dfn = 2dfn=2 ……）</p>

<p>有了这两个属性，我们就可以计算环的大小，方法如下：</p>

<p>1、从某一节点发出路径</p>

<p>2、走到某个节点上（包括起点），如果这个节点没有被染色，那么染成自己的颜色，并标记上 dfndfn</p>

<p>3、走到某个节点上，如果这个节点已经被染成了自己的颜色，那么环的大小就出来了：当前时间 (cnt)(cnt) -− 此节点 dfndfn</p>

<p>到了这一步，实际上已经解决了另一个更简单的问题：<a href="https://www.luogu.org/problemnew/show/P2661" rel="nofollow">NOIP2015 信息传递</a>。 接下来就是本题特色了</p>

<p></p><h4 id="二对于每一只奶牛或者说每一个起点颜色路径我们记录如下两个属性">二、对于每一只奶牛（或者说每一个起点、颜色、路径），我们记录如下两个属性：</h4><p></p>

<p>1、环的大小 (minc)(minc) ：每条路径最终都会进入环中，或者起点本身就在环中，我们记录下这个环的大小为之后服务</p>

<p>2、入环时间戳 (sucdfn)(sucdfn) ：这条路径什么时候会进入环中，同样是为之后服务的一个属性</p>

<p>首先讲解一下如果得到这两个属性：</p>

<p>1、在上一节中我们已经讲了如何初步获取环的大小，入环时间戳只要记录为那个交点的时间戳即可</p>

<p>2、如果走到了之前走过的节点，那么新的路径必然进入之前路径的环中，直接把这个环的大小要过来就行了。入环时间戳则分两种情况：</p>

<p>i. 如果这个节点不在环中，“原路径的入环时间戳 -− 原路径中此节点的时间戳 +　新路径当前时间”　即为新路径的入环时间戳;</p>

<p>ii. 而如果这个节点在环中，直接就是新路径当前时间。</p>

<p>iii. 判断方法则是 “原路径的入环时间戳 -− 原路径中此节点的时间戳” 是否大于 00 ，综合起来就是：“ max(max( 原路径的入环时间戳 -− 原路径中此节点的时间戳 , \;0),0) +　新路径当前时间”</p>

<p></p><h4 id="三把上面的问题都解决了出答案就太简单了">三、把上面的问题都解决了，出答案就太简单了：</h4><p></p>

<p>1、第一节中的发现环的大小之后，答案就是“当前时间”</p>

<p>2、第二节中与之间走过的节点相遇并记录完信息后，答案是 “入环时间戳 + 环的大小”</p>

<p>至此本题已经完美解决，且没有用到任何算法。贴代码：</p>



<pre class="prettyprint"><code class=" hljs cpp"><span class="hljs-preprocessor">#include&lt;bits/stdc++.h&gt;</span>

<span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;

<span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn = <span class="hljs-number">100000</span> + <span class="hljs-number">5</span>;

<span class="hljs-keyword">int</span> n;
<span class="hljs-keyword">int</span> nxt[maxn];
<span class="hljs-keyword">int</span> color[maxn];
<span class="hljs-keyword">int</span> sucdfn[maxn];
<span class="hljs-keyword">int</span> dfn[maxn];
<span class="hljs-keyword">int</span> minc[maxn];

<span class="hljs-keyword">void</span> Init()
{
    <span class="hljs-built_in">cin</span> &gt;&gt; n;
    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) <span class="hljs-built_in">cin</span> &gt;&gt; nxt[i];
    <span class="hljs-built_in">memset</span>(color, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(color));
    <span class="hljs-built_in">memset</span>(dfn, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(dfn));
    <span class="hljs-built_in">memset</span>(minc, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(minc));
}

<span class="hljs-keyword">void</span> Solve()
{
    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> cow = <span class="hljs-number">1</span>; cow &lt;= n; ++cow) 
    {
        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = cow, cnt = <span class="hljs-number">0</span>; ; i = nxt[i], ++cnt)
        {
            <span class="hljs-keyword">if</span>(!color[i]) {
                color[i] = cow;
                dfn[i] = cnt;
            }
            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(color[i] == cow) {
                minc[cow] = cnt - dfn[i];
                sucdfn[cow] = dfn[i];
                <span class="hljs-built_in">cout</span> &lt;&lt; cnt &lt;&lt; endl;
                <span class="hljs-keyword">break</span>;
            }
            <span class="hljs-keyword">else</span> {
                minc[cow] = minc[color[i]];
                sucdfn[cow] = cnt + max(sucdfn[color[i]] - dfn[i], <span class="hljs-number">0</span>);
                <span class="hljs-built_in">cout</span> &lt;&lt; sucdfn[cow] + minc[cow] &lt;&lt; endl;
                <span class="hljs-keyword">break</span>;
            }
        }
    }
} 

<span class="hljs-keyword">int</span> main()
{
    Init();
    Solve();
    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;
}</code></pre>            </div>
						<link href="https://csdnimg.cn/release/phoenix/mdeditor/markdown_views-258a4616f7.css" rel="stylesheet">
                      </div>
	</article>