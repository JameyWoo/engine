<article class="baidu_pl">
		<div id="article_content" class="article_content clearfix csdn-tracking-statistics" data-pid="blog"  data-mod=popu_307  data-dsm = "post" >
								<div class="article-copyright">
                  					<svg class="icon" title="CSDN认证原创" aria-hidden="true" style="width:53px; height: 18px; vertical-align: -4px;">
							<use xlink:href="#CSDN_Cert"></use>
					</svg>
                  					
					版权声明：看我干嘛? 你又没打算转载我的博客~					https://blog.csdn.net/wjh2622075127/article/details/81535078				</div>
								<link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/template/css/ck_htmledit_views-f57960eb32.css" />
        								            <div id="content_views" class="markdown_views prism-atom-one-light">
							<!-- flowchart 箭头图标 勿删 -->
							<svg xmlns="http://www.w3.org/2000/svg" style="display: none;"><path stroke-linecap="round" d="M5,0 0,2.5 5,5z" id="raphael-marker-block" style="-webkit-tap-highlight-color: rgba(0, 0, 0, 0);"></path></svg>
							<p>CCF 201604-4 游戏 <a href="http://118.190.20.162/view.page?gpid=T39" rel="nofollow">传送门</a></p>

<p>一看题目觉得很简单, 这不就是一道bfs水题吗? 但心里面告诉自己<strong>千万不要轻敌</strong>, 认真分析下题目先.</p>

<p>如果按照常规的BFS思路, 会有一个bug: <strong>因为这些障碍是在一段时间不通过,所以如果回来可能会更快. 那么这时vis数组就失效了,因为回不来…</strong></p>

<p>思考一下会发现, 不外乎两种情况.</p>

<p>一种是不会回来了, 刚好可以过掉 <br>
另一种是回来反而会得到更优的解, 这种情况下设置vis数组就是bug了.</p>

<p>怎么办呢? 取消vis吗? 可这样一来, <strong>程序一定会超时</strong>, 事实上只得了20分.</p>

<p>有一种可行的办法: <strong>既然回来可能会更加快, 那么保留vis数组, 但是把那种情况添加进去作为一种情况考虑. 而回来这个过程, 最短时间是+2, 因为+4, +6, +8没有意义.</strong></p>

<p>然后提交了程序, 得了70分. 思路应该是没错的, 但是应该是哪里有个小bug(值30分呢). 仔细检查后发现, <strong>因为最后添加的一种情况每次时间+2, 所以有可能在队列中它提前到了终点</strong>, <strong>而此时它的时间其实还没有队列后面的那些点到的快.</strong> 也就是说, 它不是最优解. 那么难道现在对所有到终点的时间做一个筛选, 找出最小的吗? 有点太麻烦了.</p>

<p>我们直击本质, <strong>之所以会提前结束, 是因为它到了不属于他的位置, 如果时间长的点能够自觉一点到后面去, 那结果会是对的. so, 如何让它自觉? 优先队列!</strong></p>

<p>用优先队列的代码一改, 100分.</p>

<p>百度了下其他博主的代码: 看到有的博主是<strong>开了三维数组, 把时间也当作一个行走维度.</strong> 这样的话就不用像我那样考虑那些了(我的方法容易疏忽一些东西), 而是<strong>直接三维bfs, 转化成常规模型.</strong> <a href="https://blog.csdn.net/tigerisland45/article/details/54934916" rel="nofollow">大佬博客链接</a> , 这种思路很有启发, 增加维度.</p>

<p><strong>同时, 这也给了我一个启发: 我们用普通队列模拟BFS时其实不是真正的BFS, 优先队列才是. 而在一般情况下他们没什么不同(此题就不是一般情况), 普通队列反而更快, 所以我们省事省时就直接用队列了. 我们用普通队列多了, 反而就忽略了BFS找到最短路长的本质, 结果出了错才想到优先队列, 岂不怪哉? 所以, 以后BFS先判断是否应该用优先队列, 切勿忽略本质</strong></p>

<p>因为和一个同学的讨论，让我发现了之前程序的一个bug。下面的完整代码都是更新了的，先展示修改了的部分（BFS函数有一些小调整）。</p>

<p>原BFS函数</p>

<pre class="prettyprint"><code class=" hljs perl">long long BFS()
{
    priority_queue&lt;Time&gt; Q;
    Q.<span class="hljs-keyword">push</span>(Time(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>));
    vis[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>] = <span class="hljs-number">1</span>;
    <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>) {
        long long <span class="hljs-keyword">x</span> = Q.top().<span class="hljs-keyword">x</span>, <span class="hljs-keyword">y</span> = Q.top().<span class="hljs-keyword">y</span>, <span class="hljs-keyword">time</span> = Q.top().<span class="hljs-keyword">time</span>;
        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">x</span> == n &amp;&amp; <span class="hljs-keyword">y</span> == <span class="hljs-keyword">m</span>) <span class="hljs-keyword">return</span> <span class="hljs-keyword">time</span>;
        Q.<span class="hljs-keyword">pop</span>();
        <span class="hljs-keyword">for</span> (long long i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">4</span>; ++i) {
            long long xx = <span class="hljs-keyword">x</span> + move[i][<span class="hljs-number">0</span>], yy = <span class="hljs-keyword">y</span> + move[i][<span class="hljs-number">1</span>];
            <span class="hljs-keyword">if</span> (xx &lt; <span class="hljs-number">1</span> || xx &gt; n || yy &lt; <span class="hljs-number">1</span> || yy &gt; <span class="hljs-keyword">m</span>) <span class="hljs-keyword">continue</span>;
            <span class="hljs-keyword">if</span> (<span class="hljs-keyword">time</span> + <span class="hljs-number">1</span> &gt;= <span class="hljs-keyword">map</span>[xx][yy].left &amp;&amp; <span class="hljs-keyword">time</span> + <span class="hljs-number">1</span> &lt;= <span class="hljs-keyword">map</span>[xx][yy].right) <span class="hljs-keyword">continue</span>;
            <span class="hljs-keyword">if</span> (vis[xx][yy]) <span class="hljs-keyword">continue</span>;
            vis[xx][yy] = true;
            Q.<span class="hljs-keyword">push</span>(Time(xx, yy, <span class="hljs-keyword">time</span> + <span class="hljs-number">1</span>));
        }
        Q.<span class="hljs-keyword">push</span>(Time(<span class="hljs-keyword">x</span>, <span class="hljs-keyword">y</span>, <span class="hljs-keyword">time</span> + <span class="hljs-number">2</span>));
    }
}</code></pre>

<p>现在的BFS函数</p>



<pre class="prettyprint"><code class=" hljs perl">long long BFS()
{
    priority_queue&lt;Time&gt; Q;
    Q.<span class="hljs-keyword">push</span>(Time(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>));
    vis[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>] = <span class="hljs-number">1</span>;
    <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>) {
        long long <span class="hljs-keyword">x</span> = Q.top().<span class="hljs-keyword">x</span>, <span class="hljs-keyword">y</span> = Q.top().<span class="hljs-keyword">y</span>, <span class="hljs-keyword">time</span> = Q.top().<span class="hljs-keyword">time</span>;
        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">x</span> == n &amp;&amp; <span class="hljs-keyword">y</span> == <span class="hljs-keyword">m</span>) <span class="hljs-keyword">return</span> <span class="hljs-keyword">time</span>;
        Q.<span class="hljs-keyword">pop</span>();
        Q.<span class="hljs-keyword">push</span>(Time(<span class="hljs-keyword">x</span>, <span class="hljs-keyword">y</span>, <span class="hljs-keyword">time</span> + <span class="hljs-number">2</span>));
        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">time</span> &gt;= <span class="hljs-keyword">map</span>[<span class="hljs-keyword">x</span>][<span class="hljs-keyword">y</span>].left &amp;&amp; <span class="hljs-keyword">time</span> &lt;= <span class="hljs-keyword">map</span>[<span class="hljs-keyword">x</span>][<span class="hljs-keyword">y</span>].right) <span class="hljs-keyword">continue</span>;
        <span class="hljs-keyword">for</span> (long long i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">4</span>; ++i) {
            long long xx = <span class="hljs-keyword">x</span> + move[i][<span class="hljs-number">0</span>], yy = <span class="hljs-keyword">y</span> + move[i][<span class="hljs-number">1</span>];
            <span class="hljs-keyword">if</span> (xx &lt; <span class="hljs-number">1</span> || xx &gt; n || yy &lt; <span class="hljs-number">1</span> || yy &gt; <span class="hljs-keyword">m</span>) <span class="hljs-keyword">continue</span>;
            <span class="hljs-keyword">if</span> (<span class="hljs-keyword">time</span> + <span class="hljs-number">1</span> &gt;= <span class="hljs-keyword">map</span>[xx][yy].left &amp;&amp; <span class="hljs-keyword">time</span> + <span class="hljs-number">1</span> &lt;= <span class="hljs-keyword">map</span>[xx][yy].right) <span class="hljs-keyword">continue</span>;
            <span class="hljs-keyword">if</span> (vis[xx][yy]) <span class="hljs-keyword">continue</span>;
            vis[xx][yy] = true;
            Q.<span class="hljs-keyword">push</span>(Time(xx, yy, <span class="hljs-keyword">time</span> + <span class="hljs-number">1</span>));
        }
    }
}</code></pre>

<p>完整更新bug代码：</p>

<pre class="prettyprint"><code class=" hljs cpp"><span class="hljs-preprocessor">#include &lt;algorithm&gt;</span>
<span class="hljs-preprocessor">#include &lt;iostream&gt;</span>
<span class="hljs-preprocessor">#include &lt;vector&gt;</span>
<span class="hljs-preprocessor">#include &lt;queue&gt;</span>
<span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;

<span class="hljs-keyword">struct</span> Node {
    <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> left, right;
    Node () { left = right = <span class="hljs-number">0x3f3f3f3f</span>; }
};

<span class="hljs-keyword">struct</span> Time {
    <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> x, y, time;
    Time(<span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> x, <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> y, <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> t) : x(x), y(y), time(t) {}
    <span class="hljs-keyword">friend</span> <span class="hljs-keyword">bool</span> <span class="hljs-keyword">operator</span> &lt; (Time A, Time B) {
        <span class="hljs-keyword">return</span> A.time &gt; B.time;
    }
};

<span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> n, m, t, vis[<span class="hljs-number">105</span>][<span class="hljs-number">105</span>] = {};
<span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> move[<span class="hljs-number">4</span>][<span class="hljs-number">2</span>] = {{-<span class="hljs-number">1</span>, <span class="hljs-number">0</span>}, {<span class="hljs-number">1</span>, <span class="hljs-number">0</span>}, {<span class="hljs-number">0</span>, -<span class="hljs-number">1</span>}, {<span class="hljs-number">0</span>, <span class="hljs-number">1</span>}};
Node <span class="hljs-built_in">map</span>[<span class="hljs-number">105</span>][<span class="hljs-number">105</span>];

<span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> BFS()
{
    priority_queue&lt;Time&gt; Q;
    Q.push(Time(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>));
    vis[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>] = <span class="hljs-number">1</span>;
    <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>) {
        <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> x = Q.top().x, y = Q.top().y, time = Q.top().time;
        <span class="hljs-keyword">if</span> (x == n &amp;&amp; y == m) <span class="hljs-keyword">return</span> time;
        Q.pop();
        Q.push(Time(x, y, time + <span class="hljs-number">2</span>));
        <span class="hljs-keyword">if</span> (time &gt;= <span class="hljs-built_in">map</span>[x][y].left &amp;&amp; time &lt;= <span class="hljs-built_in">map</span>[x][y].right) <span class="hljs-keyword">continue</span>;
        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">4</span>; ++i) {
            <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> xx = x + move[i][<span class="hljs-number">0</span>], yy = y + move[i][<span class="hljs-number">1</span>];
            <span class="hljs-keyword">if</span> (xx &lt; <span class="hljs-number">1</span> || xx &gt; n || yy &lt; <span class="hljs-number">1</span> || yy &gt; m) <span class="hljs-keyword">continue</span>;
            <span class="hljs-keyword">if</span> (time + <span class="hljs-number">1</span> &gt;= <span class="hljs-built_in">map</span>[xx][yy].left &amp;&amp; time + <span class="hljs-number">1</span> &lt;= <span class="hljs-built_in">map</span>[xx][yy].right) <span class="hljs-keyword">continue</span>;
            <span class="hljs-keyword">if</span> (vis[xx][yy]) <span class="hljs-keyword">continue</span>;
            vis[xx][yy] = <span class="hljs-keyword">true</span>;
            Q.push(Time(xx, yy, time + <span class="hljs-number">1</span>));
        }
    }
}

<span class="hljs-keyword">int</span> main()
{
    <span class="hljs-built_in">cin</span> &gt;&gt; n &gt;&gt; m &gt;&gt; t;
    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> i = <span class="hljs-number">0</span>, u, v, l, r; i &lt; t; ++i) {
        <span class="hljs-built_in">cin</span> &gt;&gt; u &gt;&gt; v &gt;&gt; l &gt;&gt; r;
        <span class="hljs-built_in">map</span>[u][v].left = l;
        <span class="hljs-built_in">map</span>[u][v].right = r;
    }
    <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ans = BFS();
    <span class="hljs-built_in">cout</span> &lt;&lt; ans;
}</code></pre>

<p>三维代码：</p>



<pre class="prettyprint"><code class=" hljs cpp"><span class="hljs-preprocessor">#include &lt;iostream&gt;</span>
<span class="hljs-preprocessor">#include &lt;queue&gt;</span>
<span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;

<span class="hljs-keyword">struct</span> Node {
    <span class="hljs-keyword">int</span> x, y, t;
    Node (<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> y, <span class="hljs-keyword">int</span> t) : x(x), y(y), t(t) {}
};

<span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn = <span class="hljs-number">105</span>;
<span class="hljs-keyword">int</span> n, m, t;
<span class="hljs-keyword">int</span> move[<span class="hljs-number">4</span>][<span class="hljs-number">2</span>] = {{<span class="hljs-number">1</span>, <span class="hljs-number">0</span>}, {-<span class="hljs-number">1</span>, <span class="hljs-number">0</span>}, {<span class="hljs-number">0</span>, <span class="hljs-number">1</span>}, {<span class="hljs-number">0</span>, -<span class="hljs-number">1</span>}};
<span class="hljs-keyword">bool</span> vis[maxn][maxn][maxn*<span class="hljs-number">3</span>] = {}; <span class="hljs-comment">// 真坑，就是这个数组开小了，应该开3倍。为啥？因为加入每走一步</span>
            <span class="hljs-comment">// 堵一次（最坏情况），那么最多就是三倍。</span>

<span class="hljs-keyword">int</span> main()
{
    <span class="hljs-built_in">cin</span> &gt;&gt; n &gt;&gt; m &gt;&gt; t;
    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; t; ++i) {
        <span class="hljs-keyword">int</span> x, y, ts, te;
        <span class="hljs-built_in">cin</span> &gt;&gt; x &gt;&gt; y &gt;&gt; ts &gt;&gt; te;
        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = ts; j &lt;= te; ++j) {
            vis[x][y][j] = <span class="hljs-keyword">true</span>;
        }
    }
    <span class="hljs-stl_container"><span class="hljs-built_in">queue</span>&lt;Node&gt;</span> Q;
    Q.push(Node(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>));
    vis[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>][<span class="hljs-number">0</span>] = <span class="hljs-keyword">true</span>;
    <span class="hljs-keyword">while</span> (!Q.empty()) {
        <span class="hljs-keyword">int</span> x = Q.front().x, y = Q.front().y, t = Q.front().t;
        Q.pop();
        <span class="hljs-keyword">if</span> (x == n &amp;&amp; y == m) {
            <span class="hljs-built_in">cout</span> &lt;&lt; t;
            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;
        }
        ++t;
        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">4</span>; ++i) {
            <span class="hljs-keyword">int</span> xx = x + move[i][<span class="hljs-number">0</span>], yy = y + move[i][<span class="hljs-number">1</span>];
            <span class="hljs-keyword">if</span> (xx &lt; <span class="hljs-number">1</span> || xx &gt; n || yy &lt; <span class="hljs-number">1</span> || yy &gt; m) <span class="hljs-keyword">continue</span>;
            <span class="hljs-keyword">if</span> (vis[xx][yy][t]) <span class="hljs-keyword">continue</span>;
            Q.push(Node(xx, yy, t));
            vis[xx][yy][t] = <span class="hljs-keyword">true</span>;
        }
    }
}</code></pre>            </div>
						<link href="https://csdnimg.cn/release/phoenix/mdeditor/markdown_views-258a4616f7.css" rel="stylesheet">
                      </div>
	</article>