<article class="baidu_pl">
		<div id="article_content" class="article_content clearfix csdn-tracking-statistics" data-pid="blog"  data-mod=popu_307  data-dsm = "post" >
								<div class="article-copyright">
                  					<svg class="icon" title="CSDN认证原创" aria-hidden="true" style="width:53px; height: 18px; vertical-align: -4px;">
							<use xlink:href="#CSDN_Cert"></use>
					</svg>
                  					
					版权声明：看我干嘛? 你又没打算转载我的博客~					https://blog.csdn.net/wjh2622075127/article/details/78974160				</div>
								<link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/template/css/ck_htmledit_views-f57960eb32.css" />
        								            <div id="content_views" class="markdown_views prism-atom-one-light">
							<!-- flowchart 箭头图标 勿删 -->
							<svg xmlns="http://www.w3.org/2000/svg" style="display: none;"><path stroke-linecap="round" d="M5,0 0,2.5 5,5z" id="raphael-marker-block" style="-webkit-tap-highlight-color: rgba(0, 0, 0, 0);"></path></svg>
							<p>这篇博客我将介绍数论中的<strong>扩展欧几里得算法</strong>(extended Euclidean algorithm ),以及其在<strong>解线性同余方程(乘法逆元)</strong>中的运用.</p>

<p>首先要了解几个概念: <br>
    <a href="https://baike.baidu.com/item/%E6%AC%A7%E5%87%A0%E9%87%8C%E5%BE%B7%E7%AE%97%E6%B3%95/9002848?fr=aladdin" rel="nofollow">欧几里得算法</a> <br>
    <a href="https://baike.baidu.com/item/%E6%89%A9%E5%B1%95%E6%AC%A7%E5%87%A0%E9%87%8C%E5%BE%B7%E7%AE%97%E6%B3%95/1053275?fr=aladdin" rel="nofollow">扩展欧几里得算法</a> <br>
    <a href="https://baike.baidu.com/item/%E7%BA%BF%E6%80%A7%E5%90%8C%E4%BD%99%E6%96%B9%E7%A8%8B/5544515?fr=aladdin" rel="nofollow">线性同余方程</a></p>

<p><strong>欧几里得算法</strong>是一种求解两个正整数a, b的最大公因子(一般记为gcd,gcd(a, b) )的方法,这个方法最早被记载在欧几里得的&lt;&lt;几何原本&gt;&gt;中. <br>
<strong>扩展欧几里得算法</strong>是在欧几里得算法的基础上扩展的一种算法.我们知道了 a 和 b 的最大公约数是 gcd ，那么，我们一定能够找到这样的 x 和 y ，使得: a*x + b*y = gcd 这是一个不定方程（一种丢番图方程）.扩展欧几里得算法就这求这样的x, y 的. <br>
<strong>线性同余方程</strong>是最基本的同余方程，“线性”表示方程的未知数次数是一次.它的表现形式是这样的: <br>
    设x是未知整数, 形如 <br>
        ax ≡ b(mod m) <br>
    的同余式称为一元线性同余方程. <br>
    加下来我将介绍使用扩展欧几里得算法解b = 1时的同余方程, 未知数为 x ,x又称为a的乘法逆元. <br>
<strong>乘法逆元</strong>是当b = 1时的解 x , 可以这样理解: <br>
    ax ≡ 1(mod m) <br>
    我们称 x 是a关于m的乘法逆元</p>

<p>那么,从欧几里得算法开始.学习算法过程中,欧几里得算法大概是我接触到的第一个算法</p>



<pre class="prettyprint"><code class=" hljs perl"><span class="hljs-keyword">int</span> gcd(<span class="hljs-keyword">int</span> a, <span class="hljs-keyword">int</span> b)
{
    <span class="hljs-keyword">if</span>( b==<span class="hljs-number">0</span> ) <span class="hljs-keyword">return</span> a;
    <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> gcd(b,a<span class="hljs-variable">%b</span>);
}</code></pre>

<p>函数返回的是a, b的最大公约数,一般用gcd(a,b)来表示,数论中一般用(a,b)来表示a,b的最大公约数 <br>
由于此算法较为基础,在此不过多赘述.</p>

<p>但,需要了解的是,扩展欧几里算法就是在欧几里得算法的基础上加以扩展形成的.</p>

<p>我们首先要知道这样一个结论: <br>
a 和 b 的最大公约数是 gcd ，那么，我们一定能够找到这样的 x 和 y ，使得: a*x + b*y = gcd(a,b) <br>
扩展欧几里得算法的作用就是求这样的x, y的.它的解是无限的,我们可以这样表示它的通解:</p>

<pre><code> x = x0 + (b/gcd)*t;
 y = y0 - (a/gcd)*t;
</code></pre>

<p>为什么不是：</p>

<pre><code>x = x0 + b*t;
y = y0 - a*t;
?
</code></pre>

<p>我们要知道,这个通解中未知数的表达式的运算过程是互相抵消的.如:</p>

<pre><code>    (b/gcd) *t *a - (a/gcd) *t *b = 0;
</code></pre>

<p>而如果a, b不是互质的, 另一种形式那么会漏掉一些解.读者自己斟酌.(具体证明博主也不知如何是好)</p>

<p>如何求解呢? <br>
只需要在欧几里德算法的基础上加点改动就行了。</p>

<p>下面引自<a href="http://blog.csdn.net/zhjchengfeng5/article/details/7786595" rel="nofollow"><em>一篇博客</em></a></p>

<blockquote>
  <p>我们观察到：欧几里德算法停止的状态是： a= gcd ， b = 0 ，那么，这是否能给我们求解 x y <br>
  提供一种思路呢？因为，这时候，只要 a = gcd 的系数是 1 ，那么只要 b 的系数是 0 或者其他值（无所谓是多少，反正任何数乘以 0 <br>
  都等于 0 但是a 的系数一定要是 1），这时，我们就会有： a*1 + b*0 = gcd</p>

<pre><code>当然这是最终状态，但是我们是否可以从最终状态反推到最初的状态呢？

假设当前我们要处理的是求出 a 和 b的最大公约数，并求出 x 和 y 使得 a*x + b*y= gcd ，而我们已经求出了下一个状态：b 和 a%b 的最大公约数，并且求出了一组x1 和y1 使得： b*x1 + (a%b)*y1 = gcd
</code></pre>
  
  <p>， 那么这两个相邻的状态之间是否存在一种关系呢？</p>

<pre><code>我们知道： a%b = a - (a/b)*b（这里的 “/” 指的是整除，例如 5/2=2 , 1/3=0），那么，我们可以进一步得到：

    gcd = b*x1 + (a-(a/b)*b)*y1

        = b*x1 + a*y1 – (a/b)*b*y1

        = a*y1 + b*(x1 – a/b*y1)

对比之前我们的状态：求一组 x 和 y 使得：a*x + b*y = gcd ，是否发现了什么？

这里：

    x = y1

    y = x1 – a/b*y1
</code></pre>
</blockquote>



<pre class="prettyprint"><code class=" hljs perl"><span class="hljs-keyword">int</span> ex_gcd( <span class="hljs-keyword">int</span> a, <span class="hljs-keyword">int</span> b, <span class="hljs-keyword">int</span> &amp;<span class="hljs-keyword">x</span>, <span class="hljs-keyword">int</span> &amp;<span class="hljs-keyword">y</span> )
{
    <span class="hljs-keyword">if</span>( b==<span class="hljs-number">0</span> ){
        <span class="hljs-keyword">x</span> = <span class="hljs-number">1</span>, <span class="hljs-keyword">y</span> = <span class="hljs-number">0</span>;
        <span class="hljs-keyword">return</span> a;
    }
    <span class="hljs-keyword">int</span> ans = ex_gcd(b,a<span class="hljs-variable">%b</span>,<span class="hljs-keyword">x</span>,<span class="hljs-keyword">y</span>);
    <span class="hljs-keyword">int</span> tmp = <span class="hljs-keyword">x</span>;
    <span class="hljs-keyword">x</span> = <span class="hljs-keyword">y</span>;
    <span class="hljs-keyword">y</span> = tmp - a/b<span class="hljs-variable">*y</span>;
    <span class="hljs-keyword">return</span> ans;
}</code></pre>

<p>欧几里得算法只能求a, b的最大公因数,而扩展欧几里得算法不仅可以求gcd(a,b),还可以求出a* x + b* y = gcd的通解只需在欧几里得算法的基础上稍加改动 <br>
然而,求通解有什么用呢? <br>
我将介绍扩展欧几里得算法的一个应用,那就是前面提到过的解乘法逆元.</p>

<p>对于</p>

<pre><code>ax ≡ 1(mod m)
</code></pre>

<p>我们称 x 是a关于m的乘法逆元 <br>
这和扩欧有什么关系呢?可以看到这个式子和a* x + b* y = gcd = 1是有些类似的 <br>
可以等价于这样的表达式： a* x + m* y = 1 <br>
a* x + b* y = gcd = 1, 说明a, b互质, 那么推广的式子a* x + m* y = 1中, a, m也是互质的 <br>
当gcd(a, m) != 1时,x是无解的.</p>

<p>乘法逆元式子中, 已知a, m, 那么就可以利用扩展欧几里得算法求解x了. <br>
算法如下:</p>



<pre class="prettyprint"><code class=" hljs cpp"><span class="hljs-preprocessor">#include &lt;iostream&gt;</span>
<span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;

<span class="hljs-keyword">int</span> ex_gcd( <span class="hljs-keyword">int</span> a, <span class="hljs-keyword">int</span> b, <span class="hljs-keyword">int</span> &amp;x, <span class="hljs-keyword">int</span> &amp;y )
{
    <span class="hljs-keyword">if</span>( b==<span class="hljs-number">0</span> ){
        x = <span class="hljs-number">1</span>, y = <span class="hljs-number">0</span>;<span class="hljs-comment">//递归到终止条件, 初始化x, y</span>
        <span class="hljs-keyword">return</span> a;
    }
    <span class="hljs-keyword">int</span> ans = ex_gcd(b,a%b,x,y);<span class="hljs-comment">//继续递归,此前不对x, y进行操作</span>
    <span class="hljs-keyword">int</span> temp = x;
    x = y;
    y = tmp - a/b*y;<span class="hljs-comment">//利用推导出的两个相邻状态的代换式进行迭代</span>
    <span class="hljs-keyword">return</span> ans;
}

<span class="hljs-keyword">int</span> main( )
{
    <span class="hljs-keyword">int</span> a, b, x, y;
    <span class="hljs-built_in">cin</span> &gt;&gt; a &gt;&gt; b;
    <span class="hljs-keyword">if</span>( ex_gcd(a,b,x,y)==<span class="hljs-number">1</span> ){
        <span class="hljs-built_in">cout</span> &lt;&lt; (x+b)%b; 
    }
}</code></pre>

<p>注意,在ex_gcd()中求得的x可能为负值,因此采用了　cout &lt;&lt; (x+b)%b; 这样的输出方式，输出ｘ最小的正整数解</p>

<p>到这里就结束了,我们讲了什么呢?</p>

<pre><code>欧几里得算法
扩展欧几里得算法
线性同余方程中一种特殊情况:乘法逆元 
</code></pre>

<p>这是我在CSDN发表的的第一篇博客,有很多不足.如果没看懂的话,欢迎看这篇文章 <br>
    <a href="http://blog.csdn.net/zhjchengfeng5/article/details/7786595" rel="nofollow">扩展欧几里德算法详解</a> <br>
    博主讲的很清楚, 对我启发很大.</p>            </div>
						<link href="https://csdnimg.cn/release/phoenix/mdeditor/markdown_views-258a4616f7.css" rel="stylesheet">
                      </div>
	</article>