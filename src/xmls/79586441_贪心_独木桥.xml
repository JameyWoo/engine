<article class="baidu_pl">
		<div id="article_content" class="article_content clearfix csdn-tracking-statistics" data-pid="blog"  data-mod=popu_307  data-dsm = "post" >
								<div class="article-copyright">
                  					<svg class="icon" title="CSDN认证原创" aria-hidden="true" style="width:53px; height: 18px; vertical-align: -4px;">
							<use xlink:href="#CSDN_Cert"></use>
					</svg>
                  					
					版权声明：看我干嘛? 你又没打算转载我的博客~					https://blog.csdn.net/wjh2622075127/article/details/79586441				</div>
								<link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/template/css/ck_htmledit_views-f57960eb32.css" />
        								            <div id="content_views" class="markdown_views prism-atom-one-light">
							<!-- flowchart 箭头图标 勿删 -->
							<svg xmlns="http://www.w3.org/2000/svg" style="display: none;"><path stroke-linecap="round" d="M5,0 0,2.5 5,5z" id="raphael-marker-block" style="-webkit-tap-highlight-color: rgba(0, 0, 0, 0);"></path></svg>
							<p><strong><a href="https://www.luogu.org/problemnew/show/P1007" rel="nofollow">独木桥</a></strong></p>

<p>这是一道贪心题, 刚开始死活贪不出, 没有明确的思路.</p>

<p>对于这么多士兵行走, 难道每个士兵都去考虑, 然后还模拟士兵和士兵相撞产生的各种情况?</p>

<p><em>问题的本质</em>: <strong>士兵相遇后, 原路返回, 但其实和士兵直走擦肩而过没有区别.</strong> </p>

<p>所以思路很明确了: </p>

<blockquote>
  <p>最小时间为所有士兵最小时间的最大值 <br>
  最大时间为所有士兵最大时间的最大值</p>
</blockquote>

<p>第二版代码是这样的:</p>



<pre class="prettyprint"><code class=" hljs cpp"><span class="hljs-preprocessor">#include &lt;iostream&gt;</span>
<span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;

<span class="hljs-keyword">int</span> main()
{
    <span class="hljs-keyword">int</span> l, n, tmp, ans1 = <span class="hljs-number">0</span>, ans2 = <span class="hljs-number">0</span>; 
    <span class="hljs-built_in">cin</span> &gt;&gt; l &gt;&gt; n;
    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; ++i) {
        <span class="hljs-built_in">cin</span> &gt;&gt; tmp;
        ans1 = max(tmp &gt; l/<span class="hljs-number">2</span> ? (l + <span class="hljs-number">1</span> - tmp) : tmp, ans1);
        ans2 = max(ans2, tmp &gt; l/<span class="hljs-number">2</span> ? tmp : l + <span class="hljs-number">1</span> - tmp);
    }
    <span class="hljs-built_in">cout</span> &lt;&lt; ans1 &lt;&lt; <span class="hljs-string">' '</span> &lt;&lt; ans2;
} </code></pre>

<p>然而后来了解到那个思路后, 发现这样最精确</p>



<pre class="prettyprint"><code class=" hljs cpp"><span class="hljs-preprocessor">#include &lt;iostream&gt;</span>
<span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;

<span class="hljs-keyword">int</span> main()
{
    <span class="hljs-keyword">int</span> l, n, maxv = <span class="hljs-number">0</span>, minv = <span class="hljs-number">0</span>, x;
    <span class="hljs-built_in">cin</span> &gt;&gt; l &gt;&gt; n;
    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; ++i) {
        <span class="hljs-built_in">cin</span> &gt;&gt; x;
        minv = max(minv, min(x, l + <span class="hljs-number">1</span> - x));
        maxv = max(maxv, max(x, l + <span class="hljs-number">1</span> - x));
    }
    <span class="hljs-built_in">cout</span> &lt;&lt; minv &lt;&lt; <span class="hljs-string">' '</span> &lt;&lt;  maxv;
}</code></pre>

<p>这是一道好题. <strong>透过现象看本质.</strong></p>            </div>
						<link href="https://csdnimg.cn/release/phoenix/mdeditor/markdown_views-258a4616f7.css" rel="stylesheet">
                      </div>
	</article>