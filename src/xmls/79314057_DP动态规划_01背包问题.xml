<article class="baidu_pl">
		<div id="article_content" class="article_content clearfix csdn-tracking-statistics" data-pid="blog"  data-mod=popu_307  data-dsm = "post" >
								<div class="article-copyright">
                  					<svg class="icon" title="CSDN认证原创" aria-hidden="true" style="width:53px; height: 18px; vertical-align: -4px;">
							<use xlink:href="#CSDN_Cert"></use>
					</svg>
                  					
					版权声明：看我干嘛? 你又没打算转载我的博客~					https://blog.csdn.net/wjh2622075127/article/details/79314057				</div>
								<link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/template/css/ck_htmledit_views-f57960eb32.css" />
        								            <div id="content_views" class="markdown_views prism-atom-one-light">
							<!-- flowchart 箭头图标 勿删 -->
							<svg xmlns="http://www.w3.org/2000/svg" style="display: none;"><path stroke-linecap="round" d="M5,0 0,2.5 5,5z" id="raphael-marker-block" style="-webkit-tap-highlight-color: rgba(0, 0, 0, 0);"></path></svg>
							<p>动态规划是一种思想, 因为很违背直觉, 所以初学时理解起来很困难, 和递归一样, 都是比较奇妙的思想.</p>

<p>01背包问题是各类背包问题(见背包九讲)中最简单的一种模型, 但是理解它也花了我很多时间.</p>

<p>网上和各种算法书籍都有关于背包问题的讲解.</p>

<p>刚做了两道基础的01背包问题, 遇到了几个问题, 也靠自己解决了它们</p>

<p>两道题:</p>

<blockquote>
  <p>1) <a href="https://www.luogu.org/problemnew/show/P1048" rel="nofollow">洛谷1048-采药</a> <br>
  2) <a href="https://www.luogu.org/problemnew/show/P1048" rel="nofollow">洛谷1049-装箱问题</a></p>
</blockquote>



<h4 id="采药是一道裸的01背包问题-按照常规的解法去做-将模型对象一一对应即可">采药是一道裸的01背包问题, 按照常规的解法去做, 将模型对象一一对应即可</h4>

<p>我遇到的一个问题是:</p>

<p><strong>没有设置边界条件, 即物品体积为71而包体积为70时没有跳过, 而是用了71, 导致结果更大</strong></p>

<p>看了一遍书之后, 理解了然后改正了错误</p>



<pre class="prettyprint"><code class=" hljs cpp"><span class="hljs-preprocessor">#include &lt;iostream&gt;</span>

<span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;

<span class="hljs-keyword">int</span> main()
{
    <span class="hljs-keyword">int</span> vv, k, time[<span class="hljs-number">105</span>] = {}, val[<span class="hljs-number">105</span>] = {}, dp[<span class="hljs-number">105</span>][<span class="hljs-number">1005</span>] = {};
    <span class="hljs-built_in">cin</span> &gt;&gt; vv &gt;&gt; k;
    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= k; ++i) {
        <span class="hljs-built_in">cin</span> &gt;&gt; time[i] &gt;&gt; val[i];
    }
    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= k; ++i) {
        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= vv; ++j) {
            <span class="hljs-keyword">if</span>(time[i] &gt; j) {    <span class="hljs-comment">//先前这里时没有的</span>
                dp[i][j] = dp[i - <span class="hljs-number">1</span>][j];
                <span class="hljs-keyword">continue</span>;
            }
            dp[i][j] = max(dp[i - <span class="hljs-number">1</span>][j], dp[i - <span class="hljs-number">1</span>][j - time[i]] + val[i]); 
        }
    }
    <span class="hljs-built_in">cout</span> &lt;&lt; dp[k][vv];
}</code></pre>



<h4 id="另一题也是01背包问题">另一题也是01背包问题</h4>

<p><em>但不是裸的01背包问题</em></p>

<p>它是求最小剩余容量|min</p>

<p>初看时, 以为是贪心问题, 但自习分析一下, 发现还是01背包问题 <br>
稍微变了下型</p>

<p>我推导状态转移方程花了不少时间, 先是推出了这样一个错误的方程</p>

<blockquote>
  <p>dp[i][j] = min{dp[i][dp[i-1][j]], dp[i-1][j]};  //注意括号</p>
</blockquote>

<p>我也不太记得我当时是怎么想的</p>

<p>再画了个表格手动模拟了一下dp的过程, 发现, 其实方程还是类似的, 不过少了+val[i]</p>

<blockquote>
  <p>dp[i][j] = min{dp[i][j - v[i]], dp[i-1][j]}; //求最小的</p>
</blockquote>

<p>新的状态转移方程更难理解, 不过话说回来, dp本来就是难理解的东西</p>

<p>不过, 这两道题的本质是一样的, 都是01背包问题的本质(这不是废话吗…)</p>

<p><strong>什么本质呢?</strong></p>

<p><strong>第i个木箱有两种情况, 选或不选. 选的时候选上了(分配相同大小的容积给它, 相当于消去了), (即0+)再加剩余容积的最小剩余容积(之前计算过). 或者不选, 那么最小的剩余容积还是上一行同一列的状态. 然后取选和不选中剩余容积最小的状态. 这就是当前最优状态, 也是对整道题目来说的最优子结构</strong></p>

<p><strong>我认为, 本质就是在选和不选两种状态中选择更优的状态进行状态转移, 这样就得到了最优状态</strong></p>

<p><strong>可以肯定的是, 做好背包问题的关键是: 写好状态转移方程. 而要写好状态转移方程, 就要提取问题信息, 将它模型化.</strong></p>

<p><strong>目前我总结出来的方法是, 做表格, 从表格上分析状态</strong></p>

<p>下面是第二题的AC代码</p>



<pre class="prettyprint"><code class=" hljs cpp"><span class="hljs-preprocessor">#include &lt;iostream&gt;</span>
<span class="hljs-preprocessor">#include &lt;algorithm&gt;</span>

<span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;
<span class="hljs-keyword">int</span> dp[<span class="hljs-number">31</span>][<span class="hljs-number">20005</span>];

<span class="hljs-keyword">int</span> main()
{
    <span class="hljs-keyword">int</span> vmax, n; <span class="hljs-comment">//vmax为总体积, n为箱子个数 </span>
    <span class="hljs-built_in">cin</span> &gt;&gt; vmax &gt;&gt; n;
    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;= vmax; ++i) {
        dp[<span class="hljs-number">0</span>][i] = i;  <span class="hljs-comment">//没有箱子时, 剩余的空间为总空间 </span>
    }
    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;= n; ++i) {
        dp[i][<span class="hljs-number">0</span>] = <span class="hljs-number">0</span>; <span class="hljs-comment">//有箱子但没有体积时, 剩余空间为0 </span>
    } 
    <span class="hljs-keyword">int</span> *a = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span> [n + <span class="hljs-number">1</span>];
    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) {
        <span class="hljs-built_in">cin</span> &gt;&gt; a[i];
    }
    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) {
        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= vmax; ++j) {
            <span class="hljs-keyword">if</span>(a[i] &gt; j) {
                dp[i][j] = dp[i - <span class="hljs-number">1</span>][j];
                <span class="hljs-keyword">continue</span>;
            }
            dp[i][j] = min(dp[i - <span class="hljs-number">1</span>][j - a[i]], dp[i - <span class="hljs-number">1</span>][j]);
        }
    }
    <span class="hljs-built_in">cout</span> &lt;&lt; dp[n][vmax];
}</code></pre>



<h2 id="title">———————————————————————</h2>

<p>2018-2-12更新</p>

<p>在博客上看了一些其他人的代码, 再写了几遍, 加深了一些理解. </p>

<p>出现了一个错了好几次的错误</p>

<p><strong>把物体体积和物体价值搞错!!! 难道是命名出了问题, 容易混淆?*</strong></p>

<p><strong>以后千万别搞错了!!!</strong></p>

<p>做了一些优化, 通过<strong>压维</strong>节省了大量的空间, 不过这样的话计算最有子结构就要逆序了. 因为每个计算要用到前面解决的问题而不是后面, 所以前面的结果不能够被覆盖掉.</p>

<p>不过, 其实还是可以正序的, 只是要开2*vv大小的空间. </p>

<p><strong>裸的01背包问题的代码其实是非常简洁而且非常优美的.</strong></p>

<p>代码虽短, 但理解不易.</p>



<pre class="prettyprint"><code class=" hljs cpp"><span class="hljs-preprocessor">#include &lt;iostream&gt;</span>
<span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;
<span class="hljs-keyword">int</span> v[<span class="hljs-number">105</span>] = {}, w[<span class="hljs-number">105</span>] = {}, vv, k, dp[<span class="hljs-number">1005</span>] = {};

<span class="hljs-keyword">int</span> main()
{
    <span class="hljs-built_in">cin</span> &gt;&gt; vv &gt;&gt; k;
    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= k; ++i)
        <span class="hljs-built_in">cin</span> &gt;&gt; w[i] &gt;&gt; v[i];
    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= k; ++i) {
        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = vv; j &gt;= w[i]; --j) {
            dp[j] = max(dp[j], dp[j - w[i]] + v[i]);
        }
    }
    <span class="hljs-built_in">cout</span> &lt;&lt; dp[vv];
}</code></pre>



<h1 id="so-beautiful"><strong>So beautiful !!!</strong></h1>            </div>
						<link href="https://csdnimg.cn/release/phoenix/mdeditor/markdown_views-258a4616f7.css" rel="stylesheet">
                      </div>
	</article>