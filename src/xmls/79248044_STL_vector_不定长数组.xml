<article class="baidu_pl">
		<div id="article_content" class="article_content clearfix csdn-tracking-statistics" data-pid="blog"  data-mod=popu_307  data-dsm = "post" >
								<div class="article-copyright">
                  					<svg class="icon" title="CSDN认证原创" aria-hidden="true" style="width:53px; height: 18px; vertical-align: -4px;">
							<use xlink:href="#CSDN_Cert"></use>
					</svg>
                  					
					版权声明：看我干嘛? 你又没打算转载我的博客~					https://blog.csdn.net/wjh2622075127/article/details/79248044				</div>
								<link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/template/css/ck_htmledit_views-f57960eb32.css" />
        								            <div id="content_views" class="markdown_views prism-atom-one-light">
							<!-- flowchart 箭头图标 勿删 -->
							<svg xmlns="http://www.w3.org/2000/svg" style="display: none;"><path stroke-linecap="round" d="M5,0 0,2.5 5,5z" id="raphael-marker-block" style="-webkit-tap-highlight-color: rgba(0, 0, 0, 0);"></path></svg>
							<h2 id="vector是stl中的一种容器-是一种不定长的数组">vector是STL中的一种容器, 是一种不定长的数组.</h2>

<p>包含在vector头文件中 <br>
使用方式为</p>

<blockquote>
  <p>vector&lt; int &gt;vec;  //定义了一个vec数组 <br>
  vector&lt; int &gt; vec(10); //定义了元素数, 各元素都为0</p>
</blockquote>

<p>有 <br>
<strong>size()函数</strong>            //返回数组元素数, 即数组大小 <br>
<strong>resize()函数</strong>      //重置数组大小 <br>
<strong>push_back(argu)</strong>     //函数向后添加元素argu <br>
<strong>pop_back()</strong>      //删除最后一个元素 <br>
<strong>clear()函数</strong>       //将数组清空</p>

<p>resize()可以设置数组大小, 元素全为0</p>

<p>vector&lt; int &gt; vec(3); //元素数为3 <br>
vec.resize(5); //扩展为5, 元素值都为0</p>

<pre class="prettyprint"><code class=" hljs cpp"><span class="hljs-preprocessor">#include &lt;iostream&gt;</span>
<span class="hljs-preprocessor">#include &lt;vector&gt;</span>
<span class="hljs-preprocessor">#include &lt;algorithm&gt;</span>

<span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;

<span class="hljs-keyword">int</span> main()
{
    <span class="hljs-stl_container"><span class="hljs-built_in">vector</span> &lt;<span class="hljs-keyword">int</span>&gt;</span> vec;
    <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">"vec.size() = "</span> &lt;&lt; vec.size() &lt;&lt; endl;
    vec.push_back(<span class="hljs-number">4</span>);
    vec.push_back(<span class="hljs-number">5</span>);
    <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">"vec.size() = "</span> &lt;&lt; vec.size() &lt;&lt; endl;
    vec.pop_back();
    <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">"vec.size() = "</span> &lt;&lt; vec.size() &lt;&lt; endl;
    vec.resize(<span class="hljs-number">4</span>);
    <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">"vec.size() = "</span> &lt;&lt; vec.size() &lt;&lt; endl;
}</code></pre>

<p>有 : <br>
<strong>begin()函数</strong>, 返回数组的第一个元素的位置 <br>
<strong>end()函数</strong>, 返回数组的最后一个元素的下一个位置 <br>
<strong>插入函数insert()</strong>    //插入到当前指针位置, 原来的元素向后移 <br>
<strong>删除函数erase()</strong> //删除当前指针位置的元素, 之后的元素向前移动 <br>
判断<strong>是否为空函数empty()</strong>  //返回bool数</p>

<p>代码示例:</p>



<pre class="prettyprint"><code class=" hljs cpp"><span class="hljs-preprocessor">#include &lt;iostream&gt;</span>
<span class="hljs-preprocessor">#include &lt;vector&gt;</span>
<span class="hljs-preprocessor">#include &lt;algorithm&gt;</span>

<span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;

<span class="hljs-keyword">int</span> main()
{
    <span class="hljs-stl_container"><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;</span>vec;
    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">20</span>; ++i) {
        vec.push_back(i);
    }
    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">20</span>; ++i) {
        <span class="hljs-built_in">cout</span> &lt;&lt; vec[i]&lt;&lt; endl;
    }
    vec.insert(vec.begin(), -<span class="hljs-number">1</span>);
    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">20</span>; ++i) {
        <span class="hljs-built_in">cout</span> &lt;&lt; vec[i]&lt;&lt; endl;
    }
    vec.erase(vec.end() - <span class="hljs-number">1</span>);
    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">20</span>; ++i) {
        <span class="hljs-built_in">cout</span> &lt;&lt; vec[i]&lt;&lt; endl;
    }
}</code></pre>

<p>有<strong>三种打印方式</strong></p>

<ol>
<li>传统的下标, 如vec[1]  </li>
<li>vec.at(i), 使用at函数的参数表示位置  </li>
<li>使用迭代器的方法 </li>
</ol>

<p>代码示例:</p>



<pre class="prettyprint"><code class=" hljs cpp"><span class="hljs-preprocessor">#include &lt;iostream&gt;</span>
<span class="hljs-preprocessor">#include &lt;vector&gt;</span>
<span class="hljs-preprocessor">#include &lt;algorithm&gt;</span>

<span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;

<span class="hljs-keyword">int</span> main()
{
    <span class="hljs-stl_container"><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;</span>vec;
    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">20</span>; ++i) {
        vec.push_back(i);
    }
    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">20</span>; ++i) {
        <span class="hljs-built_in">cout</span> &lt;&lt; vec[i]&lt;&lt; endl;
    }
    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">20</span>; ++i) {
        <span class="hljs-built_in">cout</span> &lt;&lt; vec.at(i)&lt;&lt; endl;
    }
    <span class="hljs-stl_container"><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;</span>::iterator it = vec.begin();
    <span class="hljs-keyword">while</span>(it != vec.end()) {
        <span class="hljs-built_in">cout</span> &lt;&lt; *it &lt;&lt; endl;
        it++;
    }
}</code></pre>



<h3 id="一些相关函数">一些相关函数</h3>



<h4 id="使用reverse将元素翻转">使用reverse将元素翻转</h4>

<p>reverse(vec.begin(),vec.end()); <br>
//将元素翻转</p>



<h4 id="使用sort排列">使用sort排列</h4>

<p>sort(vec.begin(), vec.end(), cmp); <br>
cmp为自定义的比较函数</p>



<h4 id="多维数组声明方式">多维数组声明方式</h4>

<p>vector&lt; int&gt; vec[100]; <br>
以上声明了一个元素数为100的vector数组 <br>
注意: 数组大小固定 <br>
同理有其他多维 <br>
vector &lt; int &gt; vec[100][100][100]; <br>
但这些除最后一维其他维都是固定的</p>

<p>另一种声明方式 <br>
vector &lt; vector&lt; int &gt; &gt; vec; <br>
如:</p>



<pre class="prettyprint"><code class=" hljs cpp"><span class="hljs-preprocessor">#include &lt;iostream&gt;</span>
<span class="hljs-preprocessor">#include &lt;vector&gt;</span>

<span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;

<span class="hljs-keyword">int</span> main()
{
    <span class="hljs-stl_container"><span class="hljs-built_in">vector</span>&lt; <span class="hljs-stl_container"><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;</span> &gt;</span> vec(<span class="hljs-number">20</span>);
    <span class="hljs-keyword">for</span>( <span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">20</span>; ++i ) {
        vec[i].resize(<span class="hljs-number">20</span>);
    }
    <span class="hljs-keyword">for</span>( <span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">20</span>; ++i ) {
        <span class="hljs-keyword">for</span>( <span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">20</span>; ++j ) {
            <span class="hljs-built_in">cout</span> &lt;&lt; vec[i][j] &lt;&lt; <span class="hljs-string">' '</span>;
        }
        <span class="hljs-built_in">cout</span> &lt;&lt; endl;
    }
    <span class="hljs-built_in">cout</span> &lt;&lt; vec.size() &lt;&lt; endl;
}</code></pre>



<pre class="prettyprint"><code class=" hljs cpp"><span class="hljs-preprocessor">#include &lt;iostream&gt;</span>
<span class="hljs-preprocessor">#include &lt;vector&gt;</span>

<span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;

<span class="hljs-keyword">int</span> main()
{
    <span class="hljs-stl_container"><span class="hljs-built_in">vector</span> &lt;<span class="hljs-keyword">int</span>&gt;</span> vec(<span class="hljs-number">100</span>);
    <span class="hljs-keyword">for</span>( <span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100</span>; ++i ) {
        <span class="hljs-built_in">cout</span> &lt;&lt; vec[i] &lt;&lt; endl;
    }
    <span class="hljs-built_in">cout</span> &lt;&lt; vec.size() &lt;&lt; endl;
    <span class="hljs-stl_container"><span class="hljs-built_in">vector</span> &lt;<span class="hljs-keyword">int</span>&gt;</span> vecc;
    vecc.resize(<span class="hljs-number">10000</span>);
    <span class="hljs-keyword">for</span>( <span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10000</span>; ++i ) {
        <span class="hljs-built_in">cout</span> &lt;&lt; vecc[i] &lt;&lt; <span class="hljs-string">' '</span>;
    }
    vec.push_back(<span class="hljs-number">3</span>);
    <span class="hljs-built_in">cout</span> &lt;&lt; endl;
    <span class="hljs-keyword">for</span>( <span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">101</span>; ++i ) {
        <span class="hljs-built_in">cout</span> &lt;&lt; vec[i];
    }
}</code></pre>            </div>
						<link href="https://csdnimg.cn/release/phoenix/mdeditor/markdown_views-258a4616f7.css" rel="stylesheet">
                      </div>
	</article>