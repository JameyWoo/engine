<article class="baidu_pl">
		<div id="article_content" class="article_content clearfix csdn-tracking-statistics" data-pid="blog"  data-mod=popu_307  data-dsm = "post" >
								<div class="article-copyright">
                  					<svg class="icon" title="CSDN认证原创" aria-hidden="true" style="width:53px; height: 18px; vertical-align: -4px;">
							<use xlink:href="#CSDN_Cert"></use>
					</svg>
                  					
					版权声明：看我干嘛? 你又没打算转载我的博客~					https://blog.csdn.net/wjh2622075127/article/details/79224771				</div>
								<link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/template/css/ck_htmledit_views-f57960eb32.css" />
        								            <div id="content_views" class="markdown_views prism-atom-one-light">
							<!-- flowchart 箭头图标 勿删 -->
							<svg xmlns="http://www.w3.org/2000/svg" style="display: none;"><path stroke-linecap="round" d="M5,0 0,2.5 5,5z" id="raphael-marker-block" style="-webkit-tap-highlight-color: rgba(0, 0, 0, 0);"></path></svg>
							<p>因为平时随机数用的比较少, 总是会忘记如何使用, 所以常常是要用的时候到网上去查找资料, 觉得挺麻烦, 干脆自己写一篇.</p>

<p>随机函数rand(), 包含在cstdlib头文件中. 有的博客文章给出的代码是没有这个的, 编译不通过, 误导别人.</p>

<p>基本的用法是这样的:</p>



<pre class="prettyprint"><code class=" hljs cpp"><span class="hljs-preprocessor">#include &lt;iostream&gt;</span>
<span class="hljs-preprocessor">#include &lt;cstdlib&gt;</span>

<span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;

<span class="hljs-keyword">int</span> main()
{
    <span class="hljs-keyword">int</span> num = rand();
    <span class="hljs-built_in">cout</span> &lt;&lt; rand() &lt;&lt; endl;
}</code></pre>

<p>然而只是这样的话, 生成的(伪)随机数不总是随机. <br>
为什么说是不总是? 运行如下代码, 发现生成的一系列随机数始终相同</p>

<pre class="prettyprint"><code class=" hljs cpp"><span class="hljs-preprocessor">#include &lt;iostream&gt;</span>
<span class="hljs-preprocessor">#include &lt;cstdlib&gt;</span>

<span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;

<span class="hljs-keyword">int</span> main()
{
    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100</span>; ++i)
        <span class="hljs-built_in">cout</span> &lt;&lt; rand() &lt;&lt; endl;
}</code></pre>

<p><a href="https://baike.baidu.com/item/rand%E5%87%BD%E6%95%B0/5916603?fr=aladdin" rel="nofollow">具体解释</a></p>

<p>解决这种问题的方法是使用srand函数</p>



<pre class="prettyprint"><code class=" hljs cpp"><span class="hljs-preprocessor">#include &lt;iostream&gt;</span>
<span class="hljs-preprocessor">#include &lt;ctime&gt;</span>
<span class="hljs-preprocessor">#include &lt;cstdlib&gt;</span>

<span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;

<span class="hljs-keyword">int</span> main()
{
    srand((<span class="hljs-keyword">unsigned</span>)time(NULL));
    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100</span>; ++i)
        <span class="hljs-built_in">cout</span> &lt;&lt; rand() &lt;&lt; endl;
}</code></pre>

<p>加个ctime头文件. srand函数的种子使用系统时间</p>

<p>另外, 可以使用宏定义自定义一个自由的区间的随机数 <br>
如:</p>

<blockquote>
  <p>//随机范围为[a,b] <br>
   #define random(a, b) rand()%(b-a+1) + a</p>
</blockquote>

<p>同理其他</p>            </div>
						<link href="https://csdnimg.cn/release/phoenix/mdeditor/markdown_views-258a4616f7.css" rel="stylesheet">
                      </div>
	</article>