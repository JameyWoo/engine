<article class="baidu_pl">
		<div id="article_content" class="article_content clearfix csdn-tracking-statistics" data-pid="blog"  data-mod=popu_307  data-dsm = "post" >
								<div class="article-copyright">
                  					<svg class="icon" title="CSDN认证原创" aria-hidden="true" style="width:53px; height: 18px; vertical-align: -4px;">
							<use xlink:href="#CSDN_Cert"></use>
					</svg>
                  					
					版权声明：看我干嘛? 你又没打算转载我的博客~					https://blog.csdn.net/wjh2622075127/article/details/82898975				</div>
								<link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/template/css/ck_htmledit_views-f57960eb32.css" />
        								            <div id="content_views" class="markdown_views prism-atom-one-light">
							<!-- flowchart 箭头图标 勿删 -->
							<svg xmlns="http://www.w3.org/2000/svg" style="display: none;"><path stroke-linecap="round" d="M5,0 0,2.5 5,5z" id="raphael-marker-block" style="-webkit-tap-highlight-color: rgba(0, 0, 0, 0);"></path></svg>
							<p>这是一套基础的计算几何模板组件, 可以解决的问题有</p>
<p><strong>0. 内积和外积计算</strong><br>
<strong>1. 平行和正交判定.</strong><br>
<strong>2. 找投影点</strong><br>
<strong>3. 找对称点</strong><br>
<strong>4. 找距离(点与点, 点与直线, 点与线段, 线段与线段)</strong><br>
<strong>5. 判断逆/顺时针</strong><br>
<strong>6. 判断线段相交</strong><br>
<strong>7. 线段的交点</strong><br>
<strong>8. 圆与直线的交点</strong><br>
<strong>9. 圆与圆的交点</strong><br>
<strong>10. 点的内包</strong><br>
<strong>11. 安德鲁算法求凸包</strong></p>
<p>这套算法中, 最基本的是<strong>内积和外积</strong>, 其他的实现基本是这两个数学概念用法的拓展. 需要进行一些演算.</p>
<p>代码略长, 可自取对应函数(有注释)</p>
<p>PS. 主函数中的数据输入是求凸包.</p>
<pre><code class="language-cpp"><code class="prism  language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;algorithm&gt;</span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;vector&gt;</span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cmath&gt;</span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cassert&gt;</span></span>
<span class="token macro property">#<span class="token directive keyword">define</span> EPS (1e-10)</span>
<span class="token macro property">#<span class="token directive keyword">define</span> equals(a, b) (fabs((a) - (b)) &lt; EPS)</span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">Point</span> <span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
	<span class="token keyword">double</span> x<span class="token punctuation">,</span> y<span class="token punctuation">;</span>
	Point <span class="token punctuation">(</span><span class="token keyword">double</span> x <span class="token operator">=</span> <span class="token number">0.0</span><span class="token punctuation">,</span> <span class="token keyword">double</span> y <span class="token operator">=</span> <span class="token number">0.0</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token function">x</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">y</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment">// 可传递参数的默认构造函数</span>
	Point <span class="token keyword">operator</span> <span class="token operator">+</span> <span class="token punctuation">(</span>Point <span class="token operator">&amp;</span>p<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 自定义点/向量加法</span>
		<span class="token keyword">return</span> <span class="token function">Point</span><span class="token punctuation">(</span>x <span class="token operator">+</span> p<span class="token punctuation">.</span>x<span class="token punctuation">,</span> y <span class="token operator">+</span> p<span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	Point <span class="token keyword">operator</span> <span class="token operator">-</span> <span class="token punctuation">(</span>Point <span class="token operator">&amp;</span>p<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 自定义点/向量减法</span>
		<span class="token keyword">return</span> <span class="token function">Point</span><span class="token punctuation">(</span>x <span class="token operator">+</span> p<span class="token punctuation">.</span>x<span class="token punctuation">,</span> y <span class="token operator">-</span> p<span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	Point <span class="token keyword">operator</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token keyword">double</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 自定义向量乘法(数乘)</span>
		<span class="token keyword">return</span> <span class="token function">Point</span><span class="token punctuation">(</span>x <span class="token operator">*</span> k<span class="token punctuation">,</span> y <span class="token operator">*</span> k<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	Point <span class="token keyword">operator</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token keyword">double</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token function">Point</span><span class="token punctuation">(</span>x <span class="token operator">/</span> k<span class="token punctuation">,</span> y <span class="token operator">/</span> k<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">bool</span> <span class="token keyword">operator</span> <span class="token operator">&lt;</span> <span class="token punctuation">(</span><span class="token keyword">const</span> Point <span class="token operator">&amp;</span>p<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> x <span class="token operator">!=</span> p<span class="token punctuation">.</span>x <span class="token operator">?</span> x <span class="token operator">&lt;</span> p<span class="token punctuation">.</span>x <span class="token operator">:</span> y <span class="token operator">&lt;</span> p<span class="token punctuation">.</span>y<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">bool</span> <span class="token keyword">operator</span> <span class="token operator">==</span> <span class="token punctuation">(</span><span class="token keyword">const</span> Point <span class="token operator">&amp;</span>p<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token function">fabs</span><span class="token punctuation">(</span>x <span class="token operator">-</span> p<span class="token punctuation">.</span>x<span class="token punctuation">)</span> <span class="token operator">&lt;</span> EPS <span class="token operator">&amp;&amp;</span> <span class="token function">fabs</span><span class="token punctuation">(</span>y <span class="token operator">-</span> p<span class="token punctuation">.</span>y<span class="token punctuation">)</span> <span class="token operator">&lt;</span> EPS<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">Segment</span> <span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
	Point p1<span class="token punctuation">,</span> p2<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">typedef</span> Point Vector<span class="token punctuation">;</span>
<span class="token keyword">typedef</span> Segment Line<span class="token punctuation">;</span>
<span class="token keyword">typedef</span> vector<span class="token operator">&lt;</span>Point<span class="token operator">&gt;</span> Polygon<span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">Circle</span> <span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
	Point c<span class="token punctuation">;</span>
	<span class="token keyword">double</span> r<span class="token punctuation">;</span>
	<span class="token function">Circle</span><span class="token punctuation">(</span>Point c <span class="token operator">=</span> <span class="token function">Point</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">double</span> r <span class="token operator">=</span> <span class="token number">0.0</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token function">c</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">r</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">double</span> <span class="token function">norm</span><span class="token punctuation">(</span>Point a<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 获取向量大小的平方</span>
	<span class="token keyword">return</span> a<span class="token punctuation">.</span>x <span class="token operator">*</span> a<span class="token punctuation">.</span>x <span class="token operator">+</span> a<span class="token punctuation">.</span>y <span class="token operator">*</span> a<span class="token punctuation">.</span>y<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">double</span> <span class="token function">abs</span><span class="token punctuation">(</span>Point a<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 获取向量大小, 直接调用norm()</span>
	<span class="token keyword">return</span> <span class="token function">sqrt</span><span class="token punctuation">(</span><span class="token function">norm</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">double</span> <span class="token function">dot</span><span class="token punctuation">(</span>Vector a<span class="token punctuation">,</span> Vector b<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token keyword">return</span> a<span class="token punctuation">.</span>x <span class="token operator">*</span> b<span class="token punctuation">.</span>x <span class="token operator">+</span> a<span class="token punctuation">.</span>y <span class="token operator">*</span> b<span class="token punctuation">.</span>y<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">double</span> <span class="token function">cross</span><span class="token punctuation">(</span>Vector a<span class="token punctuation">,</span> Vector b<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token keyword">return</span> a<span class="token punctuation">.</span>x <span class="token operator">*</span> b<span class="token punctuation">.</span>y <span class="token operator">-</span> a<span class="token punctuation">.</span>y <span class="token operator">*</span> b<span class="token punctuation">.</span>x<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">bool</span> <span class="token function">isOrhtogonal</span><span class="token punctuation">(</span>Vector a<span class="token punctuation">,</span> Vector b<span class="token punctuation">)</span> <span class="token comment">// 三个重载函数判断是否正交. 利用dot(点积)判断</span>
<span class="token punctuation">{</span>
	<span class="token keyword">return</span> <span class="token function">equals</span><span class="token punctuation">(</span><span class="token function">dot</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">bool</span> <span class="token function">isOrhtogonal</span><span class="token punctuation">(</span>Point a1<span class="token punctuation">,</span> Point a2<span class="token punctuation">,</span> Point b1<span class="token punctuation">,</span> Point b2<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token keyword">return</span> <span class="token function">isOrhtogonal</span><span class="token punctuation">(</span>a1 <span class="token operator">-</span> a2<span class="token punctuation">,</span> b1 <span class="token operator">-</span> b2<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">bool</span> <span class="token function">isOrhtogonal</span><span class="token punctuation">(</span>Segment s1<span class="token punctuation">,</span> Segment s2<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token keyword">return</span> <span class="token function">isOrhtogonal</span><span class="token punctuation">(</span>s1<span class="token punctuation">.</span>p2 <span class="token operator">-</span> s1<span class="token punctuation">.</span>p1<span class="token punctuation">,</span> s2<span class="token punctuation">.</span>p2 <span class="token operator">-</span> s2<span class="token punctuation">.</span>p1<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">bool</span> <span class="token function">isParallel</span><span class="token punctuation">(</span>Vector a<span class="token punctuation">,</span> Vector b<span class="token punctuation">)</span> <span class="token comment">// 三个重载函数判断是否平行.</span>
<span class="token punctuation">{</span>
	<span class="token keyword">return</span> <span class="token function">equals</span><span class="token punctuation">(</span><span class="token function">cross</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">bool</span> <span class="token function">isParallel</span><span class="token punctuation">(</span>Point a1<span class="token punctuation">,</span> Point a2<span class="token punctuation">,</span> Point b1<span class="token punctuation">,</span> Point b2<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token keyword">return</span> <span class="token function">isParallel</span><span class="token punctuation">(</span>a1 <span class="token operator">-</span> a2<span class="token punctuation">,</span> b1 <span class="token operator">-</span> b2<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">bool</span> <span class="token function">isParallel</span><span class="token punctuation">(</span>Segment s1<span class="token punctuation">,</span> Segment s2<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token keyword">return</span> <span class="token function">isParallel</span><span class="token punctuation">(</span>s1<span class="token punctuation">.</span>p2 <span class="token operator">-</span> s1<span class="token punctuation">.</span>p1<span class="token punctuation">,</span> s2<span class="token punctuation">.</span>p2 <span class="token operator">-</span> s2<span class="token punctuation">.</span>p1<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

Point <span class="token function">Project</span><span class="token punctuation">(</span>Segment s<span class="token punctuation">,</span> Point p<span class="token punctuation">)</span> <span class="token comment">// 一个点在一条线段上的投影</span>
<span class="token punctuation">{</span>
	Vector base <span class="token operator">=</span> s<span class="token punctuation">.</span>p2 <span class="token operator">-</span> s<span class="token punctuation">.</span>p1<span class="token punctuation">;</span>
	<span class="token keyword">double</span> r <span class="token operator">=</span> <span class="token function">dot</span><span class="token punctuation">(</span>base<span class="token punctuation">,</span> p <span class="token operator">-</span> s<span class="token punctuation">.</span>p1<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token function">norm</span><span class="token punctuation">(</span>base<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> base<span class="token operator">*</span>r <span class="token operator">+</span> s<span class="token punctuation">.</span>p1<span class="token punctuation">;</span> <span class="token comment">// 不能反了, 因为传递的参数是引用; 或者构造一个新的Point变量</span>
<span class="token punctuation">}</span>

Point <span class="token function">reflect</span><span class="token punctuation">(</span>Segment s<span class="token punctuation">,</span> Point p<span class="token punctuation">)</span> <span class="token comment">// 点p关于线段s的对称点, 即映像</span>
<span class="token punctuation">{</span>
	Point x <span class="token operator">=</span> <span class="token function">Project</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> <span class="token punctuation">(</span>x <span class="token operator">-</span> p<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2.0</span> <span class="token operator">+</span> p<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">double</span> <span class="token function">getDistance</span><span class="token punctuation">(</span>Point p1<span class="token punctuation">,</span> Point p2<span class="token punctuation">)</span> <span class="token comment">// 两点之间的距离</span>
<span class="token punctuation">{</span>
	<span class="token keyword">return</span> <span class="token function">abs</span><span class="token punctuation">(</span>p1 <span class="token operator">-</span> p2<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">double</span> <span class="token function">getDistanceLP</span><span class="token punctuation">(</span>Line l<span class="token punctuation">,</span> Point p<span class="token punctuation">)</span> <span class="token comment">// 点与直线的距离, 直接利用原点和投影点向量</span>
<span class="token punctuation">{</span>
	<span class="token keyword">return</span> <span class="token function">abs</span><span class="token punctuation">(</span><span class="token function">Project</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span> p<span class="token punctuation">)</span> <span class="token operator">-</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">double</span> <span class="token function">getDistanceSP</span><span class="token punctuation">(</span>Segment s<span class="token punctuation">,</span> Point p<span class="token punctuation">)</span> <span class="token comment">// 点与线段的距离, 需要做两个特判.</span>
<span class="token punctuation">{</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">dot</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>p2 <span class="token operator">-</span> s<span class="token punctuation">.</span>p1<span class="token punctuation">,</span> p <span class="token operator">-</span> s<span class="token punctuation">.</span>p1<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">getDistance</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>p1<span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">dot</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>p1 <span class="token operator">-</span> s<span class="token punctuation">.</span>p2<span class="token punctuation">,</span> p <span class="token operator">-</span> s<span class="token punctuation">.</span>p2<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">getDistance</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>p2<span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> <span class="token function">getDistanceLP</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">ccw</span><span class="token punctuation">(</span>Point p0<span class="token punctuation">,</span> Point p1<span class="token punctuation">,</span> Point p2<span class="token punctuation">)</span> <span class="token comment">// 判断方向: 逆时针, 顺时针, 射线两端, 线段上.</span>
<span class="token punctuation">{</span>
	Vector a <span class="token operator">=</span> p1 <span class="token operator">-</span> p0<span class="token punctuation">;</span>
	Vector b <span class="token operator">=</span> p2 <span class="token operator">-</span> p0<span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">cross</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">&gt;</span> EPS<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">cross</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token operator">-</span>EPS<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">dot</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token operator">-</span>EPS<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">2</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">norm</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token function">norm</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">bool</span> <span class="token function">intersect</span><span class="token punctuation">(</span>Segment s1<span class="token punctuation">,</span> Segment s2<span class="token punctuation">)</span> <span class="token comment">// 利用线段与点之间的方向关系, 判断线段是否相交k</span>
<span class="token punctuation">{</span>
	<span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token function">ccw</span><span class="token punctuation">(</span>s1<span class="token punctuation">.</span>p1<span class="token punctuation">,</span> s2<span class="token punctuation">.</span>p1<span class="token punctuation">,</span> s2<span class="token punctuation">.</span>p2<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token function">ccw</span><span class="token punctuation">(</span>s1<span class="token punctuation">.</span>p2<span class="token punctuation">,</span> s2<span class="token punctuation">.</span>p1<span class="token punctuation">,</span> s2<span class="token punctuation">.</span>p2<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>
			<span class="token punctuation">(</span><span class="token function">ccw</span><span class="token punctuation">(</span>s2<span class="token punctuation">.</span>p1<span class="token punctuation">,</span> s1<span class="token punctuation">.</span>p1<span class="token punctuation">,</span> s1<span class="token punctuation">.</span>p2<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token function">ccw</span><span class="token punctuation">(</span>s2<span class="token punctuation">.</span>p2<span class="token punctuation">,</span> s1<span class="token punctuation">.</span>p1<span class="token punctuation">,</span> s1<span class="token punctuation">.</span>p2<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">bool</span> <span class="token function">intersect</span><span class="token punctuation">(</span>Circle c<span class="token punctuation">,</span> Line l<span class="token punctuation">)</span> <span class="token comment">// 相交的重载函数, 判断圆和直线是否相交</span>
<span class="token punctuation">{</span>
	<span class="token keyword">return</span> <span class="token function">abs</span><span class="token punctuation">(</span><span class="token function">Project</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span> c<span class="token punctuation">.</span>c<span class="token punctuation">)</span> <span class="token operator">-</span> c<span class="token punctuation">.</span>c<span class="token punctuation">)</span> <span class="token operator">&lt;</span> c<span class="token punctuation">.</span>r<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">bool</span> <span class="token function">intersect</span><span class="token punctuation">(</span>Circle c1<span class="token punctuation">,</span> Circle c2<span class="token punctuation">)</span> <span class="token comment">// 判断两圆相交的函数</span>
<span class="token punctuation">{</span>
	<span class="token keyword">return</span> <span class="token function">abs</span><span class="token punctuation">(</span>c1<span class="token punctuation">.</span>c <span class="token operator">-</span> c2<span class="token punctuation">.</span>c<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token punctuation">(</span>c1<span class="token punctuation">.</span>r <span class="token operator">+</span> c2<span class="token punctuation">.</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">double</span> <span class="token function">getDistanceSS</span><span class="token punctuation">(</span>Segment s1<span class="token punctuation">,</span> Segment s2<span class="token punctuation">)</span> <span class="token comment">// 线段之间的距离, 如果相交则距离为0;</span>
<span class="token punctuation">{</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">intersect</span><span class="token punctuation">(</span>s1<span class="token punctuation">,</span> s2<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0.0</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> <span class="token function">min</span><span class="token punctuation">(</span><span class="token function">min</span><span class="token punctuation">(</span><span class="token function">getDistanceSP</span><span class="token punctuation">(</span>s1<span class="token punctuation">,</span> s2<span class="token punctuation">.</span>p1<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">getDistanceSP</span><span class="token punctuation">(</span>s1<span class="token punctuation">,</span> s2<span class="token punctuation">.</span>p2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
		   <span class="token function">min</span><span class="token punctuation">(</span><span class="token function">getDistanceSP</span><span class="token punctuation">(</span>s2<span class="token punctuation">,</span> s1<span class="token punctuation">.</span>p1<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">getDistanceSP</span><span class="token punctuation">(</span>s2<span class="token punctuation">,</span> s1<span class="token punctuation">.</span>p2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

Point <span class="token function">getCrossPoint</span><span class="token punctuation">(</span>Segment s1<span class="token punctuation">,</span> Segment s2<span class="token punctuation">)</span> <span class="token comment">// 获取两条线段的交, 前提是这两条线段有交点</span>
<span class="token punctuation">{</span>
	Vector base <span class="token operator">=</span> s1<span class="token punctuation">.</span>p2 <span class="token operator">-</span> s1<span class="token punctuation">.</span>p1<span class="token punctuation">;</span>
	<span class="token keyword">double</span> d1 <span class="token operator">=</span> <span class="token function">abs</span><span class="token punctuation">(</span><span class="token function">cross</span><span class="token punctuation">(</span>base<span class="token punctuation">,</span> s2<span class="token punctuation">.</span>p2 <span class="token operator">-</span> s1<span class="token punctuation">.</span>p1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">double</span> d2 <span class="token operator">=</span> <span class="token function">abs</span><span class="token punctuation">(</span><span class="token function">cross</span><span class="token punctuation">(</span>base<span class="token punctuation">,</span> s2<span class="token punctuation">.</span>p1 <span class="token operator">-</span> s1<span class="token punctuation">.</span>p1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">double</span> t <span class="token operator">=</span> d1 <span class="token operator">/</span> <span class="token punctuation">(</span>d1 <span class="token operator">+</span> d2<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> <span class="token punctuation">(</span>s2<span class="token punctuation">.</span>p1 <span class="token operator">-</span> s2<span class="token punctuation">.</span>p2<span class="token punctuation">)</span> <span class="token operator">*</span> t <span class="token operator">+</span> s2<span class="token punctuation">.</span>p2<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

pair<span class="token operator">&lt;</span>Point<span class="token punctuation">,</span> Point<span class="token operator">&gt;</span> <span class="token function">getCrossPoints</span><span class="token punctuation">(</span>Circle c<span class="token punctuation">,</span> Line l<span class="token punctuation">)</span> <span class="token comment">// 圆与直线的交点.</span>
<span class="token punctuation">{</span>
	<span class="token function">assert</span><span class="token punctuation">(</span><span class="token function">intersect</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> l<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 先断言圆和直线是相交的.</span>
	Point x <span class="token operator">=</span> <span class="token function">Project</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span> c<span class="token punctuation">.</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">double</span> d <span class="token operator">=</span> <span class="token function">sqrt</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>r<span class="token operator">*</span>c<span class="token punctuation">.</span>r <span class="token operator">-</span> <span class="token function">norm</span><span class="token punctuation">(</span>x <span class="token operator">-</span> c<span class="token punctuation">.</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token function">abs</span><span class="token punctuation">(</span>x <span class="token operator">-</span> l<span class="token punctuation">.</span>p1<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> <span class="token function">make_pair</span><span class="token punctuation">(</span><span class="token punctuation">(</span>x <span class="token operator">-</span> l<span class="token punctuation">.</span>p1<span class="token punctuation">)</span><span class="token operator">*</span>d <span class="token operator">+</span> x<span class="token punctuation">,</span> <span class="token punctuation">(</span>x <span class="token operator">-</span> l<span class="token punctuation">.</span>p1<span class="token punctuation">)</span><span class="token operator">*</span><span class="token operator">-</span>d <span class="token operator">+</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">double</span> <span class="token function">arg</span><span class="token punctuation">(</span>Vector p<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token function">atan2</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>y<span class="token punctuation">,</span> p<span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
Vector <span class="token function">polar</span><span class="token punctuation">(</span><span class="token keyword">double</span> a<span class="token punctuation">,</span> <span class="token keyword">double</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token function">Point</span><span class="token punctuation">(</span><span class="token function">cos</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span> <span class="token operator">*</span> a<span class="token punctuation">,</span> <span class="token function">sin</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span> <span class="token operator">*</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

pair<span class="token operator">&lt;</span>Point<span class="token punctuation">,</span> Point<span class="token operator">&gt;</span> <span class="token function">getCrossPoints</span><span class="token punctuation">(</span>Circle c1<span class="token punctuation">,</span> Circle c2<span class="token punctuation">)</span> <span class="token comment">// 圆与圆之间的两个交点.</span>
<span class="token punctuation">{</span>
	<span class="token function">assert</span><span class="token punctuation">(</span><span class="token function">intersect</span><span class="token punctuation">(</span>c1<span class="token punctuation">,</span> c2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 断言两圆相交.</span>
	<span class="token keyword">double</span> d <span class="token operator">=</span> <span class="token function">abs</span><span class="token punctuation">(</span>c1<span class="token punctuation">.</span>c <span class="token operator">-</span> c2<span class="token punctuation">.</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">double</span> a <span class="token operator">=</span> <span class="token function">acos</span><span class="token punctuation">(</span><span class="token punctuation">(</span>d <span class="token operator">*</span> d <span class="token operator">+</span> c1<span class="token punctuation">.</span>r <span class="token operator">*</span> c1<span class="token punctuation">.</span>r <span class="token operator">-</span> c2<span class="token punctuation">.</span>r <span class="token operator">*</span> c2<span class="token punctuation">.</span>r<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token number">2.0</span> <span class="token operator">*</span> d <span class="token operator">*</span> c1<span class="token punctuation">.</span>r<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">double</span> t <span class="token operator">=</span> <span class="token function">arg</span><span class="token punctuation">(</span>c2<span class="token punctuation">.</span>c <span class="token operator">-</span> c1<span class="token punctuation">.</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> <span class="token function">make_pair</span><span class="token punctuation">(</span><span class="token function">polar</span><span class="token punctuation">(</span>c1<span class="token punctuation">.</span>r<span class="token punctuation">,</span> a <span class="token operator">+</span> t<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">polar</span><span class="token punctuation">(</span>c1<span class="token punctuation">.</span>r<span class="token punctuation">,</span> t <span class="token operator">-</span> a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">contains</span><span class="token punctuation">(</span>Polygon g<span class="token punctuation">,</span> Point p<span class="token punctuation">)</span> <span class="token comment">// 判断是否内包, ON 1; IN 2; OUT 0;</span>
<span class="token punctuation">{</span>
	<span class="token keyword">int</span> n <span class="token operator">=</span> g<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">bool</span> x <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		Point a <span class="token operator">=</span> g<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> p<span class="token punctuation">,</span> b <span class="token operator">=</span> g<span class="token punctuation">[</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">%</span>n<span class="token punctuation">]</span> <span class="token operator">-</span> p<span class="token punctuation">;</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">abs</span><span class="token punctuation">(</span><span class="token function">cross</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> EPS <span class="token operator">&amp;&amp;</span> <span class="token function">dot</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">&lt;</span> EPS<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">.</span>y <span class="token operator">&gt;</span> b<span class="token punctuation">.</span>y<span class="token punctuation">)</span> <span class="token function">swap</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">.</span>y <span class="token operator">&lt;</span> EPS <span class="token operator">&amp;&amp;</span> EPS <span class="token operator">&lt;</span> b<span class="token punctuation">.</span>y <span class="token operator">&amp;&amp;</span> <span class="token function">cross</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">&gt;</span> EPS<span class="token punctuation">)</span> x <span class="token operator">=</span> <span class="token operator">!</span>x<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> <span class="token punctuation">(</span>x <span class="token operator">?</span> <span class="token number">2</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">bool</span> <span class="token function">find</span><span class="token punctuation">(</span>Polygon s<span class="token punctuation">,</span> Point p<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span>size_t i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> p<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

Polygon <span class="token function">andrewScan</span><span class="token punctuation">(</span>Polygon g<span class="token punctuation">)</span> <span class="token comment">// 求凸包的安德鲁算法.</span>
<span class="token punctuation">{</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>g<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token keyword">return</span> g<span class="token punctuation">;</span> <span class="token comment">// 边界特殊情况</span>
	<span class="token function">sort</span><span class="token punctuation">(</span>g<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> g<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> n <span class="token operator">=</span> g<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	Polygon s<span class="token punctuation">;</span>
	s<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>g<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	Point one <span class="token operator">=</span> g<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
	s<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>g<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	Point two <span class="token operator">=</span> g<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">ccw</span><span class="token punctuation">(</span>one<span class="token punctuation">,</span> two<span class="token punctuation">,</span> g<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 当为逆时针时弹出</span>
			s<span class="token punctuation">.</span><span class="token function">pop_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		s<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>g<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		one <span class="token operator">=</span> s<span class="token punctuation">[</span>s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
		two <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	Polygon v<span class="token punctuation">;</span>
	v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>g<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span>size_t i <span class="token operator">=</span> g<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token operator">--</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">find</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> g<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			k <span class="token operator">=</span> i<span class="token punctuation">;</span>
			v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>g<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token keyword">break</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	one <span class="token operator">=</span> v<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
	two <span class="token operator">=</span> v<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> k <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token operator">--</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">ccw</span><span class="token punctuation">(</span>one<span class="token punctuation">,</span> two<span class="token punctuation">,</span> g<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 当为逆时针时</span>
			v<span class="token punctuation">.</span><span class="token function">pop_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>g<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		one <span class="token operator">=</span> v<span class="token punctuation">[</span>v<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
		two <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>v<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		s<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token function">reverse</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> s<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> s<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	Polygon p<span class="token punctuation">;</span>
	<span class="token keyword">int</span> n<span class="token punctuation">;</span>
	cin <span class="token operator">&gt;&gt;</span> n<span class="token punctuation">;</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">int</span> x<span class="token punctuation">,</span> y<span class="token punctuation">;</span>
		cin <span class="token operator">&gt;&gt;</span> x <span class="token operator">&gt;&gt;</span> y<span class="token punctuation">;</span>
		p<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token function">Point</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	Polygon a <span class="token operator">=</span> <span class="token function">andrewScan</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>
	cout <span class="token operator">&lt;&lt;</span> a<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>a<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		cout <span class="token operator">&lt;&lt;</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>x <span class="token operator">&lt;&lt;</span> <span class="token string">' '</span> <span class="token operator">&lt;&lt;</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>y <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">/*
7
2 1
0 0
1 2
2 2
4 2
1 3
3 3
*/</span>
</code></code></pre>

            </div>
						<link href="https://csdnimg.cn/release/phoenix/mdeditor/markdown_views-258a4616f7.css" rel="stylesheet">
                      </div>
	</article>