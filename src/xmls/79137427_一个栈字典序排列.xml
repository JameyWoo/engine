<article class="baidu_pl">
		<div id="article_content" class="article_content clearfix csdn-tracking-statistics" data-pid="blog"  data-mod=popu_307  data-dsm = "post" >
								<div class="article-copyright">
                  					<svg class="icon" title="CSDN认证原创" aria-hidden="true" style="width:53px; height: 18px; vertical-align: -4px;">
							<use xlink:href="#CSDN_Cert"></use>
					</svg>
                  					
					版权声明：看我干嘛? 你又没打算转载我的博客~					https://blog.csdn.net/wjh2622075127/article/details/79137427				</div>
								<link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/template/css/ck_htmledit_views-f57960eb32.css" />
        								            <div id="content_views" class="markdown_views prism-atom-one-light">
							<!-- flowchart 箭头图标 勿删 -->
							<svg xmlns="http://www.w3.org/2000/svg" style="display: none;"><path stroke-linecap="round" d="M5,0 0,2.5 5,5z" id="raphael-marker-block" style="-webkit-tap-highlight-color: rgba(0, 0, 0, 0);"></path></svg>
							<p>时隔这么久又重新学算法, 惭愧.</p>

<p>此题是牛客网一次比赛题, 拖了很久, 不过认真思考去做, 发现其实很简单. <br>
简单地画个图, 推导一下排序过程, 就OK了.</p>

<p>百度了一下, 发现关于栈排序的博客大都是双栈全排的, 大概那个要更复杂些. <br>
不多说</p>

<p><a href="https://www.nowcoder.com/acm/contest/58/B" rel="nofollow"><strong>栈和排序</strong></a></p>

<blockquote>
  <p>时间限制：C/C++ 1秒，其他语言2秒 空间限制：C/C++ 131072K，其他语言262144K 64bit IO Format: <br>
  %lld 题目描述 给你一个1-&gt;n的排列和一个栈，入栈顺序给定 你要在不打乱入栈顺序的情况下，对数组进行从大到小排序 <br>
  当无法完全排序时，请输出字典序最大的出栈序列 输入描述:</p>
  
  <p>第一行一个数n 第二行n个数，表示入栈的顺序，用空格隔开，结尾无空格</p>
  
  <p>输出描述:</p>
  
  <p>输出一行n个数表示答案，用空格隔开，结尾无空格</p>
  
  <p>示例1 输入</p>
  
  <p>5 2 1 5 3 4</p>
  
  <p>输出</p>
  
  <p>5 4 3 1 2</p>
  
  <p>说明</p>
  
  <p>2入栈；1入栈；5入栈；5出栈；3入栈；4入栈；4出栈；3出栈；1出栈；2出栈</p>
  
  <p>备注:</p>
  
  <p>对于100%的数据，有1&lt;=n&lt;=1000000，保证给的是一个排列</p>
</blockquote>

<p>代码: (40行)</p>

<pre class="prettyprint"><code class=" hljs cpp"><span class="hljs-preprocessor">#include &lt;iostream&gt;</span>
<span class="hljs-preprocessor">#include &lt;algorithm&gt;</span>
<span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;
<span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> INF = <span class="hljs-number">1e8</span>;

<span class="hljs-keyword">bool</span> cmp(<span class="hljs-keyword">int</span> a, <span class="hljs-keyword">int</span> b)
{
    <span class="hljs-keyword">return</span> a &gt; b;
}

<span class="hljs-keyword">int</span> main( )
{
    <span class="hljs-keyword">int</span> n;
    <span class="hljs-built_in">cin</span> &gt;&gt; n;
    <span class="hljs-keyword">int</span> *que = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span> [n];
    <span class="hljs-keyword">int</span> *que_2 = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span> [n];   <span class="hljs-comment">//a queue as a copy</span>
    <span class="hljs-keyword">int</span> *st = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span> [n];      <span class="hljs-comment">//the stack/the answer</span>
    <span class="hljs-keyword">for</span>( <span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; ++i ) {
        <span class="hljs-built_in">cin</span> &gt;&gt; que[i];
        que_2[i] = que[i];
    }
    sort(que_2, que_2 + n, cmp);    <span class="hljs-comment">//sort from big to small</span>
    <span class="hljs-keyword">int</span> start = <span class="hljs-number">0</span>, t = <span class="hljs-number">0</span>;
    <span class="hljs-keyword">for</span>( <span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; ++i ) {
        <span class="hljs-keyword">if</span>(que[i] == que_2[start]) {
            start++;
            st[t++] = que[i];
            que[i] = INF;
        }
    }
    <span class="hljs-keyword">for</span>( <span class="hljs-keyword">int</span> i = n-<span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; --i ) {
        <span class="hljs-keyword">if</span>( que[i] != INF ) {
            st[t++] = que[i];
        }
    }
    <span class="hljs-keyword">for</span>( <span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; t-<span class="hljs-number">1</span>; ++i ) {
        <span class="hljs-built_in">cout</span> &lt;&lt; st[i] &lt;&lt; <span class="hljs-string">' '</span>;
    }
    <span class="hljs-built_in">cout</span> &lt;&lt; st[t-<span class="hljs-number">1</span>];
}</code></pre>            </div>
						<link href="https://csdnimg.cn/release/phoenix/mdeditor/markdown_views-258a4616f7.css" rel="stylesheet">
                      </div>
	</article>