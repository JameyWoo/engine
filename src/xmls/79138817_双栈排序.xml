<article class="baidu_pl">
		<div id="article_content" class="article_content clearfix csdn-tracking-statistics" data-pid="blog"  data-mod=popu_307  data-dsm = "post" >
								<div class="article-copyright">
                  					<svg class="icon" title="CSDN认证原创" aria-hidden="true" style="width:53px; height: 18px; vertical-align: -4px;">
							<use xlink:href="#CSDN_Cert"></use>
					</svg>
                  					
					版权声明：看我干嘛? 你又没打算转载我的博客~					https://blog.csdn.net/wjh2622075127/article/details/79138817				</div>
								<link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/template/css/ck_htmledit_views-f57960eb32.css" />
        								            <div id="content_views" class="markdown_views prism-atom-one-light">
							<!-- flowchart 箭头图标 勿删 -->
							<svg xmlns="http://www.w3.org/2000/svg" style="display: none;"><path stroke-linecap="round" d="M5,0 0,2.5 5,5z" id="raphael-marker-block" style="-webkit-tap-highlight-color: rgba(0, 0, 0, 0);"></path></svg>
							<p>此篇博客要讲的是<strong>双栈排序</strong>, 即已知一个不规则栈的元素, 利用另一个空栈, 进行排序.</p>

<p>我<a href="http://blog.csdn.net/wjh2622075127/article/details/79137427" rel="nofollow">上一篇博客</a>讨论了只用一个栈进行排序的情况, 因为栈这种数据结构的先入后出的特性, 只用一个栈很有可能无法全部排序, 只能获得<strong><em>字典序最大的排列</em></strong>. 而使用两个栈, 则可以<strong><em>全部排列</em></strong>.</p>

<p>如何利用两个栈排列呢?此处讨论从栈顶到栈底的升序排列(对stack2).</p>

<p>首先从stack1中取出一个元素temp, 然后从顶开始把stack2中小于该元素的元素压入stack1中, 遇到第一个不符合条件的即停止; 用while. 然后把temp压入stack2中, 再把之前压入stack1中的元素压回stack2中. 每次处理一个栈顶元素, 所以每次循环之后, stack的元素都是排列好的, 且为升序. 因此对stack1来说, 是降序(如果把排列好的stack2压入stack1中).</p>

<p><strong>没有使用STL的代码</strong>:</p>

<pre class="prettyprint"><code class=" hljs cpp"><span class="hljs-preprocessor">#include &lt;iostream&gt;</span>
<span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;

<span class="hljs-keyword">int</span> main( )
{
    <span class="hljs-keyword">int</span> n;
    <span class="hljs-built_in">cin</span> &gt;&gt; n;
    <span class="hljs-keyword">int</span> *s1 = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span> [n];
    <span class="hljs-keyword">int</span> *s2 = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span> [n];
    <span class="hljs-keyword">for</span>( <span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; ++i ) {
        <span class="hljs-built_in">cin</span> &gt;&gt; s1[i];
    }
    <span class="hljs-keyword">int</span> top1 = n-<span class="hljs-number">1</span>;
    <span class="hljs-keyword">int</span> top2 = -<span class="hljs-number">1</span>;
    <span class="hljs-keyword">while</span>( top1 &gt;= <span class="hljs-number">0</span> ) {
        <span class="hljs-keyword">int</span> tmp = s1[top1];
        top1--;
        <span class="hljs-keyword">while</span>(s2[top2] &lt; tmp &amp;&amp; top2 &gt;= <span class="hljs-number">0</span>) {
            top1++;
            s1[top1] = s2[top2];
            top2--;
        }
        top2++;
        s2[top2] = tmp;
        <span class="hljs-keyword">while</span>(s1[top1] &lt;= s2[top2] &amp;&amp; top1 &gt;= <span class="hljs-number">0</span>) {
            top2++;
            s2[top2] = s1[top1];
            top1--;
        }
    }
    <span class="hljs-keyword">for</span>( <span class="hljs-keyword">int</span> i = top2; i &gt;= <span class="hljs-number">0</span>; --i ) {
        <span class="hljs-built_in">cout</span> &lt;&lt; s2[i] &lt;&lt; <span class="hljs-string">' '</span>;
    }
}</code></pre>

<p><strong>使用STL的代码</strong></p>

<pre class="prettyprint"><code class=" hljs cpp"><span class="hljs-preprocessor">#include &lt;iostream&gt;</span>
<span class="hljs-preprocessor">#include &lt;stack&gt;</span>
<span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;

<span class="hljs-keyword">int</span> main( )
{
    <span class="hljs-stl_container"><span class="hljs-built_in">stack</span> &lt;<span class="hljs-keyword">int</span>&gt;</span> s1, s2;
    <span class="hljs-keyword">int</span> n, tmp;
    <span class="hljs-built_in">cin</span> &gt;&gt; n;
    <span class="hljs-keyword">for</span>( <span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; ++i ) {
        <span class="hljs-built_in">cin</span> &gt;&gt; tmp;
        s1.push(tmp);
    }
    <span class="hljs-keyword">while</span>( !s1.empty() ) {
        <span class="hljs-keyword">int</span> temp = s1.top();
        s1.pop();
        <span class="hljs-keyword">while</span>( !s2.empty() &amp;&amp; s2.top() &lt; temp ) {
            s1.push(s2.top());
            s2.pop();
        }
        s2.push(temp);
        <span class="hljs-keyword">while</span>( !s1.empty() &amp;&amp; s1.top() &lt;= s2.top() ) {
            s2.push(s1.top());
            s1.pop();
        }
    }
    <span class="hljs-keyword">while</span>( !s2.empty() ) {
        <span class="hljs-built_in">cout</span> &lt;&lt; s2.top() &lt;&lt; <span class="hljs-string">' '</span>;
        s2.pop();
    }
}</code></pre>            </div>
						<link href="https://csdnimg.cn/release/phoenix/mdeditor/markdown_views-258a4616f7.css" rel="stylesheet">
                      </div>
	</article>