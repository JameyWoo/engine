<article class="baidu_pl">
		<div id="article_content" class="article_content clearfix csdn-tracking-statistics" data-pid="blog"  data-mod=popu_307  data-dsm = "post" >
								<div class="article-copyright">
                  					<svg class="icon" title="CSDN认证原创" aria-hidden="true" style="width:53px; height: 18px; vertical-align: -4px;">
							<use xlink:href="#CSDN_Cert"></use>
					</svg>
                  					
					版权声明：看我干嘛? 你又没打算转载我的博客~					https://blog.csdn.net/wjh2622075127/article/details/88363569				</div>
								<link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/template/css/ck_htmledit_views-f57960eb32.css" />
        								            <div id="content_views" class="markdown_views prism-atom-one-light">
							<!-- flowchart 箭头图标 勿删 -->
							<svg xmlns="http://www.w3.org/2000/svg" style="display: none;"><path stroke-linecap="round" d="M5,0 0,2.5 5,5z" id="raphael-marker-block" style="-webkit-tap-highlight-color: rgba(0, 0, 0, 0);"></path></svg>
							<h4><a id="1gdb_0"></a>1、在gdb中如何列出汇编代码</h4>
<p>应该是不可以用list 命令列出汇编代码的。<br>
但可以使用<code>display /i $pc</code> 命令在调试的时候出了列出一行源码，也列出相应的汇编代码<br>
同时，s和si等的区别还是比较大的：si按汇编一行一行执行，有的源码一行会有很多条汇编；<br>
我认为这是个学习汇编的好方法：<strong>使用gdb一步一步调试，对比汇编和源码</strong></p>
<h4><a id="2o_6"></a>2、如何将一个可执行文件或者是.o文件得到它的汇编码或者是源码？</h4>
<p>可以使用<code>objdump -d test.out</code> 获取汇编代码（右侧）以及机器码（左侧）；要查看但里面有很多除我写的东西之外的东西，要具体定位到自己写的东西，可根据函数名查看。</p>
<p>如果编译时<strong>使用了-g参数</strong>的话，使用<code>objdump -dS test</code> 就可以得到机器码，源码，汇编码一一对应了！但如果没用-g的话，可执行文件是没有源码信息的，这时需要通过特殊手段得到。<br>
<img src="https://img-blog.csdnimg.cn/20190309105839500.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dqaDI2MjIwNzUxMjc=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h4><a id="3co_11"></a>3、将c源码变成.o文件，会不会很干净，和变成可执行文件的区别？体量？</h4>
<p>编译过程图，来源：<a href="https://blog.csdn.net/misskissC/article/details/38020151" rel="nofollow">https://blog.csdn.net/misskissC/article/details/38020151</a><br>
<img src="https://img-blog.csdnimg.cn/20190309110351592.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dqaDI2MjIwNzUxMjc=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>
和期待的相符，没有目标文件的链接过程，.o 文件果然很干净，使用-d命令查看的话，可以只看我自己写的代码部分！但是没有 -g 的话没有源码。<br>
<img src="https://img-blog.csdnimg.cn/20190309110531523.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dqaDI2MjIwNzUxMjc=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>
同样和期待的相符，加了-g之后，成功出现源码<br>
<img src="https://img-blog.csdnimg.cn/2019030911110068.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dqaDI2MjIwNzUxMjc=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h4><a id="4cs_18"></a>4、c代码变成.s文件，如何精确捕捉到我写的函数的内容？</h4>
<p>额，我发现.s 文件还是非常干净的，没有什么特别多的其他文件，想要找哪个函数，前面都有名字的。 尝试是由-g会有什么区别码？<br>
<img src="https://img-blog.csdnimg.cn/20190309111542403.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dqaDI2MjIwNzUxMjc=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>
加了-g 参数后，生成的.s 文件果然多了很多不认识的东西，仔细找了下后，发现并没有看到源码的字符串，可能是以某种特殊的方式编码了？如图是对比，左侧是加了 -g的，而右侧是没有加的。<br>
<img src="https://img-blog.csdnimg.cn/20190309112215141.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dqaDI2MjIwNzUxMjc=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>
我们来验证以下，这个加了-g的.s文件，是否真的是包含了我源码的信息？</p>
<p>验证通过，确实有，哈哈<br>
<img src="https://img-blog.csdnimg.cn/2019030911232783.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dqaDI2MjIwNzUxMjc=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h4><a id="5_27"></a>5、各种情况的编译失败是在编译的过程是哪一步？</h4>
<p>在编译c语言的时候，通常是一步全编译，我们来尝试分部编译，探究不同错误的编译失败地点。<br>
1、如果我只是写一个函数而没有main函数，可以进行到哪一步？<br>
<img src="https://img-blog.csdnimg.cn/20190309112635645.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dqaDI2MjIwNzUxMjc=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>
编译成汇编代码居然就报错了！预处理的话还是可以的<br>
<img src="https://img-blog.csdnimg.cn/20190309112754648.png" alt="在这里插入图片描述"></p>
<p>2、不小心没写分号 ;<br>
<img src="https://img-blog.csdnimg.cn/20190309113032748.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dqaDI2MjIwNzUxMjc=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>
额，看来还是这个源码变成汇编的过程过程<br>
<img src="https://img-blog.csdnimg.cn/20190309113153775.png" alt="在这里插入图片描述"><br>
我突然想到，整个编译的大过程分为<code>预处理-&gt;编译-&gt;汇编-&gt;链接</code>，那么可能语法问题之类的都是在<code>编译</code>这个小过程被发现的吧。</p>
<h4><a id="6list_39"></a>6、list命令用法</h4>
<p>默认显示10行，可使用<code>list 1,1000</code> 来获取更多行的代码<br>
使用<code>list +/-</code> 用以继续，和查看更前的源码<br>
<code>set listsize 20</code> 设置显示行数<br>
<code>show listsize</code> 查看显示行数</p>
<h4><a id="7d_b_45"></a>7、删除断点：<code>d b</code></h4>
<p>查看断点：<br>
<code>info b</code><br>
<code>info watch</code></p>
<hr>
<p>查表:）</p>
<div class="table-box"><table>
	<thead>
		<tr>
			<th align="center">
				常用命令</th>
			<th align="center">
				简写命令</th>
			<th align="center">
				用法</th>
			<th align="center">
				说明</th>
		</tr>
	</thead>
	<tbody>
		<tr>
			<td align="center">
				file</td>
			<td align="center">
				f</td>
			<td align="center">
				file filename</td>
			<td align="center">
				在gdb中载入某可执行文件</td>
		</tr>
		<tr>
			<td align="center">
				list</td>
			<td align="center">
				l</td>
			<td align="center">
				list [开始，结束]</td>
			<td align="center">
				列出文件的代码清单，支持指定行号</td>
		</tr>
		<tr>
			<td align="center">
				print</td>
			<td align="center">
				p</td>
			<td align="center">
				p 变量名</td>
			<td align="center">
				答应出变量的值</td>
		</tr>
		<tr>
			<td align="center">
				break</td>
			<td align="center">
				b</td>
			<td align="center">
				break 行号or函数名</td>
			<td align="center">
				在指定行号或函数上设置断点</td>
		</tr>
		<tr>
			<td align="center">
				clear</td>
			<td align="center">
				cl</td>
			<td align="center">
				clear 行号or函数名</td>
			<td align="center">
				删除指定行号或函数上的断点</td>
		</tr>
		<tr>
			<td align="center">
				continue</td>
			<td align="center">
				c</td>
			<td align="center">
				continue [开始，结束]</td>
			<td align="center">
				从断点处继续运行</td>
		</tr>
		<tr>
			<td align="center">
				next</td>
			<td align="center">
				n</td>
			<td align="center">
				next</td>
			<td align="center">
				运行到下一行</td>
		</tr>
		<tr>
			<td align="center">
				step</td>
			<td align="center">
				s</td>
			<td align="center">
				step</td>
			<td align="center">
				单步调试</td>
		</tr>
		<tr>
			<td align="center">
				run</td>
			<td align="center">
				r</td>
			<td align="center">
				run</td>
			<td align="center">
				执行程序</td>
		</tr>
	</tbody>
</table></div>

            </div>
						<link href="https://csdnimg.cn/release/phoenix/mdeditor/markdown_views-258a4616f7.css" rel="stylesheet">
                      </div>
	</article>