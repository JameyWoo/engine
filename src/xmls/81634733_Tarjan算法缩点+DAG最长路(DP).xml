<article class="baidu_pl">
		<div id="article_content" class="article_content clearfix csdn-tracking-statistics" data-pid="blog"  data-mod=popu_307  data-dsm = "post" >
								<div class="article-copyright">
                  					
					版权声明：看我干嘛? 你又没打算转载我的博客~					https://blog.csdn.net/wjh2622075127/article/details/81634733				</div>
								<link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/template/css/ck_htmledit_views-f57960eb32.css" />
        								            <div id="content_views" class="markdown_views prism-atom-one-light">
							<!-- flowchart 箭头图标 勿删 -->
							<svg xmlns="http://www.w3.org/2000/svg" style="display: none;"><path stroke-linecap="round" d="M5,0 0,2.5 5,5z" id="raphael-marker-block" style="-webkit-tap-highlight-color: rgba(0, 0, 0, 0);"></path></svg>
							<p><div class="toc"><div class="toc">
<ul>
<li><ul>
<li><a href="#第一个问题-tarjan算法找出一个图里面的全部强连通分量包括单独的点" rel="nofollow">第一个问题: Tarjan算法找出一个图里面的全部强连通分量(包括单独的点).</a></li>
<li><a href="#第二个问题-对每个强连通分量进行缩点-使得此图变成一张dag" rel="nofollow">第二个问题: 对每个强连通分量进行缩点, 使得此图变成一张DAG.</a></li>
<li><a href="#第三个问题-如何快速获得新图各个结点的入度出度" rel="nofollow">第三个问题: 如何快速获得新图各个结点的入度出度.</a></li>
<li><a href="#第四个问题-缩点之后求解dag最长路" rel="nofollow">第四个问题: 缩点之后求解DAG最长路</a></li>
</ul>
</li>
</ul>
</div>
</div>
</p>

<p>我们按照复杂程度来讨论不同的Tarjan算法变形的差异.</p>

<h2 id="第一个问题-tarjan算法找出一个图里面的全部强连通分量包括单独的点">第一个问题: Tarjan算法找出一个图里面的全部强连通分量(包括单独的点).</h2>

<p>但此时只是有所区分的将所有的点划分为一个个的强连通分量, 尚且没有缩点. 上面这个功能实现起来最简单. </p>

<p>它的Tarjan函数内部是这样的.</p>

<pre class="prettyprint"><code class=" hljs cpp"><span class="hljs-keyword">void</span> tarjan(<span class="hljs-keyword">int</span> u)
{
    dfn[u] = low[u] = ++index;
    <span class="hljs-built_in">stack</span>[++top] = u;
    in_stack[u] = <span class="hljs-keyword">true</span>;
    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; G[u].size(); ++i) {
        <span class="hljs-keyword">int</span> v = G[u][i];
        <span class="hljs-keyword">if</span> (!dfn[v]) { <span class="hljs-comment">// 更新新的点.</span>
            tarjan(v);
            low[u] = min(low[u], low[v]);
        } <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (in_stack[v]) {
            low[u] = min(low[u], low[v]);
        } <span class="hljs-comment">// 还剩下一种不在栈中但是已经访问过的情况,是其他连通分量的</span>
    }
    <span class="hljs-keyword">if</span> (dfn[u] == low[u]) {
        <span class="hljs-keyword">do</span> {
            <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-built_in">stack</span>[top] &lt;&lt; <span class="hljs-string">' '</span>;
            in_stack[<span class="hljs-built_in">stack</span>[top]] = <span class="hljs-keyword">false</span>; <span class="hljs-comment">// 漏写了这一条.</span>
        } <span class="hljs-keyword">while</span> (<span class="hljs-built_in">stack</span>[--top + <span class="hljs-number">1</span>] != u);
        <span class="hljs-built_in">cout</span> &lt;&lt; endl;
    }
}</code></pre>



<h2 id="第二个问题-对每个强连通分量进行缩点-使得此图变成一张dag">第二个问题: 对每个强连通分量进行缩点, 使得此图变成一张DAG.</h2>

<p>在Tarjan函数内部他们的主要区别是当<code>dfn[u] == low[u]</code>的这一段</p>

<pre class="prettyprint"><code class=" hljs vbscript"><span class="hljs-keyword">if</span> (dfn[u] == low[u]) {
        cnt++;
        <span class="hljs-built_in">int</span> <span class="hljs-built_in">now</span>;
        <span class="hljs-keyword">do</span> {
            <span class="hljs-built_in">now</span> = sta.top();
            sta.pop();
            in_stack[<span class="hljs-built_in">now</span>] = <span class="hljs-literal">false</span>;
            <span class="hljs-keyword">to</span>[<span class="hljs-built_in">now</span>] = cnt;
        } <span class="hljs-keyword">while</span> (<span class="hljs-built_in">now</span> != u);
    }</code></pre>

<ul>
<li><p><strong>增加了一个全局变量<code>cnt</code>, 表示当前缩点的编号.</strong></p></li>
<li><p><strong>增加了一个<code>to</code>数组, 用来表示原来的点在缩点之后是哪个点.</strong></p></li>
</ul>

<p>所以我们可以有下面这段代码, <strong><code>set&lt;int&gt; Now</code>代表缩点后的新图.</strong></p>

<pre class="prettyprint"><code class=" hljs vbscript"><span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) {
        <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> j = <span class="hljs-number">0</span>; j &lt; G[i].size(); ++j) {
            <span class="hljs-built_in">int</span> u = <span class="hljs-keyword">to</span>[i], v = <span class="hljs-keyword">to</span>[G[i][j]];
            <span class="hljs-keyword">if</span> (u != v) <span class="hljs-built_in">Now</span>[u].insert(v);
        }
    }</code></pre>

<p><strong>通过<code>to</code>数组关联起原图和缩点后图的点, 从而建立新图.</strong></p>

<p>这样, 通过<code>dfn[u] == low[u]</code>处的修改, 以及结合<code>to</code>数组建立新图的过程, 就实现了Tarjan算法的缩点.</p>



<h2 id="第三个问题-如何快速获得新图各个结点的入度出度">第三个问题: 如何快速获得新图各个结点的入度出度.</h2>

<p>上面的<code>to</code>数组保留, 看下面这段代码</p>

<pre class="prettyprint"><code class=" hljs ocaml"><span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) {
        <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> j = <span class="hljs-number">0</span>; j &lt; G[i].size(); ++j) {
            <span class="hljs-keyword">if</span> (<span class="hljs-keyword">to</span>[i] != <span class="hljs-keyword">to</span>[G[i][j]]) {
                out[<span class="hljs-keyword">to</span>[i]]++;
                <span class="hljs-keyword">in</span>[<span class="hljs-keyword">to</span>[G[i][j]]]++;
            }
        }
    }</code></pre>

<p>一二层循环遍历之前所有的边, 里面一个条件语句, <strong>判断边的两端点是否指向同一个缩点, 如果不是, 那么他们在<code>to</code>数组中所指向的新的结点也将作为一条边</strong>. <strong>利用<code>to</code>数组可以快速方便的获取新图中的入度和出度, 这样的话要知道入度和出度就无需建立新图.</strong></p>



<h2 id="第四个问题-缩点之后求解dag最长路">第四个问题: 缩点之后求解DAG最长路</h2>

<p>看洛谷上的这道题 <a href="https://www.luogu.org/problemnew/show/P3387" rel="nofollow">传送门</a></p>

<p>此题是以点为权值而非边, 但做法是基本差不多的. 都是DP算法.</p>

<p>DP函数是这样</p>

<pre class="prettyprint"><code class=" hljs cpp"><span class="hljs-keyword">int</span> DP(<span class="hljs-keyword">int</span> u)
{
    <span class="hljs-keyword">if</span> (dp[u]) <span class="hljs-keyword">return</span> dp[u];
    <span class="hljs-stl_container"><span class="hljs-built_in">set</span>&lt;<span class="hljs-keyword">int</span>&gt;</span>::iterator is = Now[u].begin();
    <span class="hljs-keyword">while</span> (is != Now[u].end()) {
        dp[u] = max(dp[u], DP(*is));
        is++;
    }
    dp[u] += val_now[u];
    <span class="hljs-keyword">return</span> dp[u];
}</code></pre>

<p><strong>状态转移方程: <code>dp[i] = max{dp[j] | (i, j) ∈E} + val_now[i]</code></strong> <br>
<strong>区别于边为权值的方程:<code>dp[i] = max{dp[j]+length[i→j] | (i,j)∈E}</code></strong></p>

<p>AC代码</p>

<pre class="prettyprint"><code class=" hljs cpp"><span class="hljs-preprocessor">#include &lt;algorithm&gt;</span>
<span class="hljs-preprocessor">#include &lt;iostream&gt;</span>
<span class="hljs-preprocessor">#include &lt;vector&gt;</span>
<span class="hljs-preprocessor">#include &lt;stack&gt;</span>
<span class="hljs-preprocessor">#include &lt;set&gt;</span>
<span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;

<span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn = <span class="hljs-number">10005</span>;
<span class="hljs-stl_container"><span class="hljs-built_in">stack</span>&lt;<span class="hljs-keyword">int</span>&gt;</span> sta;
<span class="hljs-stl_container"><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;</span> G[maxn];
<span class="hljs-stl_container"><span class="hljs-built_in">set</span>&lt;<span class="hljs-keyword">int</span>&gt;</span> Now[maxn];
<span class="hljs-keyword">int</span> n, m, index = <span class="hljs-number">0</span>, cnt = <span class="hljs-number">0</span>, ans = <span class="hljs-number">0</span>;
<span class="hljs-keyword">int</span> to[maxn], dfn[maxn] = {}, low[maxn];
<span class="hljs-keyword">int</span> dp[maxn] = {}, val[maxn], val_now[maxn] = {};
<span class="hljs-keyword">bool</span> in_stack[maxn] = {};

<span class="hljs-keyword">void</span> tarjan(<span class="hljs-keyword">int</span> u)
{
    dfn[u] = low[u] = ++index;
    in_stack[u] = <span class="hljs-keyword">true</span>;
    sta.push(u);
    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; G[u].size(); ++i) {
        <span class="hljs-keyword">int</span> v = G[u][i];
        <span class="hljs-keyword">if</span> (dfn[v] == <span class="hljs-number">0</span>) {
            tarjan(v);
            low[u] = min(low[u], low[v]);
        } <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (in_stack[v]) low[u] = min(low[u], low[v]);
    }
    <span class="hljs-keyword">if</span> (dfn[u] == low[u]) {
        cnt++;
        <span class="hljs-keyword">int</span> now;
        <span class="hljs-keyword">do</span> {
            now = sta.top();
            sta.pop();
            in_stack[now] = <span class="hljs-keyword">false</span>;
            to[now] = cnt;
        } <span class="hljs-keyword">while</span> (now != u);
    }
}

<span class="hljs-keyword">int</span> DP(<span class="hljs-keyword">int</span> u)
{
    <span class="hljs-keyword">if</span> (dp[u]) <span class="hljs-keyword">return</span> dp[u];
    <span class="hljs-stl_container"><span class="hljs-built_in">set</span>&lt;<span class="hljs-keyword">int</span>&gt;</span>::iterator is = Now[u].begin();
    <span class="hljs-keyword">while</span> (is != Now[u].end()) {
        dp[u] = max(dp[u], DP(*is));
        is++;
    }
    dp[u] += val_now[u];
    <span class="hljs-keyword">return</span> dp[u];
}

<span class="hljs-keyword">int</span> main()
{
    <span class="hljs-built_in">cin</span> &gt;&gt; n &gt;&gt; m;
    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)
        <span class="hljs-built_in">cin</span> &gt;&gt; val[i];
    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; m; ++i) {
        <span class="hljs-keyword">int</span> u, v;
        <span class="hljs-built_in">cin</span> &gt;&gt; u &gt;&gt; v;
        G[u].push_back(v);
    }
    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)
        <span class="hljs-keyword">if</span> (dfn[i] == <span class="hljs-number">0</span>) tarjan(i);
    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) {
        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; G[i].size(); ++j) {
            <span class="hljs-keyword">int</span> u = to[i], v = to[G[i][j]];
            <span class="hljs-keyword">if</span> (u != v) Now[u].insert(v);
        }
    }
    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) {
        <span class="hljs-keyword">int</span> t = to[i];
        val_now[t] += val[i];
    }
    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= cnt; ++i)
        ans = max(ans, dp[i] = DP(i));
    <span class="hljs-built_in">cout</span> &lt;&lt; ans;
}</code></pre>

<p><strong>我认为Tarjan算法缩点的核心就是<code>to</code>数组. </strong></p>            </div>
						<link href="https://csdnimg.cn/release/phoenix/mdeditor/markdown_views-258a4616f7.css" rel="stylesheet">
                      </div>
	</article>