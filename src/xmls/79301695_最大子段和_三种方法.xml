<article class="baidu_pl">
		<div id="article_content" class="article_content clearfix csdn-tracking-statistics" data-pid="blog"  data-mod=popu_307  data-dsm = "post" >
								<div class="article-copyright">
                  					<svg class="icon" title="CSDN认证原创" aria-hidden="true" style="width:53px; height: 18px; vertical-align: -4px;">
							<use xlink:href="#CSDN_Cert"></use>
					</svg>
                  					
					版权声明：看我干嘛? 你又没打算转载我的博客~					https://blog.csdn.net/wjh2622075127/article/details/79301695				</div>
								<link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/template/css/ck_htmledit_views-f57960eb32.css" />
        								            <div id="content_views" class="markdown_views prism-atom-one-light">
							<!-- flowchart 箭头图标 勿删 -->
							<svg xmlns="http://www.w3.org/2000/svg" style="display: none;"><path stroke-linecap="round" d="M5,0 0,2.5 5,5z" id="raphael-marker-block" style="-webkit-tap-highlight-color: rgba(0, 0, 0, 0);"></path></svg>
							<p>今天参加了一场洛谷网的比赛, 深受打击. 寒假过了这么多天, 一直没有认真学习算法, 以至于现在的水平比两个月前还要低. </p>

<p>本来就没有多少底子, 又退步了许多, 感慨万分.</p>

<p>在洛谷上看到这么一道题 <br>
<a href="https://www.luogu.org/problemnew/show/P1115" rel="nofollow">最大子段和</a></p>

<p>如果数据小的话, <strong>用暴力枚举</strong>很简单就可以做出来了, 时间按复杂度位O(n^3) <br>
可是一道算法题怎么会这么简单呢?</p>

<p>样例的数据是非常大的, 所以用n^3的办法一个样例都过不了</p>



<pre class="prettyprint"><code class=" hljs cpp"><span class="hljs-preprocessor">#include &lt;iostream&gt;</span>
<span class="hljs-preprocessor">#include &lt;algorithm&gt; </span>

<span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;

<span class="hljs-keyword">int</span> main()
{
    <span class="hljs-comment">//std::ios::sync_with_stdio(false);</span>
    <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">int</span> n, num[<span class="hljs-number">22000</span>], Max = -<span class="hljs-number">1e8</span>, sum;
    <span class="hljs-built_in">cin</span> &gt;&gt; n;
    <span class="hljs-keyword">for</span>( <span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i ) {
        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%lld"</span>, &amp;num[i]);
    }
    <span class="hljs-keyword">for</span>( <span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++ i ) {
        <span class="hljs-keyword">for</span>( <span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= n - i + <span class="hljs-number">1</span>; ++j ) {
            sum = <span class="hljs-number">0</span>;
            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> k = j; k &lt; j + i; ++k) {
                sum += num[k];
            }
            <span class="hljs-comment">//cout &lt;&lt; "sum = " &lt;&lt; sum &lt;&lt; endl;</span>
            Max = max(Max, sum);
            <span class="hljs-comment">//cout &lt;&lt; Max &lt;&lt; endl;</span>
        }
    }
    <span class="hljs-built_in">cout</span> &lt;&lt; Max;
}</code></pre>

<p>稍微优化一下, 使用<strong>前缀和以及差分</strong>, 可以有效地将复杂度降为O(n^2), 可是, 对于这道题来说, 这个时间还是太多了. 只能通过40%的样例</p>



<pre class="prettyprint"><code class=" hljs cpp"><span class="hljs-preprocessor">#include &lt;iostream&gt;</span>
<span class="hljs-preprocessor">#include &lt;cstdio&gt;</span>
<span class="hljs-preprocessor">#include &lt;algorithm&gt;</span>

<span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">int</span> n, num[<span class="hljs-number">220000</span>], qz[<span class="hljs-number">220000</span>] = {}, ans = -<span class="hljs-number">1e9</span>;

<span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;

<span class="hljs-keyword">int</span> main()
{
    <span class="hljs-comment">//std::ios::sync_with_stdio(false);</span>
    <span class="hljs-built_in">cin</span> &gt;&gt; n;
    <span class="hljs-keyword">for</span>( <span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++ i ) {
        <span class="hljs-comment">//cin &gt;&gt; num[i];</span>
        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%lld"</span>, &amp;num[i]);
    }
    <span class="hljs-keyword">for</span>( <span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i ) {
        qz[i] = qz[i-<span class="hljs-number">1</span>] + num[i];
    }
    <span class="hljs-keyword">for</span>( <span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i ) {
        <span class="hljs-keyword">for</span>( <span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= n-i+<span class="hljs-number">1</span>; ++j ) {
            ans = max(ans, qz[j+i-<span class="hljs-number">1</span>] - qz[j-<span class="hljs-number">1</span>]);
        }
    }
    <span class="hljs-built_in">cout</span> &lt;&lt; ans &lt;&lt; endl;
}</code></pre>

<p>还有一种<strong>分治</strong>的方法做这道题, 时间复杂度为O(nlogn), 有点复杂,我还不会.</p>

<p>最简单的呢, <strong>使用DP的方法, 时间复杂度为O(n)</strong></p>

<p>这种方法凭我自己现在的水平是想不出来的, 尤其是现在状态如此之差. 看别人解释后写了代码觉得如此巧妙, 于是又惊叹算法之神奇</p>

<p>可怜的是, 即便别人告诉我这道题用DP解最简单, 我也解不出来, 谁叫我DP还没入门呢?</p>

<p>思路描述是这样的:</p>

<blockquote>
  <p>a数组是储存输入的数值；c[i]表示的是a数组从头加到i的和；b[i]表示的是从头到i包括i的的最大子段和~（必须包括i！！！）；minn储存最小的前缀和（因为要减去所以要尽量小，详情见下一行） 动态转移方程式：b[i]=c[i]-minn（总和减去前缀和） 最后输出b数组最大的值（题目求最大的子段和）</p>
</blockquote>

<p>第一阶段的代码是这样的</p>



<pre class="prettyprint"><code class=" hljs cpp"><span class="hljs-preprocessor">#include &lt;iostream&gt;</span>
<span class="hljs-preprocessor">#include &lt;cstdio&gt;</span>
<span class="hljs-preprocessor">#include &lt;algorithm&gt;</span>

<span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;

<span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">int</span> qz[<span class="hljs-number">220000</span>] = {}, num[<span class="hljs-number">220000</span>], mm[<span class="hljs-number">220000</span>] = {}, an[<span class="hljs-number">220000</span>], ans = -<span class="hljs-number">1e9</span>;

<span class="hljs-keyword">int</span> main()
{
    <span class="hljs-keyword">int</span> n;
    <span class="hljs-built_in">cin</span> &gt;&gt; n;
    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) {
        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%lld"</span>, &amp;num[i]);
        qz[i] = num[i] + qz[i - <span class="hljs-number">1</span>];
        mm[i] = min(mm[i - <span class="hljs-number">1</span>], qz[i - <span class="hljs-number">1</span>]);
        ans = max(ans, qz[i] - mm[i]);
    }
    <span class="hljs-built_in">cout</span> &lt;&lt; ans;
}</code></pre>

<p>时间复杂度确实是小, 但是有一个问题就是空间复杂度太大了, 没必要这样开数组.</p>

<p>看了别人的题解, dalao们用的是滚动数组, 一个上面220000的数组只用两个元素循环滚动即可.</p>

<p>叹服!</p>

<p>妙哉!</p>



<pre class="prettyprint"><code class=" hljs cpp"><span class="hljs-preprocessor">#include &lt;iostream&gt;</span>
<span class="hljs-preprocessor">#include &lt;cstdio&gt;</span>
<span class="hljs-preprocessor">#include &lt;algorithm&gt;</span>

<span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;

<span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">int</span> qz[<span class="hljs-number">2</span>] = {}, mm[<span class="hljs-number">2</span>] = {}, ans = -<span class="hljs-number">1e9</span>, m, n;

<span class="hljs-keyword">int</span> main()
{
    <span class="hljs-built_in">cin</span> &gt;&gt; n;
    <span class="hljs-keyword">for</span>( <span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i ) {
        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%lld"</span>, &amp;m);
        qz[i % <span class="hljs-number">2</span>] = qz[(i + <span class="hljs-number">1</span>) % <span class="hljs-number">2</span>] + m;
        mm[i % <span class="hljs-number">2</span>] = min(mm[(i + <span class="hljs-number">1</span>) % <span class="hljs-number">2</span>], qz[(i + <span class="hljs-number">1</span>) % <span class="hljs-number">2</span>]);
        ans = max(ans, qz[i % <span class="hljs-number">2</span>] - mm[i % <span class="hljs-number">2</span>]);
    }
    <span class="hljs-built_in">cout</span> &lt;&lt; ans;
}</code></pre>

<p>写这道题还发现了或者说学到了或者说巩固了几个小知识</p>

<p>1) 取消cin的同步用这样的代码</p>



<pre class="prettyprint"><code class=" hljs ruby"><span class="hljs-symbol">std:</span><span class="hljs-symbol">:ios</span><span class="hljs-symbol">:</span><span class="hljs-symbol">:sync_with_stdio</span>(<span class="hljs-keyword">false</span>);</code></pre>

<p>此为巩固</p>

<p>2) 使用scanf输入C++ 中long long 型的数 <br>
是这样的</p>



<pre class="prettyprint"><code class=" hljs cpp"><span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">int</span> n;
<span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%lld"</span>, &amp;n);</code></pre>

<p>如果n的类型写为long long Dev会发出警告, 还不知道为什么</p>

<p>百度一下, 又网友说long long 就是long long int , 只是int省略掉了</p>

<p>3) 使用scanf要包含头文件cstdio</p>

<p>以前我是不包含的, 不过这次在洛谷上提交出现了编译错误, 这也算是发现了自己的一个小bug吧</p>

<p><strong><em><strong>___________2018-7-9补充更新___________</strong></em></strong></p>

<p>今天程序设计训练测试出了这道题, 时隔多月再次写这道入门DP, 发现实现方法略有不同.</p>

<pre class="prettyprint"><code class=" hljs cpp"><span class="hljs-preprocessor">#include &lt;iostream&gt;</span>
<span class="hljs-preprocessor">#include &lt;algorithm&gt;</span>
<span class="hljs-preprocessor">#include &lt;vector&gt;</span>
<span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;
<span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> INF = <span class="hljs-number">0x3f3f3f3f</span>;

<span class="hljs-keyword">int</span> main()
{
    <span class="hljs-keyword">int</span> x;
    <span class="hljs-stl_container"><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;</span> v;
    <span class="hljs-keyword">while</span> (<span class="hljs-built_in">cin</span> &gt;&gt; x) {
        v.push_back(x);
    }
    <span class="hljs-keyword">int</span> qz = <span class="hljs-number">0</span>, MAX = -INF;
    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; v.size(); ++i) {
        <span class="hljs-keyword">if</span> (qz + v[i] &lt;= <span class="hljs-number">0</span>) qz = <span class="hljs-number">0</span>;
        <span class="hljs-keyword">else</span> {
            qz += v[i];
            MAX = max(MAX, qz);
        }
    }
    <span class="hljs-built_in">cout</span> &lt;&lt; MAX;
}</code></pre>            </div>
						<link href="https://csdnimg.cn/release/phoenix/mdeditor/markdown_views-258a4616f7.css" rel="stylesheet">
                      </div>
	</article>