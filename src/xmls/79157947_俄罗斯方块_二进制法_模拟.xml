<article class="baidu_pl">
		<div id="article_content" class="article_content clearfix csdn-tracking-statistics" data-pid="blog"  data-mod=popu_307  data-dsm = "post" >
								<div class="article-copyright">
                  					<svg class="icon" title="CSDN认证原创" aria-hidden="true" style="width:53px; height: 18px; vertical-align: -4px;">
							<use xlink:href="#CSDN_Cert"></use>
					</svg>
                  					
					版权声明：看我干嘛? 你又没打算转载我的博客~					https://blog.csdn.net/wjh2622075127/article/details/79157947				</div>
								<link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/template/css/ck_htmledit_views-f57960eb32.css" />
        								            <div id="content_views" class="markdown_views prism-atom-one-light">
							<!-- flowchart 箭头图标 勿删 -->
							<svg xmlns="http://www.w3.org/2000/svg" style="display: none;"><path stroke-linecap="round" d="M5,0 0,2.5 5,5z" id="raphael-marker-block" style="-webkit-tap-highlight-color: rgba(0, 0, 0, 0);"></path></svg>
							<p>俄罗斯方块是我很早之前做的模拟题, 题目在当时看来挺复杂, 现在看来也是挺简单了. </p>

<p>昨天看视频看到<strong>状压DP</strong>用<strong>二进制表示状态</strong>, 对这种思维方式印象深刻, 于是乎今天早上突然想起了用二进制表示曾经做过的俄罗斯方块题目.因为那道题有方块为1没方块为0. 觉得可行, 故试之.</p>

<p>结果没有想象中的代码少, 实现起来较为复杂. 不过还在用二进制表示的话, 空间复杂度和空间复杂度大大降低, 也不负这一番折腾.</p>

<p><strong>最重要的是, 我又探索了了一种全新的数据表达方式.</strong> <br>
<strong>我想这对思维的训练是有益的</strong></p>

<p>这是用了二进制表示的代码, 期中用了位运算, 也算学以致用了: )</p>

<pre class="prettyprint"><code class=" hljs cpp"><span class="hljs-preprocessor">#include &lt;iostream&gt;</span>

<span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;

<span class="hljs-keyword">int</span> main()
{
    <span class="hljs-keyword">int</span> row[<span class="hljs-number">18</span>] = {}, col, raw[<span class="hljs-number">4</span>] = {}, loc;
    <span class="hljs-keyword">for</span>( <span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">15</span>; ++i ) {
        <span class="hljs-keyword">for</span>( <span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">10</span>; ++j ) {
            <span class="hljs-built_in">cin</span> &gt;&gt; col;
            row[i] &lt;&lt;= <span class="hljs-number">1</span>;
            <span class="hljs-keyword">if</span>( col ) row[i]++;
        }
    }
    <span class="hljs-keyword">for</span>( <span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">4</span>; ++i ) {
        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">4</span>; ++j ) {
            <span class="hljs-built_in">cin</span> &gt;&gt; col;
            raw[i] &lt;&lt;= <span class="hljs-number">1</span>;
            <span class="hljs-keyword">if</span>( col ) raw[i]++;
        }
    }
    <span class="hljs-built_in">cin</span> &gt;&gt; loc;
    <span class="hljs-keyword">for</span>( <span class="hljs-keyword">int</span> i = <span class="hljs-number">4</span>; i &lt; <span class="hljs-number">15</span>; ++i ) {
        <span class="hljs-keyword">for</span>( <span class="hljs-keyword">int</span> j = <span class="hljs-number">3</span>; j &gt;= <span class="hljs-number">0</span>; --j ) {
            <span class="hljs-keyword">if</span>( row[i] &amp; (raw[j] &lt;&lt; (<span class="hljs-number">7</span> - loc))) {
                <span class="hljs-keyword">for</span>( <span class="hljs-keyword">int</span> k = <span class="hljs-number">3</span>; k &gt;= <span class="hljs-number">0</span>; --k ) {
                    row[i -<span class="hljs-number">1</span> +k - j] |= (raw[k] &lt;&lt; (<span class="hljs-number">7</span> - loc));
                }
                <span class="hljs-keyword">break</span>;
            }
        }
    }
    <span class="hljs-keyword">for</span>( <span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">15</span>; ++i ) {
        <span class="hljs-keyword">for</span>( <span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">10</span>; ++j ) {
            <span class="hljs-built_in">cout</span> &lt;&lt; ((row[i] &amp; (<span class="hljs-number">1</span> &lt;&lt; (<span class="hljs-number">9</span> - j))) ? <span class="hljs-number">1</span> : <span class="hljs-number">0</span>) &lt;&lt; <span class="hljs-string">' '</span>;
        }
        <span class="hljs-built_in">cout</span> &lt;&lt; endl;
    }
}</code></pre>

<p>再上此前使用的一般方法, 代码更短:</p>



<pre class="prettyprint"><code class=" hljs cpp"><span class="hljs-preprocessor">#include &lt;iostream&gt;</span>
<span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;
<span class="hljs-keyword">int</span> main(){ 
    <span class="hljs-keyword">int</span> line[<span class="hljs-number">16</span>][<span class="hljs-number">11</span>]; 
    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=<span class="hljs-number">15</span>;i++)
        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">1</span>;j&lt;=<span class="hljs-number">10</span>;j++)
            <span class="hljs-built_in">cin</span>&gt;&gt;line[i][j];
    <span class="hljs-keyword">int</span> <span class="hljs-built_in">list</span>[<span class="hljs-number">5</span>][<span class="hljs-number">5</span>];
    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=<span class="hljs-number">4</span>;i++)
        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">1</span>;j&lt;=<span class="hljs-number">4</span>;j++)
            <span class="hljs-built_in">cin</span>&gt;&gt;<span class="hljs-built_in">list</span>[i][j]; 

    <span class="hljs-keyword">int</span> q;
    <span class="hljs-built_in">cin</span>&gt;&gt;q;
    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">4</span>;i&gt;=<span class="hljs-number">1</span>;i--) 
        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">5</span>;j&lt;=<span class="hljs-number">15</span>;j++)
            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> m=q;m&lt;=q+<span class="hljs-number">4</span>;m++){ 
                <span class="hljs-keyword">if</span>(<span class="hljs-built_in">list</span>[i][m-q+<span class="hljs-number">1</span>]&amp;line[j][m]){ 
                    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> g=<span class="hljs-number">1</span>;g&lt;=<span class="hljs-number">4</span>;g++)
                        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> h=<span class="hljs-number">1</span>;h&lt;=<span class="hljs-number">4</span>;h++)
                            line[g+j-i-<span class="hljs-number">1</span>][h+(q-<span class="hljs-number">1</span>)]|=<span class="hljs-built_in">list</span>[g][h];
                    <span class="hljs-keyword">goto</span> flag;
                    } 
                } 

    flag :  <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=<span class="hljs-number">15</span>;i++){
                <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">1</span>;j&lt;=<span class="hljs-number">10</span>;j++)
                    <span class="hljs-built_in">cout</span>&lt;&lt;line[i][j]&lt;&lt;<span class="hljs-string">' '</span>;
                <span class="hljs-built_in">cout</span>&lt;&lt;endl;
            }
}</code></pre>            </div>
						<link href="https://csdnimg.cn/release/phoenix/mdeditor/markdown_views-258a4616f7.css" rel="stylesheet">
                      </div>
	</article>