<article class="baidu_pl">
		<div id="article_content" class="article_content clearfix csdn-tracking-statistics" data-pid="blog"  data-mod=popu_307  data-dsm = "post" >
								<div class="article-copyright">
                  					<svg class="icon" title="CSDN认证原创" aria-hidden="true" style="width:53px; height: 18px; vertical-align: -4px;">
							<use xlink:href="#CSDN_Cert"></use>
					</svg>
                  					
					版权声明：看我干嘛? 你又没打算转载我的博客~					https://blog.csdn.net/wjh2622075127/article/details/81217540				</div>
								<link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/template/css/ck_htmledit_views-f57960eb32.css" />
        								            <div id="content_views" class="markdown_views prism-atom-one-light">
							<!-- flowchart 箭头图标 勿删 -->
							<svg xmlns="http://www.w3.org/2000/svg" style="display: none;"><path stroke-linecap="round" d="M5,0 0,2.5 5,5z" id="raphael-marker-block" style="-webkit-tap-highlight-color: rgba(0, 0, 0, 0);"></path></svg>
							<p><strong>更新一下, 这道题就是双色染色问题(原谅我这么叫他)</strong></p>

<hr>

<p>洛谷P1330封锁阳光大学</p>

<p>题目描述 <br>
曹是一只爱刷街的老曹，暑假期间，他每天都欢快地在阳光大学的校园里刷街。河蟹看到欢快的曹，感到不爽。河蟹决定封锁阳光大学，不让曹刷街。</p>

<p>阳光大学的校园是一张由N个点构成的无向图，N个点之间由M条道路连接。每只河蟹可以对一个点进行封锁，当某个点被封锁后，与这个点相连的道路就被封锁了，曹就无法在与这些道路上刷街了。非常悲剧的一点是，河蟹是一种不和谐的生物，当两只河蟹封锁了相邻的两个点时，他们会发生冲突。</p>

<p>询问：最少需要多少只河蟹，可以封锁所有道路并且不发生冲突。</p>

<p>输入输出格式 <br>
输入格式： <br>
第一行：两个整数N，M</p>

<p>接下来M行：每行两个整数A，B，表示点A到点B之间有道路相连。</p>

<p>输出格式： <br>
仅一行：如果河蟹无法封锁所有道路，则输出“Impossible”，否则输出一个整数，表示最少需要多少只河蟹。</p>

<blockquote>
  <p>input: <br>
  3 3 <br>
  1 2 <br>
  1 3 <br>
  2 3 <br>
  output: <br>
  Impossible</p>
</blockquote>

<hr>

<p>1.第一反应是这是一道图染色问题,因为相邻两个点有冲突,但分析发现不是(或者说不这么裸的是). <br>
2.难道是模拟每一个结点开始进行遍历,看最后结果哪个更少是哪个? 不太可能,数据太大了. <br>
3.<strong>想到一种方法:把一张图按照bfs分奇数层和偶数层,看哪个层点数最少,结果就是哪个. 如果同一层之间有点相连那么就Impossible. 发现可能是对的? </strong> <br>
4.感觉像是从一张图中找出一棵生成树, 这棵树的层数是最小的. </p>

<hr>

<p>综上所述: <br>
<strong>相邻两个点之间一定有一个是有河蟹的,因为会有一条边. 那么就有两种状态: 染色或者不染色,那么用bfs分层,一层黑一层白,哪种层点少就选哪层,同一层邻边的Impossible. 一句话(我创的):<em>黑白互斥层染色问题. </em> </strong></p>

<p><strong>如何解决同一层的点之间有边的情况? </strong></p>

<p>记录层次,发现从一个点扩展过来的点已经有层次了而且是和自己一个层,其实只有三种,上一层这一层下一层 <br>
<strong>上一层跳过,这一层Impossible(中途返回),下一层push,就ok了,回国头来统计黑白层点数量. </strong> <br>
因为会比较层次,所以不像传统的遍历是建立visit数组,而是建立层数数组,以便互斥分析和结果统计. </p>

<hr>

<p>结果只有40分. 似乎是<strong>这张图不一定是连通图, 所以要增加处理 </strong> <br>
这是个问题: 我有好多次都没有考虑图的联通性,以后一定要注意.  <br>
结果还是40分, 之前对的又有错了,之前错了又有对的.怎么会这样.  <br>
原因是<strong>重复判断了之前找过的点,加个vis数组去重.</strong> <br>
然而现在是50分,该不会是思路出了问题吧. <br>
妥协了,去看题解学习学习.  <br>
看题解发现思路差不多的,于是返回,找到了一个很明显的bug.<strong>原来是我之前移到多连通图时有几行代码要修改,但是我漏掉了一个地方, 所以出错了. </strong></p>

<p>OK, 不完美地结束了. 经过思考对思维还是有一定地训练的. </p>

<p>最后贴代码</p>

<pre class="prettyprint"><code class=" hljs cpp"><span class="hljs-preprocessor">#include &lt;iostream&gt;</span>
<span class="hljs-preprocessor">#include &lt;cstring&gt;</span>
<span class="hljs-preprocessor">#include &lt;queue&gt;</span>
<span class="hljs-preprocessor">#include &lt;vector&gt;</span>
<span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;

<span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn = <span class="hljs-number">10005</span>;
<span class="hljs-keyword">int</span> n, m;
<span class="hljs-stl_container"><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;</span> G[maxn]; <span class="hljs-comment">// 邻接表存储. </span>
<span class="hljs-keyword">int</span> layers[maxn] = {}; <span class="hljs-comment">// 初始都是-1层 </span>
<span class="hljs-keyword">bool</span> vis[maxn] = {};

<span class="hljs-keyword">bool</span> bfs(<span class="hljs-keyword">int</span> i)
{
    <span class="hljs-stl_container"><span class="hljs-built_in">queue</span>&lt;<span class="hljs-keyword">int</span>&gt;</span> que;
    que.push(i);
    layers[i] = <span class="hljs-number">1</span>;
    <span class="hljs-keyword">while</span> (!que.empty()) {
        <span class="hljs-keyword">int</span> u = que.front();
        que.pop();
        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; G[u].size(); ++i) {
            <span class="hljs-keyword">int</span> v = G[u][i];
            <span class="hljs-keyword">if</span> (layers[v] == layers[u] - <span class="hljs-number">1</span>) <span class="hljs-keyword">continue</span>; <span class="hljs-comment">// 遍历到了上一层,分过层了continue </span>
            <span class="hljs-keyword">if</span> (layers[v] == layers[u]) <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;  <span class="hljs-comment">// 遍历到了同一层 </span>
            layers[v] = layers[u] + <span class="hljs-number">1</span>;  <span class="hljs-comment">// 下一层那就加上去. </span>
            que.push(v);
        }
    }
    <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;
}

<span class="hljs-keyword">int</span> main()
{
    <span class="hljs-built_in">memset</span>(layers, -<span class="hljs-number">1</span>, <span class="hljs-keyword">sizeof</span>(layers));
    <span class="hljs-built_in">cin</span> &gt;&gt; n &gt;&gt; m;
    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; m; ++i) {
        <span class="hljs-keyword">int</span> u, v;
        <span class="hljs-built_in">cin</span> &gt;&gt; u &gt;&gt; v;
        G[u].push_back(v);
        G[v].push_back(u);
    }
    <span class="hljs-keyword">int</span> ans = <span class="hljs-number">0</span>;
    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) {
        <span class="hljs-keyword">if</span> (layers[i] == -<span class="hljs-number">1</span>) {
            <span class="hljs-comment">//cout &lt;&lt; "i = " &lt;&lt; i &lt;&lt; endl;</span>
            <span class="hljs-keyword">if</span> (!bfs(i)) {
                <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">"Impossible"</span>;
                <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;
            } <span class="hljs-keyword">else</span> {
                <span class="hljs-keyword">int</span> odd = <span class="hljs-number">0</span>, even = <span class="hljs-number">0</span>;
                <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) {
                    <span class="hljs-keyword">if</span> (layers[i] + <span class="hljs-number">1</span> &amp;&amp; !vis[i]) {
                        vis[i] = <span class="hljs-keyword">true</span>;
                        <span class="hljs-keyword">if</span> (layers[i] &amp; <span class="hljs-number">1</span>) odd++;
                        <span class="hljs-keyword">else</span> even++;
                    }
                }
                <span class="hljs-comment">//cout &lt;&lt; min(even, odd) &lt;&lt; endl; </span>
                ans += min(even, odd);
            }
        }
    }
    <span class="hljs-built_in">cout</span> &lt;&lt; ans;
}
<span class="hljs-comment">/*
3 3
1 2
1 3
2 3

3 2
1 2
2 3

6 6
1 2
2 3
3 4
1 4
4 5
5 6
*/</span></code></pre>            </div>
						<link href="https://csdnimg.cn/release/phoenix/mdeditor/markdown_views-258a4616f7.css" rel="stylesheet">
                      </div>
	</article>