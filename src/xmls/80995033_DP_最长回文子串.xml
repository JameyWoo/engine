<article class="baidu_pl">
		<div id="article_content" class="article_content clearfix csdn-tracking-statistics" data-pid="blog"  data-mod=popu_307  data-dsm = "post" >
								<div class="article-copyright">
                  					<svg class="icon" title="CSDN认证原创" aria-hidden="true" style="width:53px; height: 18px; vertical-align: -4px;">
							<use xlink:href="#CSDN_Cert"></use>
					</svg>
                  					
					版权声明：看我干嘛? 你又没打算转载我的博客~					https://blog.csdn.net/wjh2622075127/article/details/80995033				</div>
								<link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/template/css/ck_htmledit_views-f57960eb32.css" />
        								            <div id="content_views" class="markdown_views prism-atom-one-light">
							<!-- flowchart 箭头图标 勿删 -->
							<svg xmlns="http://www.w3.org/2000/svg" style="display: none;"><path stroke-linecap="round" d="M5,0 0,2.5 5,5z" id="raphael-marker-block" style="-webkit-tap-highlight-color: rgba(0, 0, 0, 0);"></path></svg>
							<h4 id="dp问题-最长回文子串">DP问题, 最长回文子串</h4>

<p>最长回文子串问题指的是在一个字符串中, 是回文子串的长度的最大值. 这里的回文子串是<strong>连续的</strong>. </p>

<p><em>如字符串”PATZJUJZTACCBCC”, 他的最长回文子串是”ATZJUJZTA”, 长度为9, 当然它还有其他回文子串如”CCBCC”, 但是长度不够长.</em></p>

<p>这类问题似乎有多种解法, 复杂度从O(n^3)到O(n)不等.</p>

<p>下面介绍一种<strong>时间复杂度为O(n^2)</strong>的.</p>

<p>思路是典型的DP思路, 我们可以考量这样一个数组, dp[i][j], bool类型, 值为1代表字符串从S[i]到S[j]是回文子串, 值为0代表不是.</p>

<p>那么对于任意的i, j, 如何判断dp[i][j]的值呢? 讨论下面两种情况:</p>

<p><strong>1. s[i] = s[j]时, 如果dp[i+1][j-1] = 0, 即从s[i+1]到s[j-1]是回文子串, 那么从s[i][j]自然是回文子串, 所以dp[i][j] = dp[i+1][j-1]</strong> <br>
<strong>2.  s[i] != s[j]时, 如论如何dp[i][j] = 0</strong></p>

<p>那么这样看思路就非常清晰了, 看上去非常简单, 按照这个规则判断一下就好了.</p>

<p>不过其实这道题是非常有技巧的, 我们可以看到要获取dp[i][j]值, 那么就需要知道dp[i+1][j-1]的值, 那么就不能从前往后遍历i了, 怎么办呢? 从后往前遍历吗? 当然也不行. 这就是这种方法的精彩所在, 两套循环,<strong>外围遍历长度, 内围遍历字符串起始点i.</strong></p>

<p>因为dp[i][j]的长度是j - i + 1, 而dp[i+1][j-1]的长度是j - i - 1, 长度差了两个, 如果我把长度小的结果都求解出来了, 那么长度更长的用长度更小的, 无论i是否会更大, 都是可以的. 不得不说很是精彩.</p>

<p>代码实现上, <strong>注意前面初始化长度 2时对ans赋恰当的值.</strong></p>

<pre class="prettyprint"><code class=" hljs axapta"><span class="hljs-preprocessor">#include &lt;iostream&gt;</span>
using namespace std;

<span class="hljs-keyword">int</span> main()
{
    string <span class="hljs-keyword">str</span>; 
    cin &gt;&gt; <span class="hljs-keyword">str</span>;
    <span class="hljs-keyword">int</span> dp[<span class="hljs-keyword">str</span>.size() + <span class="hljs-number">1</span>][<span class="hljs-keyword">str</span>.size() + <span class="hljs-number">1</span>] = {}, ans = <span class="hljs-number">1</span>;
    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-keyword">int</span>(<span class="hljs-keyword">str</span>.size()); ++i) {
        dp[i][i] = <span class="hljs-number">1</span>;
        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">str</span>[i] == <span class="hljs-keyword">str</span>[i + <span class="hljs-number">1</span>]) {
            dp[i][i + <span class="hljs-number">1</span>] = <span class="hljs-number">1</span>;
            ans = <span class="hljs-number">2</span>;
        }
    }
    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> len = <span class="hljs-number">3</span>; len &lt;= (<span class="hljs-keyword">int</span>)<span class="hljs-keyword">str</span>.size(); ++len) {
        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i + len - <span class="hljs-number">1</span> &lt; (<span class="hljs-keyword">int</span>)<span class="hljs-keyword">str</span>.size(); ++i) {
            <span class="hljs-keyword">int</span> k = i + len - <span class="hljs-number">1</span>;
            <span class="hljs-keyword">if</span> (<span class="hljs-keyword">str</span>[i] == <span class="hljs-keyword">str</span>[k]) {
                dp[i][k] = dp[i + <span class="hljs-number">1</span>][k - <span class="hljs-number">1</span>];
                <span class="hljs-keyword">if</span> (dp[i][k]) ans = len;
            }
        }
    }
    cout &lt;&lt; ans;
}
<span class="hljs-comment">/*
PATZJUJZTACCBCC    ans = 9

34567536487326483254   ans = 1
*/</span> </code></pre>            </div>
						<link href="https://csdnimg.cn/release/phoenix/mdeditor/markdown_views-258a4616f7.css" rel="stylesheet">
                      </div>
	</article>