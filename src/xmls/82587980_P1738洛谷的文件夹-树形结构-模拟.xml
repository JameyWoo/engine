<article class="baidu_pl">
		<div id="article_content" class="article_content clearfix csdn-tracking-statistics" data-pid="blog"  data-mod=popu_307  data-dsm = "post" >
								<div class="article-copyright">
                  					<svg class="icon" title="CSDN认证原创" aria-hidden="true" style="width:53px; height: 18px; vertical-align: -4px;">
							<use xlink:href="#CSDN_Cert"></use>
					</svg>
                  					
					版权声明：看我干嘛? 你又没打算转载我的博客~					https://blog.csdn.net/wjh2622075127/article/details/82587980				</div>
								<link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/template/css/ck_htmledit_views-f57960eb32.css" />
        								            <div id="content_views" class="markdown_views prism-atom-one-light">
							<!-- flowchart 箭头图标 勿删 -->
							<svg xmlns="http://www.w3.org/2000/svg" style="display: none;"><path stroke-linecap="round" d="M5,0 0,2.5 5,5z" id="raphael-marker-block" style="-webkit-tap-highlight-color: rgba(0, 0, 0, 0);"></path></svg>
							<h3 id="题目链接"><strong><a>题目链接 </a></strong></h3>


<div class="am-u-md-8 lg-right">
<div class="lg-content-left">
<div class="lg-article am-g">
<h2 id="题目描述">题目描述</h2>
<p>kkksc03是个非凡的空想家！在短时间内他设想了大量网页，然后总是交给可怜的lzn去实现。</p>
<p>洛谷的网页端，有很多文件夹，文件夹还套着文件夹。</p>
<p>例如：/luogu/application/controller表示根目录下有一个名称为luogu的文件夹，这个文件夹下有一个名称application的文件夹，其中还有名为controller的文件夹。</p>
<p>每个路径的第1个字符总是’/’，且没有两个连续的’/’，最后的字符不是’/’。所有名称仅包含数字和小写字母。</p>
<p>目前根目录是空的。kkksc03想好了很多应该有的文件夹路径名。问题是，需要是使这些文件夹都存在，需要新建几个文件夹呢？</p>
<h2 id="输入输出格式">输入输出格式</h2>
<strong>输入格式：</strong><br>
<p></p><p>输入文件第1行为一个正整数N。</p>
<p>接下来N行，每行为一个描述路径的字符串，长度均不超过100。</p>
<strong>输出格式：</strong><br>
<p></p><p>输出应包含N行，每行1个正整数，第i行输出若要使第1个路径到第i个路径存在，最少需要新建多少个文件夹。</p>
<h2 id="输入输出样例">输入输出样例</h2>
<div class="am-g">
<div class="am-u-md-6 copy-region">
<strong>输入样例#1：</strong>
<a class="am-badge am-radius lg-bg-orange sample-copy">复制</a>
<pre>2
/luogu/application/controller
/luogu/application/view
</pre>
</div>

<div class="am-u-md-6 copy-region">
<strong>输出样例#1：</strong>
<a class="am-badge am-radius lg-bg-orange sample-copy">复制</a>
<pre>3
4
</pre>
</div>

<p></p></div>

<div class="am-g">
<div class="am-u-md-6 copy-region">
<strong>输入样例#2：</strong>
<a class="am-badge am-radius lg-bg-orange sample-copy">复制</a>
<pre>3
/chicken
/chicken/egg
/chicken</pre>
</div>

<div class="am-u-md-6 copy-region">
<strong>输出样例#2：</strong>
<a class="am-badge am-radius lg-bg-orange sample-copy">复制</a>
<pre>1
2
2</pre>
</div>

<p></p></div>

<div class="am-g">
<div class="am-u-md-6 copy-region">
<strong>输入样例#3：</strong>
<a class="am-badge am-radius lg-bg-orange sample-copy">复制</a>
<pre>4
/a
/a/b
/a/c
/b/b</pre>
</div>

<div class="am-u-md-6 copy-region">
<strong>输出样例#3：</strong>
<a class="am-badge am-radius lg-bg-orange sample-copy">复制</a>
<pre>1
2
3
5</pre>
</div>

<p></p></div>

<h2 id="说明">说明</h2>

<p>数据规模：</p>

<p>对于所有数据，N&lt;=1000。</p>

<p>对于20%数据，有N&lt;=20；</p>

<p>对于50%数据，有N&lt;=200；</p>

<p>对于30%数据，有对于所有路径最多存在两个’/’（包含第1个字符）。</p>

<p></p></div>

<hr>

<p>这道题是洛谷上一道模拟题，关于文件夹的，我想应该是和字符串有关就拿来做了。</p>

<p>提供两种思路。一长一短</p>

<hr>

<p>一、刚开始看这题，想可不可以用取巧的方法，每个文件夹的名字都不一样？然后划分文件夹就可以得出结果了。但马上发现这是不可能的。</p>

<p>再观察题目，因为是和文件夹有关，<strong>所以突然想到了树形结构，可以模拟树形结构来统计文件夹的数量</strong>。从根节点遍历，查找当前目录可不可以往下走，如果不可以，就新建一个目录，否则往下走。此思路的关键是构建这样一个结构体</p></div></div>

<pre class="prettyprint"><code class=" hljs cpp"><span class="hljs-keyword">struct</span> Node {
    <span class="hljs-built_in">string</span> name;
    <span class="hljs-stl_container"><span class="hljs-built_in">vector</span>&lt;Node*&gt;</span> nexts;
};</code></pre>

<p>然后模拟树形结构，思路简单，代码略长。</p>



<pre class="prettyprint"><code class=" hljs cpp"><span class="hljs-preprocessor">#include &lt;iostream&gt;</span>
<span class="hljs-preprocessor">#include &lt;vector&gt;</span>
<span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;

<span class="hljs-keyword">struct</span> Node {
    <span class="hljs-built_in">string</span> name;
    <span class="hljs-stl_container"><span class="hljs-built_in">vector</span>&lt;Node*&gt;</span> nexts;
};
<span class="hljs-keyword">int</span> n, cnt = <span class="hljs-number">0</span>;

<span class="hljs-keyword">void</span> get_sts(<span class="hljs-built_in">string</span> str, <span class="hljs-stl_container"><span class="hljs-built_in">vector</span>&lt;<span class="hljs-built_in">string</span>&gt;</span> &amp;sts)
{
    str += <span class="hljs-string">'/'</span>;
    str.erase(str.begin());
    <span class="hljs-built_in">string</span> tmp;
    <span class="hljs-keyword">for</span> (size_t i = <span class="hljs-number">0</span>; i &lt; str.size(); ++i) {
        <span class="hljs-keyword">if</span> (str[i] == <span class="hljs-string">'/'</span>) {
            sts.push_back(tmp);
            tmp = <span class="hljs-string">""</span>;
        } <span class="hljs-keyword">else</span> tmp += str[i];
    }
}

<span class="hljs-keyword">void</span> build(Node* root, <span class="hljs-stl_container"><span class="hljs-built_in">vector</span>&lt;<span class="hljs-built_in">string</span>&gt;</span> sts)
{
    Node* p = root;
    <span class="hljs-keyword">for</span> (size_t i = <span class="hljs-number">0</span>; i &lt; sts.size(); ++i) {
        <span class="hljs-keyword">bool</span> flag = <span class="hljs-keyword">false</span>;
        <span class="hljs-keyword">for</span> (size_t j = <span class="hljs-number">0</span>; j &lt; p-&gt;nexts.size(); ++j) {
            <span class="hljs-keyword">if</span> (p-&gt;nexts[j]-&gt;name == sts[i]) {
                flag = <span class="hljs-keyword">true</span>;
                p = p-&gt;nexts[j];
                <span class="hljs-keyword">break</span>;
            }
        }
        <span class="hljs-keyword">if</span> (flag == <span class="hljs-keyword">false</span>) { <span class="hljs-comment">// 新建目录</span>
            <span class="hljs-keyword">while</span> (i != sts.size()) {
                cnt++;
                Node* now = <span class="hljs-keyword">new</span> Node;
                now-&gt;name = sts[i];
                p-&gt;nexts.push_back(now);
                ++i;
                p = p-&gt;nexts.back();
            }
        }
    }
}

<span class="hljs-keyword">void</span> calc(Node *root)
{
    <span class="hljs-keyword">for</span> (size_t i = <span class="hljs-number">0</span>; i &lt; root-&gt;nexts.size(); ++i) {
        <span class="hljs-built_in">cout</span> &lt;&lt; root-&gt;nexts[i]-&gt;name &lt;&lt; endl;
        calc(root-&gt;nexts[i]);
    }
}

<span class="hljs-keyword">int</span> main()
{
    Node* root = <span class="hljs-keyword">new</span> Node;
    root-&gt;name = <span class="hljs-string">""</span>;
    <span class="hljs-built_in">cin</span> &gt;&gt; n;
    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) {
        <span class="hljs-built_in">string</span> str;
        <span class="hljs-built_in">cin</span> &gt;&gt; str;
        <span class="hljs-stl_container"><span class="hljs-built_in">vector</span>&lt;<span class="hljs-built_in">string</span>&gt;</span> sts;
        get_sts(str, sts);
        build(root, sts);
        <span class="hljs-built_in">cout</span> &lt;&lt; cnt &lt;&lt; endl;
    }
}</code></pre>

<p>二、题解中有位大佬的思路很好，让我大开眼界了（当然目前还是井底之蛙）。</p>

<p>他的思路乍一看就是我最早的取巧的方法，用<code>set</code>自动去重文件夹的名字，统计<code>set</code>元素数量即可。于是我怀着怀疑的态度去调试代码，<strong>发现他存的不是文件夹的名字，而是文件夹目录的名字！惊醒梦中人！</strong>故有此记</p>

<p><strong>目录是唯一的，可以作为一个文件夹的唯一标识符。</strong></p>

<pre class="prettyprint"><code class=" hljs cpp"><span class="hljs-preprocessor">#include &lt;set&gt;</span>
<span class="hljs-preprocessor">#include &lt;string&gt;</span>
<span class="hljs-preprocessor">#include &lt;iostream&gt;</span>

<span class="hljs-keyword">int</span> main() {
    <span class="hljs-keyword">int</span> n;
    <span class="hljs-built_in">std</span>::<span class="hljs-built_in">cin</span> &gt;&gt; n;
    <span class="hljs-built_in">std</span>::<span class="hljs-stl_container"><span class="hljs-built_in">set</span>&lt;<span class="hljs-built_in">std</span>::<span class="hljs-built_in">string</span>&gt;</span> <span class="hljs-built_in">set</span>;

    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) {
        <span class="hljs-built_in">std</span>::<span class="hljs-built_in">string</span> s;
        <span class="hljs-built_in">std</span>::<span class="hljs-built_in">cin</span> &gt;&gt; s;
        <span class="hljs-built_in">std</span>::<span class="hljs-built_in">string</span> dir = <span class="hljs-string">""</span>;
        <span class="hljs-keyword">for</span> (size_t j = <span class="hljs-number">1</span>; j &lt; s.size(); ++j) {
            <span class="hljs-keyword">if</span> (s[j] == <span class="hljs-string">'/'</span>) {
                <span class="hljs-built_in">set</span>.insert(dir);
                <span class="hljs-comment">//std::cout &lt;&lt; dir &lt;&lt; std::endl;</span>
            }
            dir += s[j];
        }
        <span class="hljs-built_in">set</span>.insert(dir);

        <span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-built_in">set</span>.size() &lt;&lt; <span class="hljs-built_in">std</span>::endl;
    }
}</code></pre>            </div>
						<link href="https://csdnimg.cn/release/phoenix/mdeditor/markdown_views-258a4616f7.css" rel="stylesheet">
                      </div>
	</article>