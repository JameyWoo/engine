<article class="baidu_pl">
		<div id="article_content" class="article_content clearfix csdn-tracking-statistics" data-pid="blog"  data-mod=popu_307  data-dsm = "post" >
								<div class="article-copyright">
                  					<svg class="icon" title="CSDN认证原创" aria-hidden="true" style="width:53px; height: 18px; vertical-align: -4px;">
							<use xlink:href="#CSDN_Cert"></use>
					</svg>
                  					
					版权声明：看我干嘛? 你又没打算转载我的博客~					https://blog.csdn.net/wjh2622075127/article/details/79949139				</div>
								<link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/template/css/ck_htmledit_views-f57960eb32.css" />
        								            <div id="content_views" class="markdown_views prism-atom-one-light">
							<!-- flowchart 箭头图标 勿删 -->
							<svg xmlns="http://www.w3.org/2000/svg" style="display: none;"><path stroke-linecap="round" d="M5,0 0,2.5 5,5z" id="raphael-marker-block" style="-webkit-tap-highlight-color: rgba(0, 0, 0, 0);"></path></svg>
							<p>map是STL中映射. 使用起来还是很方便的. <br>
<strong>支持自定义排序规则(对key)</strong> <br>
<strong>支持多维映射</strong></p>

<p><strong>常用操作</strong></p>

<pre class="prettyprint"><code class=" hljs cpp"> <span class="hljs-preprocessor">#include &lt; map&gt;</span>
 <span class="hljs-stl_container"><span class="hljs-built_in">map</span>&lt; <span class="hljs-built_in">string</span>, <span class="hljs-keyword">int</span>&gt;</span> dict;
 <span class="hljs-stl_container"><span class="hljs-built_in">map</span>&lt; <span class="hljs-built_in">string</span>, <span class="hljs-stl_container"><span class="hljs-built_in">map</span>&lt; <span class="hljs-keyword">int</span>, <span class="hljs-built_in">string</span>&gt;</span> &gt;</span>dict; 

 count()函数
 erase()函数
 empty()函数
 insert()函数  

 <span class="hljs-stl_container"><span class="hljs-built_in">map</span>&lt; <span class="hljs-built_in">string</span>, <span class="hljs-keyword">int</span>&gt;</span>::iterator it = dict.begin();
 it-&gt;first; <span class="hljs-comment">//key</span>
 it-&gt;second;  <span class="hljs-comment">//value</span>

 dict[<span class="hljs-number">1</span>] = <span class="hljs-number">3232</span>; <span class="hljs-comment">//直接建立映射, 无论是否存在</span>

<span class="hljs-stl_container"><span class="hljs-built_in">map</span>&lt;<span class="hljs-built_in">string</span>, <span class="hljs-keyword">int</span>, cmp&gt;</span> dict;
<span class="hljs-keyword">struct</span> cmp {
    <span class="hljs-keyword">bool</span> <span class="hljs-keyword">operator</span> (<span class="hljs-built_in">string</span> x, <span class="hljs-built_in">string</span> y) { 
        <span class="hljs-keyword">return</span> x &lt; ｙ;
    }
};</code></pre>

<p><strong>自定义排序规则和set非常像, 几乎一样</strong></p>

<pre class="prettyprint"><code class=" hljs cpp"><span class="hljs-preprocessor">#include &lt;iostream&gt;</span>
<span class="hljs-preprocessor">#include &lt;map&gt;</span>
<span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;

<span class="hljs-keyword">struct</span> cmp {
    <span class="hljs-keyword">bool</span> <span class="hljs-keyword">operator</span> () (<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> y) {
        <span class="hljs-keyword">return</span> x &gt; y;
    }
};

<span class="hljs-keyword">int</span> main()
{
    <span class="hljs-stl_container"><span class="hljs-built_in">map</span>&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>, cmp&gt;</span> dict;
    <span class="hljs-stl_container"><span class="hljs-built_in">map</span>&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt;</span> dic;
    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; ++i) {
        dict.insert(pair&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt;(<span class="hljs-number">10</span> - i, <span class="hljs-number">10</span> - i));
        dic.insert(pair&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt;(<span class="hljs-number">10</span> - i, <span class="hljs-number">10</span> - i));
    }
    <span class="hljs-keyword">for</span>(<span class="hljs-stl_container"><span class="hljs-built_in">map</span>&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt;</span>::iterator it = dict.begin(); it != dict.end(); ++it) {
        <span class="hljs-built_in">cout</span> &lt;&lt; it-&gt;first &lt;&lt; <span class="hljs-string">' '</span> &lt;&lt; it-&gt;second &lt;&lt; endl;
    }
    <span class="hljs-built_in">cout</span> &lt;&lt; endl &lt;&lt; endl;
    <span class="hljs-keyword">for</span>(<span class="hljs-stl_container"><span class="hljs-built_in">map</span>&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt;</span>::iterator is = dic.begin(); is != dic.end(); ++is) {
        <span class="hljs-built_in">cout</span> &lt;&lt; is-&gt;first &lt;&lt; <span class="hljs-string">' '</span> &lt;&lt; is-&gt;second &lt;&lt; endl;
    }
}</code></pre>

<p><a href="https://www.jisuanke.com/minicourse/734/37692" rel="nofollow">.</a> <br>
蒜头君面试 <br>
<strong>这道题老师的优化可以说非常精彩了</strong>, 以后要自己写出这样的优化.</p>

<pre class="prettyprint"><code class=" hljs cpp">蒜头君来蒜厂面试的时候，曾经遇到这样一个面试题：

给定 nn 个整数，求里面出现次数最多的数，如果有多个重复出现的数，求出值最大的一个。当时可算是给蒜头君难住了。现在蒜头君来考考你。

输入格式
第一行输入一个整数 n(<span class="hljs-number">1</span> \le n \le <span class="hljs-number">100000</span>)n(<span class="hljs-number">1</span>≤n≤<span class="hljs-number">100000</span>)，接下来一行输入 nn 个 <span class="hljs-keyword">int</span> 范围内的整数。

输出格式
输出出现次数最多的数和出现的次数，中间用一个空格隔开，如果有多个重复出现的数，输出值最大的那个。

样例输入<span class="hljs-number">1</span>
<span class="hljs-number">5</span>
<span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span>
样例输出<span class="hljs-number">1</span>
<span class="hljs-number">1</span> <span class="hljs-number">2</span>
样例输入<span class="hljs-number">2</span>
<span class="hljs-number">10</span>
<span class="hljs-number">9</span> <span class="hljs-number">10</span> <span class="hljs-number">27</span> <span class="hljs-number">4</span> <span class="hljs-number">9</span> <span class="hljs-number">10</span> <span class="hljs-number">3</span> <span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">6</span>
样例输出<span class="hljs-number">2</span>
<span class="hljs-number">10</span> <span class="hljs-number">2</span>

<span class="hljs-preprocessor">#include &lt;iostream&gt;</span>
<span class="hljs-preprocessor">#include &lt;map&gt;</span>
<span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;

<span class="hljs-keyword">int</span> main()
{
    <span class="hljs-keyword">int</span> n, x, max = -<span class="hljs-number">0x7fffffff</span>, maxx = -<span class="hljs-number">1</span>;
    <span class="hljs-built_in">cin</span> &gt;&gt; n;
    <span class="hljs-stl_container"><span class="hljs-built_in">map</span>&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt;</span> dict;
    <span class="hljs-keyword">while</span>(n--) {
        <span class="hljs-built_in">cin</span> &gt;&gt; x;
        dict[x]++;
        <span class="hljs-keyword">if</span>(dict[x] &gt; max || (dict[x] == max &amp;&amp; x &gt; maxx)) {
            max = dict[maxx = x];
        }
    }
    <span class="hljs-built_in">cout</span> &lt;&lt; maxx &lt;&lt; <span class="hljs-string">' '</span> &lt;&lt; max;
}</code></pre>

<p><a href="https://www.jisuanke.com/minicourse/734/37693" rel="nofollow">.</a> <br>
水果店 <br>
<strong>二维map的应用</strong></p>

<pre class="prettyprint"><code class=" hljs cpp">蒜头君经营着一个不大的水果店。他认为生存之道就是经营最受顾客欢迎的水果。现在他想要一份水果销售情况的明细表，这样就可以很容易掌握所有水果的销售情况了。蒜头君告诉你每一笔销售记录的水果名称，产地和销售的数量，请你帮他生成明细表。

输入格式
第一行是一个整数 N(<span class="hljs-number">0</span> &lt; N \le <span class="hljs-number">1000</span>)N(<span class="hljs-number">0</span>&lt;N≤<span class="hljs-number">1000</span>)，表示蒜头君有 NN 次成功的交易。其后有 NN 行数据，每行表示一次交易，由水果名称(小写字母组成，长度不超过 <span class="hljs-number">100100</span>)，水果产地(小写字母组成，长度不超过 <span class="hljs-number">100100</span>)和交易的水果数目(正整数，不超过 <span class="hljs-number">10001000</span>)组成.

输出格式
请你输出一份排版格式正确(请分析样本输出)的水果销售情况明细表。这份明细表包括所有水果的产地、名称和销售数目的信息。水果先按产地分类，产地按字母顺序排列；同一产地的水果按照名称排序，名称按字母顺序排序。

样例输入
<span class="hljs-number">5</span>
apple shandong <span class="hljs-number">3</span>
pineapple guangdong <span class="hljs-number">1</span>
sugarcane guangdong <span class="hljs-number">1</span>
pineapple guangdong <span class="hljs-number">3</span>
pineapple guangdong <span class="hljs-number">1</span>
样例输出
guangdong
   |----pineapple(<span class="hljs-number">5</span>)
   |----sugarcane(<span class="hljs-number">1</span>)
shandong
   |----apple(<span class="hljs-number">3</span>)

<span class="hljs-preprocessor">#include &lt;iostream&gt;</span>
<span class="hljs-preprocessor">#include &lt;map&gt;</span>
<span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;

<span class="hljs-keyword">int</span> main()
{
    <span class="hljs-stl_container"><span class="hljs-built_in">map</span>&lt;<span class="hljs-built_in">string</span>, <span class="hljs-stl_container"><span class="hljs-built_in">map</span>&lt;<span class="hljs-built_in">string</span>, <span class="hljs-keyword">int</span>&gt;</span> &gt;</span> dict;
    <span class="hljs-built_in">string</span> a, b;
    <span class="hljs-keyword">int</span> c;
    <span class="hljs-keyword">int</span> n;
    <span class="hljs-built_in">cin</span> &gt;&gt; n;
    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; ++i) {
        <span class="hljs-built_in">cin</span> &gt;&gt; a &gt;&gt; b &gt;&gt; c;
        <span class="hljs-keyword">if</span>(dict.count(b) &amp;&amp; dict[b].count(a)) {
            dict[b][a] += c;
        } <span class="hljs-keyword">else</span> {
            dict[b][a] = c;
        }
    }
    <span class="hljs-keyword">for</span>(<span class="hljs-stl_container"><span class="hljs-built_in">map</span>&lt;<span class="hljs-built_in">string</span>, <span class="hljs-stl_container"><span class="hljs-built_in">map</span>&lt;<span class="hljs-built_in">string</span>, <span class="hljs-keyword">int</span>&gt;</span> &gt;</span>::iterator it = dict.begin(); it != dict.end(); ++it) {
        <span class="hljs-built_in">cout</span> &lt;&lt; it-&gt;first &lt;&lt; endl;
        <span class="hljs-keyword">for</span>(<span class="hljs-stl_container"><span class="hljs-built_in">map</span>&lt;<span class="hljs-built_in">string</span>, <span class="hljs-keyword">int</span>&gt;</span>::iterator is = it-&gt;second.begin(); is != it-&gt;second.end(); ++is) {
            <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">"   |----"</span> &lt;&lt; is-&gt;first &lt;&lt; <span class="hljs-string">'('</span> &lt;&lt; is-&gt;second &lt;&lt; <span class="hljs-string">')'</span> &lt;&lt; endl;
        }
    }
}</code></pre>            </div>
						<link href="https://csdnimg.cn/release/phoenix/mdeditor/markdown_views-258a4616f7.css" rel="stylesheet">
                      </div>
	</article>