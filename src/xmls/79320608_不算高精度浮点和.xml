<article class="baidu_pl">
		<div id="article_content" class="article_content clearfix csdn-tracking-statistics" data-pid="blog"  data-mod=popu_307  data-dsm = "post" >
								<div class="article-copyright">
                  					<svg class="icon" title="CSDN认证原创" aria-hidden="true" style="width:53px; height: 18px; vertical-align: -4px;">
							<use xlink:href="#CSDN_Cert"></use>
					</svg>
                  					
					版权声明：看我干嘛? 你又没打算转载我的博客~					https://blog.csdn.net/wjh2622075127/article/details/79320608				</div>
								<link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/template/css/ck_htmledit_views-f57960eb32.css" />
        								            <div id="content_views" class="markdown_views prism-atom-one-light">
							<!-- flowchart 箭头图标 勿删 -->
							<svg xmlns="http://www.w3.org/2000/svg" style="display: none;"><path stroke-linecap="round" d="M5,0 0,2.5 5,5z" id="raphael-marker-block" style="-webkit-tap-highlight-color: rgba(0, 0, 0, 0);"></path></svg>
							<p><div class="toc"><div class="toc">
<ul>
<li><a href="#一次做题笔记" rel="nofollow">一次做题笔记</a><ul>
<li><a href="#洛谷的一道50000个浮点数之和题目" rel="nofollow">洛谷的一道50000个浮点数之和题目</a><ul>
<li><a href="#第一次是这么做的" rel="nofollow">第一次是这么做的</a></li>
<li><a href="#第二次-看了题解之后是这么做的" rel="nofollow">第二次 看了题解之后是这么做的</a></li>
<li><a href="#第三种-还是题解中别人的代码" rel="nofollow">第三种 还是题解中别人的代码</a></li>
</ul>
</li>
<li><a href="#可见解决问题的方法可以有很多种" rel="nofollow">可见解决问题的方法可以有很多种</a><ul>
<li><a href="#能力比知识更重要" rel="nofollow">能力比知识更重要</a></li>
</ul>
</li>
</ul>
</li>
</ul>
</div>
</div>
</p>



<h1 id="一次做题笔记">一次做题笔记</h1>

<h2 id="洛谷的一道50000个浮点数之和题目"><a href="https://www.luogu.org/problemnew/show/P2393" rel="nofollow">洛谷的一道50000个浮点数之和题目</a></h2>

<p>内容涉及到long double，小数转unsigned long long</p>



<h3 id="第一次是这么做的">第一次是这么做的</h3>

<p>直接声明两个long double变量， 为什么不是double？ <br>
因为似乎double只有大约17位有效数字， 而long double精度更高</p>

<p>代码是这样的</p>



<pre class="prettyprint"><code class="language-cpp hljs "><span class="hljs-preprocessor">#include &lt;bits/stdc++.h&gt;</span>
<span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;

<span class="hljs-keyword">int</span> main()
{
    <span class="hljs-keyword">long</span> <span class="hljs-keyword">double</span> a, b = <span class="hljs-number">0</span>;
    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%Lf"</span>, &amp;a) != EOF) {
        b += a;
    }
    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%.5Lf"</span>, b);
}</code></pre>

<p>只通过了80%的样例， 为什么会这样呢？  <br>
说实话我也不知道， 精度的原因？</p>



<h3 id="第二次-看了题解之后是这么做的">第二次， 看了题解之后是这么做的</h3>

<p>把每次的a都乘1e6， 结果又除以1e6 <br>
P.S. 因为题目说了每个数据不超过小数后6位（我刚开始遗漏了）</p>

<p>我把乘1e6换成1e5， 1e7…1e16都错了部分样例</p>

<p>这是为什么？我还没搞懂。不是说long double精度够了吗？ 把它的位数提为整数和还是小数有什么不一样吗？</p>

<p>我果然还是孤陋寡闻</p>

<p>这是我的代码</p>



<pre class="prettyprint"><code class="language-cpp hljs "><span class="hljs-preprocessor">#include &lt;bits/stdc++.h&gt;</span>

<span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;

<span class="hljs-keyword">int</span> main()
{
    <span class="hljs-keyword">long</span> <span class="hljs-keyword">double</span> a, b = <span class="hljs-number">0</span>;
    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%Lf"</span>, &amp;a) != EOF) {
        b += a*<span class="hljs-number">1e6</span>;
    }
    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%.5Lf"</span>, b/<span class="hljs-number">1e6</span>);
}</code></pre>

<p>题解中那个人的思路就是这样了， 不过他用了一种递归主函数的方法来读取数据</p>

<p>我觉得值得学习</p>



<pre class="prettyprint"><code class="language-cpp hljs "><span class="hljs-preprocessor">#include&lt;cstdio&gt;</span>
<span class="hljs-keyword">long</span> <span class="hljs-keyword">double</span> a,sum;<span class="hljs-comment">//long double 保证精度没毛病</span>
<span class="hljs-keyword">int</span> main()
{
    <span class="hljs-keyword">if</span>(<span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%Lf"</span>,&amp;a)!=EOF)
    {
        sum+=a*<span class="hljs-number">1000000</span>;<span class="hljs-comment">//去除小数部分，直接乘，变成整数</span>
        main();<span class="hljs-comment">//核心代码 </span>
    }
    <span class="hljs-keyword">else</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%.5Lf"</span>,sum/<span class="hljs-number">1000000</span>);<span class="hljs-comment">//除回来</span>
    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;
}</code></pre>



<h3 id="第三种-还是题解中别人的代码">第三种， 还是题解中别人的代码</h3>

<p>他没用long double， 而是用了unsigned long long， 根据题目提供的数据范围， unsigned long long 刚好够用， 或许这是题目故意卡的数据</p>

<p>思路是： 把读取的每一个double扩大变为unsigned long long， 相加后四舍五入， 外加格式控制</p>

<p>这种思路或者说思维方式值得借鉴</p>



<pre class="prettyprint"><code class="language-cpp hljs "><span class="hljs-preprocessor">#include &lt;bits/stdc++.h&gt;</span>
<span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;
<span class="hljs-keyword">int</span> BASE=<span class="hljs-number">1e6</span>;
<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> sum=<span class="hljs-number">0</span>;
<span class="hljs-keyword">double</span> term;
<span class="hljs-keyword">int</span> main(<span class="hljs-keyword">int</span> argc, <span class="hljs-keyword">char</span> <span class="hljs-keyword">const</span> *argv[])
{
    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%lf"</span>,&amp;term)!=EOF)
    {
        term*=BASE;<span class="hljs-comment">//最多六位小数，转成整数</span>
        sum+=(<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span>)term;
    }
    <span class="hljs-comment">//要求打印5为小数，去掉最后一位</span>
    <span class="hljs-keyword">if</span>(sum%<span class="hljs-number">10</span>&gt;=<span class="hljs-number">5</span>) sum=sum/<span class="hljs-number">10</span>+<span class="hljs-number">1</span>;
    <span class="hljs-keyword">else</span> sum=sum/<span class="hljs-number">10</span>;
    BASE/=<span class="hljs-number">10</span>;
    <span class="hljs-comment">//%05llu让不足五位小数的部分用0补全</span>
    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%llu.%05llu\n"</span>,sum/BASE,sum%BASE);
    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;
}</code></pre>



<h2 id="可见解决问题的方法可以有很多种">可见，解决问题的方法可以有很多种</h2>

<p>其实做题最重要的不是做出题目来， 而是在做题的过程中学会思考，运用所学的知识从各种方面思考解决问题，锻炼自己的思维能力。</p>



<h3 id="能力比知识更重要">能力比知识更重要</h3>            </div>
						<link href="https://csdnimg.cn/release/phoenix/mdeditor/markdown_views-258a4616f7.css" rel="stylesheet">
                      </div>
	</article>