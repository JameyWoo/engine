<article class="baidu_pl">
		<div id="article_content" class="article_content clearfix csdn-tracking-statistics" data-pid="blog"  data-mod=popu_307  data-dsm = "post" >
								<div class="article-copyright">
                  					<svg class="icon" title="CSDN认证原创" aria-hidden="true" style="width:53px; height: 18px; vertical-align: -4px;">
							<use xlink:href="#CSDN_Cert"></use>
					</svg>
                  					
					版权声明：看我干嘛? 你又没打算转载我的博客~					https://blog.csdn.net/wjh2622075127/article/details/80995361				</div>
								<link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/template/css/ck_htmledit_views-f57960eb32.css" />
        								            <div id="content_views" class="markdown_views prism-atom-one-light">
							<!-- flowchart 箭头图标 勿删 -->
							<svg xmlns="http://www.w3.org/2000/svg" style="display: none;"><path stroke-linecap="round" d="M5,0 0,2.5 5,5z" id="raphael-marker-block" style="-webkit-tap-highlight-color: rgba(0, 0, 0, 0);"></path></svg>
							<p>最长公共子序列也是简单的DP问题, 问题描述是: 对两个字符串, 求他们的最长公共子序列的长度, 所谓公共子序列可以不连续.</p>

<blockquote>
  <p>如”sadstory” 和 “adminsorry”, 所长公共子序列为adsory. 长度为6</p>
</blockquote>

<p>分析这道题, 用到经典的二维DP思想, 把大问题化解为子问题. </p>

<p>对S1的每个i,长度序列 和S2的每个j长度序列, 最优解是多少, 大问题的最优解就是基于子问题的最优解.</p>

<blockquote>
  <p>考量这两种情况: <br>
  <strong>1. S1[i] = S2[j], 那么dp[i][j] = dp[i-1][j-1] + 1</strong> <br>
  <strong>2.  S1[i] != S2[j], 那么dp[i][j] = max(dp[i-1][j], dp[i][j-1]).</strong></p>
</blockquote>

<p>问题就是这么简单, 理解了状态转移, 就是理解了这个问题.</p>

<pre class="prettyprint"><code class=" hljs cpp"><span class="hljs-preprocessor">#include &lt;iostream&gt;</span>
<span class="hljs-preprocessor">#include &lt;cstring&gt;</span>
<span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;

<span class="hljs-keyword">int</span> main()
{
    <span class="hljs-built_in">string</span> s1, s2;
    <span class="hljs-keyword">int</span> dp[<span class="hljs-number">105</span>][<span class="hljs-number">105</span>];
    <span class="hljs-built_in">memset</span>(dp, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(dp));
    <span class="hljs-built_in">cin</span> &gt;&gt; s1 &gt;&gt; s2;
    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; (<span class="hljs-keyword">int</span>)s1.size(); ++i) {
        <span class="hljs-keyword">if</span> (s2[<span class="hljs-number">0</span>] == s1[i]) dp[i][<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;
        <span class="hljs-keyword">if</span> (s1[<span class="hljs-number">0</span>] == s2[i]) dp[<span class="hljs-number">0</span>][i] = <span class="hljs-number">1</span>;
    }
    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; <span class="hljs-keyword">int</span>(s1.size()); ++i) {
        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt; <span class="hljs-keyword">int</span>(s2.size()); ++j) {
            <span class="hljs-keyword">if</span> (s1[i] == s2[j]) dp[i][j] = dp[i - <span class="hljs-number">1</span>][j - <span class="hljs-number">1</span>] + <span class="hljs-number">1</span>;
            <span class="hljs-keyword">else</span> dp[i][j] = max(dp[i - <span class="hljs-number">1</span>][j], dp[i][j - <span class="hljs-number">1</span>]);
        }
    }
    <span class="hljs-built_in">cout</span> &lt;&lt; dp[s1.size() - <span class="hljs-number">1</span>][s2.size() - <span class="hljs-number">1</span>];
}
<span class="hljs-comment">/*
sadstory adminsorry
ans = 6
*/</span> </code></pre>            </div>
						<link href="https://csdnimg.cn/release/phoenix/mdeditor/markdown_views-258a4616f7.css" rel="stylesheet">
                      </div>
	</article>