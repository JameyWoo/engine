<article class="baidu_pl">
		<div id="article_content" class="article_content clearfix csdn-tracking-statistics" data-pid="blog"  data-mod=popu_307  data-dsm = "post" >
								<div class="article-copyright">
                  					<svg class="icon" title="CSDN认证原创" aria-hidden="true" style="width:53px; height: 18px; vertical-align: -4px;">
							<use xlink:href="#CSDN_Cert"></use>
					</svg>
                  					
					版权声明：看我干嘛? 你又没打算转载我的博客~					https://blog.csdn.net/wjh2622075127/article/details/81461674				</div>
								<link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/template/css/ck_htmledit_views-f57960eb32.css" />
        								            <div id="content_views" class="markdown_views prism-atom-one-light">
							<!-- flowchart 箭头图标 勿删 -->
							<svg xmlns="http://www.w3.org/2000/svg" style="display: none;"><path stroke-linecap="round" d="M5,0 0,2.5 5,5z" id="raphael-marker-block" style="-webkit-tap-highlight-color: rgba(0, 0, 0, 0);"></path></svg>
							<p>这是我做过的最简单的第三题, 一遍就过了. 按照题目要求的进行字符串转换即可.</p>

<p>要是今年九月份的CCF认证有这么简单就好了.</p>

<p>既然分了区块和行内两种层次, 那么<strong>首先应该划分区块</strong>,然后对区块的内容分别处理</p>

<ol>
<li>先进行区块划分  <br>
输入文本里的空行应该是”“, 空字符, 也没有换行表示什么的. </li>
<li>用一个函数分别对每个区块进行解析 </li>
<li>处理段落</li>
<li>处理标题, 注意字符串拼接, 还是一个一个接比较好. </li>
</ol>

<pre class="prettyprint"><code class=" hljs cpp"><span class="hljs-preprocessor">#include &lt;algorithm&gt;</span>
<span class="hljs-preprocessor">#include &lt;iostream&gt;</span>
<span class="hljs-preprocessor">#include &lt;vector&gt;</span>
<span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;

<span class="hljs-keyword">void</span> em (<span class="hljs-built_in">string</span> &amp;line)
{
    <span class="hljs-built_in">string</span> tmp = <span class="hljs-string">""</span>;
    <span class="hljs-keyword">int</span> cnt = <span class="hljs-number">0</span>;
    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; line.size(); ++i) {
        <span class="hljs-keyword">if</span> (line[i] == <span class="hljs-string">'_'</span>) {
            cnt++;
            <span class="hljs-keyword">if</span> (cnt % <span class="hljs-number">2</span> == <span class="hljs-number">1</span>) {
                tmp += <span class="hljs-string">"&lt;em&gt;"</span>;
            } <span class="hljs-keyword">else</span> tmp += <span class="hljs-string">"&lt;/em&gt;"</span>;
        } <span class="hljs-keyword">else</span> tmp += line[i];
    }
    line = tmp;
}

<span class="hljs-built_in">string</span> turn(<span class="hljs-built_in">string</span> content)
{
    <span class="hljs-built_in">string</span> tmp = <span class="hljs-string">"&lt;a href=\""</span>;
    <span class="hljs-keyword">int</span> i;
    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; content[i] != <span class="hljs-string">'('</span>; ++i) ;
    ++i;
    <span class="hljs-keyword">while</span> (content[i] != <span class="hljs-string">')'</span>) {
        tmp += content[i];
        i++;
    }
    tmp += <span class="hljs-string">"\"&gt;"</span>;
    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">1</span>; content[i] != <span class="hljs-string">']'</span>; ++i) tmp += content[i];
    tmp += <span class="hljs-string">"&lt;/a&gt;"</span>;
    <span class="hljs-keyword">return</span> tmp;
}

<span class="hljs-keyword">void</span> href (<span class="hljs-built_in">string</span> &amp;line)
{
    <span class="hljs-built_in">string</span> tmp, temp;
    <span class="hljs-keyword">bool</span> on = <span class="hljs-keyword">false</span>;
    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; line.size(); ++i) {
        <span class="hljs-keyword">if</span> (line[i] == <span class="hljs-string">'['</span>) on = <span class="hljs-keyword">true</span>;
        <span class="hljs-keyword">if</span> (on) tmp += line[i];
        <span class="hljs-keyword">else</span> temp += line[i]; 
        <span class="hljs-keyword">if</span> (line[i] == <span class="hljs-string">')'</span>) {
            on = <span class="hljs-keyword">false</span>;
            temp += turn(tmp);
            tmp = <span class="hljs-string">""</span>;
        }
    }
    line = temp;
}

<span class="hljs-keyword">void</span> transfer(<span class="hljs-stl_container"><span class="hljs-built_in">vector</span>&lt;<span class="hljs-built_in">string</span>&gt;</span> &amp;block)
{
    <span class="hljs-keyword">if</span> (block[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>] == <span class="hljs-string">'#'</span>) {
        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; block.size(); ++i) {
            <span class="hljs-keyword">int</span> j, cnt = <span class="hljs-number">0</span>;
            <span class="hljs-keyword">for</span> (j = <span class="hljs-number">0</span>; block[i][j] == <span class="hljs-string">'#'</span>; ++j) {
                cnt++;
            }
            <span class="hljs-built_in">string</span> tmp = <span class="hljs-string">"&lt;h"</span>;
            tmp += <span class="hljs-keyword">char</span>(cnt + <span class="hljs-string">'0'</span>);
            tmp += <span class="hljs-string">'&gt;'</span>;
            <span class="hljs-keyword">while</span> (block[i][j] == <span class="hljs-string">' '</span>) ++j;
            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> k = j; k &lt; block[i].size(); ++k)
                tmp += block[i][k];
            tmp += <span class="hljs-string">"&lt;/h"</span>;
            tmp += <span class="hljs-keyword">char</span>(cnt + <span class="hljs-string">'0'</span>);
            tmp += <span class="hljs-string">'&gt;'</span>;
            em(tmp);
            href(tmp);
            block[i] = tmp;
        }
    } <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (block[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>] == <span class="hljs-string">'*'</span>) {
        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; block.size(); ++i) {
            <span class="hljs-keyword">while</span> (block[i][<span class="hljs-number">0</span>] == <span class="hljs-string">' '</span> || block[i][<span class="hljs-number">0</span>] == <span class="hljs-string">'*'</span>) block[i].erase(block[i].begin());
        }
        block[<span class="hljs-number">0</span>] = <span class="hljs-string">"&lt;ul&gt;\n&lt;li&gt;"</span> + block[<span class="hljs-number">0</span>] + <span class="hljs-string">"&lt;/li&gt;"</span>;
        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; block.size(); ++i) {
            block[i] = <span class="hljs-string">"&lt;li&gt;"</span> + block[i] + <span class="hljs-string">"&lt;/li&gt;"</span>;
        }
        block.back() += <span class="hljs-string">"\n&lt;/ul&gt;"</span>;
        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; block.size(); ++i) {
            em(block[i]);
            href(block[i]);
        }
    } <span class="hljs-keyword">else</span> {
        block[<span class="hljs-number">0</span>] = <span class="hljs-string">"&lt;p&gt;"</span> + block[<span class="hljs-number">0</span>];
        block.back() += <span class="hljs-string">"&lt;/p&gt;"</span>;
        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; block.size(); ++i) {
            em(block[i]);
            href(block[i]);
        }
    }
}

<span class="hljs-keyword">void</span> show(<span class="hljs-stl_container"><span class="hljs-built_in">vector</span>&lt;<span class="hljs-built_in">string</span>&gt;</span> blocks[<span class="hljs-number">105</span>], <span class="hljs-keyword">int</span> id)
{
    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;= id; ++i) {
        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; blocks[i].size(); ++j) {
            <span class="hljs-built_in">cout</span> &lt;&lt; blocks[i][j] &lt;&lt; endl;
        }
    }
}

<span class="hljs-keyword">int</span> main()
{
    <span class="hljs-built_in">string</span> line, last;
    <span class="hljs-keyword">bool</span> isfirst = <span class="hljs-keyword">false</span>;
    <span class="hljs-stl_container"><span class="hljs-built_in">vector</span>&lt;<span class="hljs-built_in">string</span>&gt;</span> blocks[<span class="hljs-number">105</span>];
    <span class="hljs-keyword">int</span> id = <span class="hljs-number">0</span>;
    <span class="hljs-keyword">while</span> (getline(<span class="hljs-built_in">cin</span>, line)) {
        <span class="hljs-keyword">if</span> (isfirst == <span class="hljs-keyword">false</span>) {
            <span class="hljs-keyword">if</span> (line != <span class="hljs-string">""</span>) {
                isfirst = <span class="hljs-keyword">true</span>;
            blocks[id].push_back(line);
            }
        } <span class="hljs-keyword">else</span> {
            <span class="hljs-keyword">if</span> (line != <span class="hljs-string">""</span> &amp;&amp; last == <span class="hljs-string">""</span>) {
                blocks[++id].push_back(line);
            } <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (line != <span class="hljs-string">""</span>) blocks[id].push_back(line);
        }
        last = line;
    }
    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;= id; ++i) {
        transfer(blocks[i]);
    } 
    show(blocks, id);
}</code></pre>            </div>
						<link href="https://csdnimg.cn/release/phoenix/mdeditor/markdown_views-258a4616f7.css" rel="stylesheet">
                      </div>
	</article>