<article class="baidu_pl">
		<div id="article_content" class="article_content clearfix csdn-tracking-statistics" data-pid="blog"  data-mod=popu_307  data-dsm = "post" >
								<div class="article-copyright">
                  					<svg class="icon" title="CSDN认证原创" aria-hidden="true" style="width:53px; height: 18px; vertical-align: -4px;">
							<use xlink:href="#CSDN_Cert"></use>
					</svg>
                  					
					版权声明：看我干嘛? 你又没打算转载我的博客~					https://blog.csdn.net/wjh2622075127/article/details/79871235				</div>
								<link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/template/css/ck_htmledit_views-f57960eb32.css" />
        								            <div id="content_views" class="markdown_views prism-atom-one-light">
							<!-- flowchart 箭头图标 勿删 -->
							<svg xmlns="http://www.w3.org/2000/svg" style="display: none;"><path stroke-linecap="round" d="M5,0 0,2.5 5,5z" id="raphael-marker-block" style="-webkit-tap-highlight-color: rgba(0, 0, 0, 0);"></path></svg>
							<p><a href="https://www.luogu.org/problemnew/show/P1328" rel="nofollow">.</a> <br>
石头剪刀布是常见的猜拳游戏：石头胜剪刀，剪刀胜布，布胜石头。如果两个人出拳一样，则不分胜负。在《生活大爆炸》第二季第8 集中出现了一种石头剪刀布的升级版游戏。</p>

<p>升级版游戏在传统的石头剪刀布游戏的基础上，增加了两个新手势：</p>

<p>斯波克：《星际迷航》主角之一。</p>

<p>蜥蜴人：《星际迷航》中的反面角色。</p>

<p>这五种手势的胜负关系如表一所示，表中列出的是甲对乙的游戏结果。</p>

<p>现在，小A 和小B 尝试玩这种升级版的猜拳游戏。已知他们的出拳都是有周期性规律的，但周期长度不一定相等。例如：如果小 A以“石头 - 布- 石头- 剪刀- 蜥蜴人- 斯波克”长度为6 的周期出拳，那么他的出拳序列就是“石头- 布- 石头- 剪刀- 蜥蜴人- 斯波克- 石头- 布- 石头- 剪刀- 蜥蜴人- 斯波克- ……”，而如果小B 以“剪刀- 石头- 布- 斯波克- 蜥蜴人”长度为5 的周期出拳，那么他出拳的序列就是“剪刀- 石头- 布- 斯波克- 蜥蜴人- 剪刀- 石头- 布-斯波克- 蜥蜴人- ……”</p>

<p>已知小A 和小B 一共进行N 次猜拳。每一次赢的人得1 分，输的得0 分；平局两人都得0 分。现请你统计N 次猜拳结束之后两人的得分。</p>

<p>输入输出格式 <br>
输入格式： <br>
输入文件名为rps.in。</p>

<p>第一行包含三个整数：N ，NA，NB，分别表示共进行 N 次猜拳、小 A 出拳的周期长度，小B 出拳的周期长度。数与数之间以一个空格分隔。</p>

<p>第二行包含NA个整数，表示小 A 出拳的规律，第三行包含NB个整数，表示小 B 出拳的规律。其中，0 表示“剪刀”，1 表示“石头”，2 表示“布”，3 表示“蜥蜴人”， 4 表示“斯波克”。数与数之间以一个空格分隔。</p>

<p>输出格式： <br>
输出文件名为rps.out 。</p>

<p>输出一行， 包含两个整数，以一个空格分隔，分别表示小A 、小B 的得分。</p>

<pre class="prettyprint"><code class=" hljs cpp"><span class="hljs-preprocessor">#include &lt;iostream&gt;</span>
<span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;

<span class="hljs-keyword">int</span> main()
{
    <span class="hljs-keyword">int</span> n, na, nb, a[<span class="hljs-number">250</span>], b[<span class="hljs-number">250</span>];
    <span class="hljs-built_in">cin</span> &gt;&gt; n &gt;&gt; na &gt;&gt; nb;
    <span class="hljs-keyword">int</span> rule[<span class="hljs-number">5</span>][<span class="hljs-number">5</span>] = {};
    rule[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>] = -<span class="hljs-number">1</span>, rule[<span class="hljs-number">0</span>][<span class="hljs-number">2</span>] = <span class="hljs-number">1</span>, rule[<span class="hljs-number">0</span>][<span class="hljs-number">3</span>] = <span class="hljs-number">1</span>, rule[<span class="hljs-number">0</span>][<span class="hljs-number">4</span>] = -<span class="hljs-number">1</span>;
    rule[<span class="hljs-number">1</span>][<span class="hljs-number">2</span>] = -<span class="hljs-number">1</span>, rule[<span class="hljs-number">1</span>][<span class="hljs-number">3</span>] = <span class="hljs-number">1</span>, rule[<span class="hljs-number">1</span>][<span class="hljs-number">4</span>] = -<span class="hljs-number">1</span>;
    rule[<span class="hljs-number">2</span>][<span class="hljs-number">3</span>] = -<span class="hljs-number">1</span>, rule[<span class="hljs-number">2</span>][<span class="hljs-number">4</span>] = <span class="hljs-number">1</span>;
    rule[<span class="hljs-number">3</span>][<span class="hljs-number">4</span>] = <span class="hljs-number">1</span>;
    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; ++i) {
        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; i; ++j) {
            rule[i][j] = -rule[j][i];
        }
    }
    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; na; ++i) {
        <span class="hljs-built_in">cin</span> &gt;&gt; a[i];
    }
    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; nb; ++j) {
        <span class="hljs-built_in">cin</span> &gt;&gt; b[j];
    }
    <span class="hljs-keyword">int</span> t = <span class="hljs-number">0</span>;
    <span class="hljs-keyword">int</span> aa = <span class="hljs-number">0</span>, bb = <span class="hljs-number">0</span>;
    <span class="hljs-keyword">while</span>(t != n) {
        <span class="hljs-keyword">if</span>(rule[a[t%na]][b[t%nb]] == <span class="hljs-number">1</span>) {
            aa++;
        }
        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(rule[a[t%na]][b[t%nb]] == -<span class="hljs-number">1</span>) {
            bb++;
        }
        t++;
    }
    <span class="hljs-built_in">cout</span> &lt;&lt; aa &lt;&lt; <span class="hljs-string">' '</span> &lt;&lt; bb;
}</code></pre>            </div>
						<link href="https://csdnimg.cn/release/phoenix/mdeditor/markdown_views-258a4616f7.css" rel="stylesheet">
                      </div>
	</article>