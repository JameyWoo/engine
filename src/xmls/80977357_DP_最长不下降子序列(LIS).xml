<article class="baidu_pl">
		<div id="article_content" class="article_content clearfix csdn-tracking-statistics" data-pid="blog"  data-mod=popu_307  data-dsm = "post" >
								<div class="article-copyright">
                  					<svg class="icon" title="CSDN认证原创" aria-hidden="true" style="width:53px; height: 18px; vertical-align: -4px;">
							<use xlink:href="#CSDN_Cert"></use>
					</svg>
                  					
					版权声明：看我干嘛? 你又没打算转载我的博客~					https://blog.csdn.net/wjh2622075127/article/details/80977357				</div>
								<link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/template/css/ck_htmledit_views-f57960eb32.css" />
        								            <div id="content_views" class="markdown_views prism-atom-one-light">
							<!-- flowchart 箭头图标 勿删 -->
							<svg xmlns="http://www.w3.org/2000/svg" style="display: none;"><path stroke-linecap="round" d="M5,0 0,2.5 5,5z" id="raphael-marker-block" style="-webkit-tap-highlight-color: rgba(0, 0, 0, 0);"></path></svg>
							<p><div class="toc"><div class="toc">
<ul>
<li><ul>
<li><ul>
<li><a href="#序言" rel="nofollow">序言</a></li>
<li><a href="#一-最容易想到的最暴力的方法" rel="nofollow">一. 最容易想到的最暴力的方法</a></li>
<li><a href="#二-第二种方法是on2的dp方法" rel="nofollow">二. 第二种方法是O(n^2)的DP方法</a></li>
<li><a href="#三-onlogn方法-维护单调数组" rel="nofollow">三. O(nlogn)方法, 维护单调数组</a></li>
</ul>
</li>
</ul>
</li>
</ul>
</div>
</div>
</p>

<h3 id="序言">序言</h3>

<p>同类的问题还有<em>“最长上升子序列”, “最长下降子序列”, …</em></p>

<p>他们的不同就在于<strong>定义的core规则不同</strong>, 有的是&gt;=, 有的是&gt;, 有的是&lt;</p>

<p>由此启发, 我们可以在解决其他的问题, <strong>不一定是比较数的大小的问题里面抽象出这种模型.</strong></p>

<p>下面介绍这种动态规划入门都会介绍的问题的思路. </p>

<p>首先我们从头开始分析这个问题.</p>



<h3 id="一-最容易想到的最暴力的方法">一. 最容易想到的最暴力的方法</h3>

<p>对这个序列中的每一个数的”有”和”无”分两种情况讨论. 代码实现上就是递归.</p>

<p><strong>时间复杂度就是O(2^n)</strong></p>

<p>代码实现上较为简单. 不展示</p>



<h3 id="二-第二种方法是on2的dp方法">二. 第二种方法是O(n^2)的DP方法</h3>

<p><strong>动态规划的问题是无后效性的, 每个问题都可以分解为更小的子问题, 从而求解.</strong></p>

<p>这道题也不例外.</p>

<p>这个序列的每一个数为止都有一个解, 作为子问题的解. 后面的问题的解就是从这些子问题的最优解继承过来的.</p>

<p>so, 给这个序列的解建立数组dp[n], 0 - n分别是截止到Ai的解.</p>

<blockquote>
  <p>当下一个数要加入来的时候, 有两种情况</p>
  
  <ol>
  <li><p>前面的数都比当前数更大, 因此以这个数为止的最长不下降子序列的长度就是1. 遍历到第一个数的情况也包含在内.</p></li>
  <li><p>前面的数有不比当前数大的, 那么这个数的结果dp[i] = max(dp[i], dp[j] + 1). 这个过程遍历前面所有数的dp[j]进行比较.</p></li>
  </ol>
  
  <p><strong>最后的答案就是所有dp[i]里面的最大值.</strong></p>
</blockquote>

<p>这种方法的<strong>时间复杂度是O(n^2)</strong>, 可以看到相比于前面暴力递归的方法有了极大的进步.</p>

<p>代码通过样例, 但不一定能过题, 请谨慎使用.</p>

<pre class="prettyprint"><code class=" hljs cpp"><span class="hljs-preprocessor">#include &lt;iostream&gt;</span>
<span class="hljs-preprocessor">#include &lt;vector&gt;</span>
<span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;

<span class="hljs-keyword">int</span> main()
{
    <span class="hljs-keyword">int</span> n, x;
    <span class="hljs-stl_container"><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;</span> v;
    <span class="hljs-built_in">cin</span> &gt;&gt; n;
    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; ++i) {
        <span class="hljs-built_in">cin</span> &gt;&gt; x;
        v.push_back(x);
    }
    <span class="hljs-keyword">int</span> dp[(<span class="hljs-keyword">int</span>)v.size()] = {<span class="hljs-number">1</span>}, ans = <span class="hljs-number">1</span>;
    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; (<span class="hljs-keyword">int</span>)v.size(); ++i) {
        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; i; ++j) {
            <span class="hljs-keyword">if</span> (v[i] &gt;= v[j]) dp[i] = max(dp[i], dp[j] + <span class="hljs-number">1</span>); <span class="hljs-comment">// 状态转移方程</span>
        }
        ans = max(ans, dp[i]);
    }
    <span class="hljs-built_in">cout</span> &lt;&lt; ans;
}
<span class="hljs-comment">/*
8
1 2 3 -9 3 9 0 11
*/</span></code></pre>



<h3 id="三-onlogn方法-维护单调数组">三. O(nlogn)方法, 维护单调数组</h3>

<p>这个方法也是DP方法</p>

<p>时间复杂度可以从O(n^2)降到O(n log n).</p>

<p><strong>我们从最长上升子序列的角度来探讨</strong></p>

<p>假设对一个序列n[1…9] = {2 1 5 3 6 4 8 9 7}, 维护一个单调数组, 使得这个数组为最长上升子序列. 设这个数组为d[ ].</p>

<p>对n[1] = 2, 使得d[1] = 2;</p>

<p>对n[2] = 1, 因为1比2小, 所以修改d[1]的值, 使其为1</p>

<p>对n[3] = 5, 5比1大, 所以len++, d[2] = 5</p>

<p>对n[4] = 3, 3比1大比5小, 所以替换掉5, 使d[2] = 3</p>

<p>对n[5] = 6, 6比d[2]大, 所以len++, d[3] = 6</p>

<p>对n[6] = 4, 4比3大比6小, 所以替换掉6, 使d[3] = 4</p>

<p>对n[7] = 8, 8比4大, 所以len++, 使d[4] = 8</p>

<p>对n[8] = 9, 9比8大, 所以len++, 使d[5] = 9</p>

<p>对n[9] = 7, 7比4大比8小, 所以替换掉8, 使d[4] = 7.</p>

<p>至此这个序列遍历完了, 最小的长度也出来了. 最后的序列是1 3 4 7 9, len = 5</p>

<p>仔细琢磨会觉得, <strong>如最后一步操作, 为什么后面的7反而到他前面的8, 9的前面去了.</strong> 其实仔细一想并无问题, 因为即使7出现在前面, 它并不影响最终结果, <strong>因为我们已经得出最后结果就是len</strong>, 而以7为结尾的最长序列在该题中是len - 1, 如果后面还有序列, <strong>那么这里把7替换掉8会使得当前状态更优, 因为这样的修改是不会改变当前结果的, 但是确实后续最优状态的基础. 而这道题的动态规划思想就是这样, 不断地获取最优状态.</strong></p>

<p>经过前面的分析我们也许会发现, 这个DP的过程无法存储中间结果, 也就是说<strong>我们只能知道最长的子序列是多长, 而无法得到是哪个序列.</strong> 可谓是有利有弊.</p>

<p>利用我们维护的数组的单调性, 我们可以用二分法查找这个比当前数更大数的位置, 从而方便的实现替换.</p>

<p>所以时间复杂度为O(n log n).</p>

<pre class="prettyprint"><code class=" hljs cpp"><span class="hljs-preprocessor">#include &lt;iostream&gt;</span>
<span class="hljs-preprocessor">#include &lt;algorithm&gt;</span>
<span class="hljs-preprocessor">#include &lt;vector&gt;</span>
<span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;

<span class="hljs-keyword">int</span> main()
{
    <span class="hljs-keyword">int</span> n, x;
    <span class="hljs-stl_container"><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;</span> v, vec;
    <span class="hljs-built_in">cin</span> &gt;&gt; n;
    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; ++i) {
        <span class="hljs-built_in">cin</span> &gt;&gt; x;
        v.push_back(x);
    }
    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; (<span class="hljs-keyword">int</span>)v.size(); ++i) {
        <span class="hljs-keyword">if</span> (i == <span class="hljs-number">0</span>) vec.push_back(v[<span class="hljs-number">0</span>]);
        <span class="hljs-keyword">else</span> {
            <span class="hljs-keyword">if</span> (v[i] &gt;= vec[vec.size() - <span class="hljs-number">1</span>]) vec.push_back(v[i]);
            <span class="hljs-keyword">else</span> *upper_bound(vec.begin(), vec.end(), v[i]) = v[i];
        }
    }
    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; (<span class="hljs-keyword">int</span>)vec.size(); ++i) {
        <span class="hljs-built_in">cout</span> &lt;&lt; vec[i] &lt;&lt; <span class="hljs-string">' '</span>;
    }
    <span class="hljs-built_in">cout</span> &lt;&lt; endl;
    <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">"len == "</span> &lt;&lt; vec.size() &lt;&lt; endl;
}

<span class="hljs-comment">/*
9
2 1 5 3 6 4 8 9 7
*/</span></code></pre>            </div>
						<link href="https://csdnimg.cn/release/phoenix/mdeditor/markdown_views-258a4616f7.css" rel="stylesheet">
                      </div>
	</article>