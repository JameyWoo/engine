<article class="baidu_pl">
		<div id="article_content" class="article_content clearfix csdn-tracking-statistics" data-pid="blog"  data-mod=popu_307  data-dsm = "post" >
								<div class="article-copyright">
                  					<svg class="icon" title="CSDN认证原创" aria-hidden="true" style="width:53px; height: 18px; vertical-align: -4px;">
							<use xlink:href="#CSDN_Cert"></use>
					</svg>
                  					
					版权声明：看我干嘛? 你又没打算转载我的博客~					https://blog.csdn.net/wjh2622075127/article/details/79052781				</div>
								<link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/template/css/ck_htmledit_views-f57960eb32.css" />
        								            <div id="content_views" class="markdown_views prism-atom-one-light">
							<!-- flowchart 箭头图标 勿删 -->
							<svg xmlns="http://www.w3.org/2000/svg" style="display: none;"><path stroke-linecap="round" d="M5,0 0,2.5 5,5z" id="raphael-marker-block" style="-webkit-tap-highlight-color: rgba(0, 0, 0, 0);"></path></svg>
							<p>此博客的内容有:</p>

<blockquote>
  <p>异常处理 <br>
  C++while(cin &gt;&gt; str)在Python中的形式 <br>
  字符的值 <br>
  导入模块 <br>
  <a href="http://blog.csdn.net/arbel/article/details/7957782" rel="nofollow">Python的编码注释</a> <br>
  <a href="https://www.cnblogs.com/scofi/p/4867851.html" rel="nofollow">头部#!/usr/bin/python</a></p>
</blockquote>

<p><strong>KeyboardInterrupt</strong> : 用户中断执行(通常是输入Ctrl+C) <br>
认识它是因为我想解决Python中while( cin &gt;&gt; s ) 的操作, 如何让循环程序停止 <br>
<strong>EOFError</strong>  :     没有内建输入,到达EOF 标记 <br>
补充, 看样子也许它是类似文件结束符? <br>
这两块是包含在<a href="http://www.runoob.com/python/python-exceptions.html" rel="nofollow">Python异常处理</a>中的, 语法形式和C++类似 <br>
追加  <strong><a href="http://www.runoob.com/python/python-pass-statement.html" rel="nofollow">pass语句</a></strong> <br>
pass是空语句，是为了保持程序结构的完整性。 <br>
pass 不做任何事情，一般用做占位语句。 <br>
所以一个大概的while( cin &gt;&gt; s ) 可以写作这样</p>

<pre class="prettyprint"><code class=" hljs python"><span class="hljs-keyword">try</span>:
    <span class="hljs-keyword">while</span> <span class="hljs-keyword">True</span>:
        str = input()
        print(str)
<span class="hljs-keyword">except</span> KeyboardInterrupt:
    <span class="hljs-keyword">pass</span></code></pre>

<p>上面的程序在用户按下Ctrl + C时停止</p>

<pre class="prettyprint"><code class=" hljs python"><span class="hljs-keyword">try</span>:
    <span class="hljs-keyword">while</span> <span class="hljs-keyword">True</span>:
        str = input()
        print(str)
<span class="hljs-keyword">except</span> EOFError:
    <span class="hljs-keyword">pass</span></code></pre>

<p>上面的程序大概是输入文件结束时会停止</p>

<p>网上有资料介绍这样的:</p>



<pre class="prettyprint"><code class=" hljs python"><span class="hljs-keyword">import</span> sys
<span class="hljs-keyword">for</span> str <span class="hljs-keyword">in</span> sys.stdin:
    <span class="hljs-keyword">pass</span></code></pre>

<p>不很了解, 这似乎是一个for的while(cin) <br>
更好的解决方案还不知道</p>

<p>拿出题目吧:</p>

<blockquote>
  <p>某系统内部的数据表示为26进制，其中0-25分别由a-z表示。如ba=1*26+0*1=26,efc=4*26*26+5*26+2*1=2836。请设计一个程序，输入若干个26进制的数，输出对应的10进制数。 <br>
  样例输入：ba efc <br>
  样例输出：26 2836</p>
</blockquote>

<p>如题, 按照C++移植过来的语法知识不足以完成此题 <br>
因为Python不可以直接对字符进行运算, 需要转换为ASCII值 <br>
有<a href="http://blog.csdn.net/he_jian1/article/details/40983305" rel="nofollow"><strong>chr()、unichr()和ord()</strong></a></p>

<blockquote>
  <p>char(int) int的值范围为0~255, 分别对应一个字符 ord(‘a’) 则是字符得到数字 unichr()与chr()类似, <br>
  不过是对于Unicode对象的</p>
</blockquote>

<p>此处用ord()</p>

<pre class="prettyprint"><code class=" hljs livecodeserver"><span class="hljs-built_in">num</span> = <span class="hljs-number">0</span>
<span class="hljs-keyword">try</span>:
    <span class="hljs-keyword">while</span> True:
        str = input(<span class="hljs-string">"请输入字符串\n"</span>)
        <span class="hljs-keyword">for</span> i <span class="hljs-operator">in</span> str:
            <span class="hljs-built_in">num</span> = <span class="hljs-built_in">num</span>*<span class="hljs-number">26</span> + ord(i) - <span class="hljs-number">97</span>
        print(<span class="hljs-built_in">num</span>)
        <span class="hljs-built_in">num</span> = <span class="hljs-number">0</span>
except EOFError:
    pass</code></pre>

<p>至此, 一个简单的C++向Python转换就结束了</p>

<p>上面提到了Python的模块(Module), 下面介绍导入的方法 <br>
以从sys中导入stdin为例</p>

<pre class="prettyprint"><code class=" hljs python"><span class="hljs-keyword">import</span> sys
<span class="hljs-keyword">for</span> str <span class="hljs-keyword">in</span> sys.stdin:
    print(str)

<span class="hljs-keyword">import</span> sys <span class="hljs-keyword">as</span> s
<span class="hljs-keyword">for</span> str <span class="hljs-keyword">in</span> s.stdin:
    print(str)

<span class="hljs-keyword">from</span> sys <span class="hljs-keyword">import</span> stdin
<span class="hljs-keyword">for</span> str <span class="hljs-keyword">in</span> stdin:
    print(str)

<span class="hljs-keyword">from</span> sys <span class="hljs-keyword">import</span> * //通配符, 最不推荐的方式
<span class="hljs-keyword">for</span> str <span class="hljs-keyword">in</span> stdin:
    print(str)</code></pre>            </div>
						<link href="https://csdnimg.cn/release/phoenix/mdeditor/markdown_views-258a4616f7.css" rel="stylesheet">
                      </div>
	</article>