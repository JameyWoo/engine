<article class="baidu_pl">
		<div id="article_content" class="article_content clearfix csdn-tracking-statistics" data-pid="blog"  data-mod=popu_307  data-dsm = "post" >
								<div class="article-copyright">
                  					<svg class="icon" title="CSDN认证原创" aria-hidden="true" style="width:53px; height: 18px; vertical-align: -4px;">
							<use xlink:href="#CSDN_Cert"></use>
					</svg>
                  					
					版权声明：看我干嘛? 你又没打算转载我的博客~					https://blog.csdn.net/wjh2622075127/article/details/81587859				</div>
								<link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/template/css/ck_htmledit_views-f57960eb32.css" />
        								            <div id="content_views" class="markdown_views prism-atom-one-light">
							<!-- flowchart 箭头图标 勿删 -->
							<svg xmlns="http://www.w3.org/2000/svg" style="display: none;"><path stroke-linecap="round" d="M5,0 0,2.5 5,5z" id="raphael-marker-block" style="-webkit-tap-highlight-color: rgba(0, 0, 0, 0);"></path></svg>
							<p>CCF 201503-5 最小花费 <a href="http://118.190.20.162/view.page?gpid=T23" rel="nofollow">传送门</a></p>

<p>毕竟是个蒟蒻, 所以这CCF-CSP第五题也只能用用O(nm)的算法暴力去解了, 而且常数还TM很大. 得了30分, 也算是出题人放了个小水.</p>

<p>思路就是:</p>

<p><strong>用DFS找到两端点的路径, 同时存储边的长度. O(n)</strong></p>

<p><strong>对每一条路径点判断物价大小,维持当前最小的物价,购买尽可能多的粮食直到可以走到更小的物价处</strong></p>

<p><strong>注意用<code>long long</code>, 不然你只能得个10分咧</strong></p>

<p>看大佬的满分代码. <a href="http://www.mamicode.com/info-detail-1398985.html" rel="nofollow">点俺点俺</a></p>

<p><del>好歹是第五题, 贴出<code>30</code>分代码也不丢人是不</del></p>

<pre class="prettyprint"><code class=" hljs cpp"><span class="hljs-preprocessor">#include &lt;algorithm&gt;</span>
<span class="hljs-preprocessor">#include &lt;iostream&gt;</span>
<span class="hljs-preprocessor">#include &lt;cstring&gt;</span>
<span class="hljs-preprocessor">#include &lt;vector&gt;</span>
<span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;

<span class="hljs-keyword">struct</span> Node {
    <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> from, to, cost;
    Node (<span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> f, <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> t, <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> c) : from(f), to(t), cost(c) {}
};

<span class="hljs-keyword">const</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> maxn = <span class="hljs-number">100000</span> + <span class="hljs-number">5</span>;
<span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> n, m, cost[maxn];
<span class="hljs-stl_container"><span class="hljs-built_in">vector</span>&lt;Node&gt;</span> G[maxn];
<span class="hljs-stl_container"><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span>&gt;</span> Path, path, Dis, dis; <span class="hljs-comment">// 真假path</span>
<span class="hljs-keyword">bool</span> vis[maxn];

<span class="hljs-keyword">void</span> DFS(<span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> from, <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> to)
{
    <span class="hljs-keyword">if</span> (from == to) {
        Path = path;
        Dis = dis;
        <span class="hljs-keyword">return</span>;
    }
    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> i = <span class="hljs-number">0</span>, v, d; i &lt; G[from].size(); ++i) {
        v = G[from][i].to;
        d = G[from][i].cost;
        <span class="hljs-keyword">if</span> (vis[v]) <span class="hljs-keyword">continue</span>;
        vis[v] = <span class="hljs-keyword">true</span>;
        path.push_back(v);
        dis.push_back(d);
        DFS(v, to);
        path.pop_back();
        dis.pop_back();
    }
}

<span class="hljs-keyword">int</span> main()
{
    ios::sync_with_stdio(<span class="hljs-keyword">false</span>);
    <span class="hljs-built_in">cin</span> &gt;&gt; n &gt;&gt; m;
    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)
        <span class="hljs-built_in">cin</span> &gt;&gt; cost[i];
    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> i = <span class="hljs-number">1</span>, u, v, c; i &lt; n; ++i) {
        <span class="hljs-built_in">cin</span> &gt;&gt; u &gt;&gt; v &gt;&gt; c;
        G[u].push_back(Node(u, v, c));
        G[v].push_back(Node(v, u, c));
    }
    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> i = <span class="hljs-number">0</span>, from, to; i &lt; m; ++i) {
        <span class="hljs-built_in">cin</span> &gt;&gt; from &gt;&gt; to;
        <span class="hljs-built_in">memset</span>(vis, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(vis));
        path.clear();
        dis.clear();
        path.push_back(from);
        vis[from] = <span class="hljs-keyword">true</span>;
        DFS(from, to);
        <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> _min = cost[from], <span class="hljs-built_in">cos</span> = <span class="hljs-number">0</span>, ans = <span class="hljs-number">0</span>;
        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> i = <span class="hljs-number">0</span>; i &lt; Path.size() - <span class="hljs-number">1</span>; ++i) {
            <span class="hljs-keyword">if</span> (cost[Path[i]] &lt; _min) {
                ans += <span class="hljs-built_in">cos</span>*_min;
                <span class="hljs-built_in">cos</span> = <span class="hljs-number">0</span>;
                _min = cost[Path[i]];
            }
            <span class="hljs-built_in">cos</span> += Dis[i];
        }
        ans += _min*<span class="hljs-built_in">cos</span>;
        <span class="hljs-built_in">cout</span> &lt;&lt; ans &lt;&lt; endl;
    }
}</code></pre>            </div>
						<link href="https://csdnimg.cn/release/phoenix/mdeditor/markdown_views-258a4616f7.css" rel="stylesheet">
                      </div>
	</article>