<article class="baidu_pl">
		<div id="article_content" class="article_content clearfix csdn-tracking-statistics" data-pid="blog"  data-mod=popu_307  data-dsm = "post" >
								<div class="article-copyright">
                  					<svg class="icon" title="CSDN认证原创" aria-hidden="true" style="width:53px; height: 18px; vertical-align: -4px;">
							<use xlink:href="#CSDN_Cert"></use>
					</svg>
                  					
					版权声明：看我干嘛? 你又没打算转载我的博客~					https://blog.csdn.net/wjh2622075127/article/details/79008192				</div>
								<link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/template/css/ck_htmledit_views-f57960eb32.css" />
        								            <div id="content_views" class="markdown_views prism-atom-one-light">
							<!-- flowchart 箭头图标 勿删 -->
							<svg xmlns="http://www.w3.org/2000/svg" style="display: none;"><path stroke-linecap="round" d="M5,0 0,2.5 5,5z" id="raphael-marker-block" style="-webkit-tap-highlight-color: rgba(0, 0, 0, 0);"></path></svg>
							<p>　　我今天晚上复习Ｃ＋＋类的用法，在使用友元重载双目运算符＋的时候，出现了一个诡异的错误．百思不得其解，专门重写一个类进行测试，最后发现了原因.猛然想起我之前也犯过这样的错误,以为经典,故记之． <br>
　　奉上错误代码：</p>

<pre class="prettyprint"><code class=" hljs cpp"><span class="hljs-preprocessor">#include &lt;iostream&gt;</span>
<span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;

<span class="hljs-keyword">class</span> Complex { <span class="hljs-comment">//一个复数类 </span>
    <span class="hljs-keyword">public</span>:
        Complex () {} <span class="hljs-comment">//无参构造 </span>
        Complex (<span class="hljs-keyword">int</span> a, <span class="hljs-keyword">int</span> b) { <span class="hljs-comment">//有参构造 </span>
            real = a;
            imag = b;
        }
        <span class="hljs-keyword">friend</span> Complex <span class="hljs-keyword">operator</span> + (<span class="hljs-keyword">int</span> &amp;, Complex &amp;); <span class="hljs-comment">//友元重载+ </span>

    <span class="hljs-keyword">private</span>:
        <span class="hljs-keyword">int</span> real, imag;
};

Complex <span class="hljs-keyword">operator</span> + (<span class="hljs-keyword">int</span> &amp;a, Complex &amp;c) <span class="hljs-comment">//友元重载+ </span>
{
    <span class="hljs-keyword">return</span> Complex (a+c.real, c.imag);
}

<span class="hljs-keyword">int</span> main( )
{

    Complex c(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>);
    Complex d = <span class="hljs-number">1</span> + c; <span class="hljs-comment">//使用重载+函数 </span>
}</code></pre>

<p>　　这是一个简单的Ｃｏｍｐｌｅｘ复数类，除构造函数外只有一个友元重载＋函数．这个函数有个错误．</p>

<p>报错是这样的: <br>
    [Error] no match for ‘operator+’ (operand types are ‘int’ and ‘Complex’) <br>
    大意是没有”operator+”这个函数.我觉得很奇怪,怎么会没有呢?我这里明明写了呀.一番纠结,挣扎,终于发现右边提示的类型:int, Complex.猛然想起此前犯过这样的错误. <br>
    如何?这里不能用引用! <br>
    也就是说,函数的形参类型应该是int而非int &amp;,因为,对int型变量n来说:</p>



<pre class="prettyprint"><code class=" hljs cs">Complex c(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>);
    <span class="hljs-comment">//Complex d = 1 + c; //使用重载+函数</span>
    <span class="hljs-keyword">int</span> n = <span class="hljs-number">1</span>;
    Complex d = n + c; <span class="hljs-comment">//正确</span></code></pre>

<p>是正确的,n可以引用,因为它是一个变量,有地址.它传递过去的类型可以是int, 也可以是int &amp;. <br>
而前面的呢?常数1是没有地址的,所以它传递过去的类型只能是int, 而不能是int &amp;.常数是没有地址的.同const型常量.</p>

<p>所以,这个”诡异”的错误就这样解决了.</p>

<p>然而,从这个错误中,我们能学到什么?</p>

<p>首先:我在变量这一块的基础知识并不扎实, 在更早之前(第一次出现这样的错误之前), 我并没有多深刻地理解int与int &amp;的区别.这让我回想起了此前我出现过好几次同样”诡异”的错误,那就是:</p>

<pre class="prettyprint"><code class=" hljs makefile">double a;
int b, c;
<span class="hljs-constant">b</span> = 1;
<span class="hljs-constant">c</span> = 3;
<span class="hljs-constant">a</span> = b/c;</code></pre>

<p>类似于这种形式的不同类型变量之间的运算. 此式的结果是a = 0, 因为右边是两个int型变量计算, 还未涉及到double, 该消的不该消的它都消了. 这个小小的错误曾让我卡在一道题目上一个多小时.</p>

<p>其次:在这个重载函数中我为什么要用int &amp;呢?为什么不直接用int ?大概是我印象中有过类似在类中某些函数一般是用引用, 而在这个函数中潜意识的收到影响了.值得反思的是:我写这么一个非常规类型是,并没有明确思考我为什么要这样写. 而是稀里糊涂, 脑子里有一点印象就写上了, 结果犯了这么一个错误.不过这是好事, 遇见错误是好事, 倘若我从一开始就直接使用int, 那我就不会和这错误在次相遇. 塞翁失马-焉知非福.</p>            </div>
						<link href="https://csdnimg.cn/release/phoenix/mdeditor/markdown_views-258a4616f7.css" rel="stylesheet">
                      </div>
	</article>