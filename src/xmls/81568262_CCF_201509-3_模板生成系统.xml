<article class="baidu_pl">
		<div id="article_content" class="article_content clearfix csdn-tracking-statistics" data-pid="blog"  data-mod=popu_307  data-dsm = "post" >
								<div class="article-copyright">
                  					<svg class="icon" title="CSDN认证原创" aria-hidden="true" style="width:53px; height: 18px; vertical-align: -4px;">
							<use xlink:href="#CSDN_Cert"></use>
					</svg>
                  					
					版权声明：看我干嘛? 你又没打算转载我的博客~					https://blog.csdn.net/wjh2622075127/article/details/81568262				</div>
								<link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/template/css/ck_htmledit_views-f57960eb32.css" />
        								            <div id="content_views" class="markdown_views prism-atom-one-light">
							<!-- flowchart 箭头图标 勿删 -->
							<svg xmlns="http://www.w3.org/2000/svg" style="display: none;"><path stroke-linecap="round" d="M5,0 0,2.5 5,5z" id="raphael-marker-block" style="-webkit-tap-highlight-color: rgba(0, 0, 0, 0);"></path></svg>
							<p>CCF 201509-3 模板生成系统 <a href="http://118.190.20.162/view.page?gpid=T30" rel="nofollow">传送门</a></p>

<p>一道还算简单的模板题, 不过最开始写的版本居然超时了?!!! 只得了90分. 然后做了一个优化, 还是超时, 又做了一个优化(其实是填坑), 终于不超时了. </p>

<p>但是我发现其实那个超时不是程序太慢的原因, 而是题目的一个坑! <strong>专门用来卡我的这种做法的! </strong></p>

<p>我的做法是对每一行, 查询满足<code>{{ name }}</code>格式的字符串, 然后用已知的键值对来替换掉. 每次只替换一对, 迭代着替换直到没有. <strong>但是, 在一种情况下, 这种迭代是无止境的! 那就是键和值都是<code>{{ name }}</code>的情况!!!</strong> <strong>题目特意强调了一下内容的ASCII码范围: <code>ASCII 码范围 32, 33, 35-126</code>,  而空格的<code>ASCII码</code>就是<code>32</code>!!!  左大括号和右大括号的ASCII码刚好是<code>123</code>和<code>125</code>!!! 所以懂的人秒懂这是在提示, 而不懂的人怕是轻易忽略了.</strong></p>

<p><strong><em>正确的解法是一次性地分隔出这些<code>{{ name }}</code>, 又快又准.</em></strong></p>

<p>对了, 另一个优化是把键值对从<code>pair</code>改成了<code>map</code>, 本来就应该这样好伐!</p>

<p>100分代码.</p>

<pre class="prettyprint"><code class=" hljs cpp"><span class="hljs-preprocessor">#include &lt;algorithm&gt;</span>
<span class="hljs-preprocessor">#include &lt;iostream&gt;</span>
<span class="hljs-preprocessor">#include &lt;vector&gt;</span>
<span class="hljs-preprocessor">#include &lt;map&gt;</span>
<span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;

<span class="hljs-keyword">void</span> replace(<span class="hljs-built_in">string</span> &amp;str, <span class="hljs-stl_container"><span class="hljs-built_in">vector</span>&lt;<span class="hljs-built_in">string</span>&gt;</span> &amp;<span class="hljs-built_in">list</span>, <span class="hljs-stl_container"><span class="hljs-built_in">vector</span>&lt;<span class="hljs-built_in">string</span>&gt;</span> &amp;pattern)
{
    <span class="hljs-built_in">string</span> tmp, patt;
    <span class="hljs-keyword">int</span> i, last;
    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; str.size(); ++i) {
        <span class="hljs-keyword">if</span> (str[i] == <span class="hljs-string">'{'</span> &amp;&amp; str[i + <span class="hljs-number">1</span>] == <span class="hljs-string">'{'</span>) {
            <span class="hljs-built_in">list</span>.push_back(tmp);
            tmp = <span class="hljs-string">""</span>;
            i = i + <span class="hljs-number">3</span>;
            patt = <span class="hljs-string">"{{ "</span>;
            <span class="hljs-keyword">while</span> (!(str[i] == <span class="hljs-string">'}'</span> &amp;&amp; str[i] == <span class="hljs-string">'}'</span>)) {
                patt += str[i];
                i++;
            }
            i++;
            last = i + <span class="hljs-number">1</span>;
            patt += <span class="hljs-string">"}}"</span>;
            pattern.push_back(patt);
        } <span class="hljs-keyword">else</span> tmp += str[i];
    }
    tmp = <span class="hljs-string">""</span>;
    <span class="hljs-keyword">for</span> (i = last; i &lt; str.size(); ++i) {
        tmp += str[i];
    }
    <span class="hljs-built_in">list</span>.push_back(tmp);
}

<span class="hljs-keyword">int</span> main()
{
    <span class="hljs-keyword">register</span> <span class="hljs-keyword">int</span> n, m;
    <span class="hljs-built_in">cin</span> &gt;&gt; n &gt;&gt; m;
    <span class="hljs-built_in">cin</span>.get();
    <span class="hljs-stl_container"><span class="hljs-built_in">vector</span>&lt;<span class="hljs-built_in">string</span>&gt;</span> str(n);
    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">register</span> <span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; ++i) {
        getline(<span class="hljs-built_in">cin</span>, str[i]);
    }
    <span class="hljs-built_in">string</span> variable, value;
    <span class="hljs-stl_container"><span class="hljs-built_in">map</span>&lt;<span class="hljs-built_in">string</span>, <span class="hljs-built_in">string</span>&gt;</span> mp;
    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">register</span> <span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; m; ++i) {
        <span class="hljs-built_in">cin</span> &gt;&gt; variable;
        <span class="hljs-built_in">cin</span>.get();
        getline(<span class="hljs-built_in">cin</span>, value);
        variable = <span class="hljs-string">"{{ "</span> + variable + <span class="hljs-string">" }}"</span>;
        value.erase(value.begin());
        value.erase(value.end() - <span class="hljs-number">1</span>);
        mp[variable] = value;
    }
    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">register</span> <span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; ++i) {
        <span class="hljs-stl_container"><span class="hljs-built_in">vector</span>&lt;<span class="hljs-built_in">string</span>&gt;</span> <span class="hljs-built_in">list</span>, pattern;
        replace(str[i], <span class="hljs-built_in">list</span>, pattern);
        <span class="hljs-keyword">if</span> (pattern.size() != <span class="hljs-number">0</span>) {
            <span class="hljs-built_in">string</span> tmp = <span class="hljs-built_in">list</span>[<span class="hljs-number">0</span>];
            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; pattern.size(); ++j) {
                <span class="hljs-keyword">if</span> (mp.count(pattern[j]) != <span class="hljs-number">0</span>) tmp = tmp + mp[pattern[j]] + <span class="hljs-built_in">list</span>[j + <span class="hljs-number">1</span>];
                <span class="hljs-keyword">else</span> tmp = tmp + <span class="hljs-built_in">list</span>[j + <span class="hljs-number">1</span>];
            }
            str[i] = tmp;
        }
    }
    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">register</span> <span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; ++i) {
        <span class="hljs-built_in">cout</span> &lt;&lt; str[i] &lt;&lt; endl;
    }
}</code></pre>            </div>
						<link href="https://csdnimg.cn/release/phoenix/mdeditor/markdown_views-258a4616f7.css" rel="stylesheet">
                      </div>
	</article>