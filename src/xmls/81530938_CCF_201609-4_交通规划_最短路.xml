<article class="baidu_pl">
		<div id="article_content" class="article_content clearfix csdn-tracking-statistics" data-pid="blog"  data-mod=popu_307  data-dsm = "post" >
								<div class="article-copyright">
                  					<svg class="icon" title="CSDN认证原创" aria-hidden="true" style="width:53px; height: 18px; vertical-align: -4px;">
							<use xlink:href="#CSDN_Cert"></use>
					</svg>
                  					
					版权声明：看我干嘛? 你又没打算转载我的博客~					https://blog.csdn.net/wjh2622075127/article/details/81530938				</div>
								<link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/template/css/ck_htmledit_views-f57960eb32.css" />
        								            <div id="content_views" class="markdown_views prism-atom-one-light">
							<!-- flowchart 箭头图标 勿删 -->
							<svg xmlns="http://www.w3.org/2000/svg" style="display: none;"><path stroke-linecap="round" d="M5,0 0,2.5 5,5z" id="raphael-marker-block" style="-webkit-tap-highlight-color: rgba(0, 0, 0, 0);"></path></svg>
							<p>CCF 201609-4 交通规划 <a href="http://118.190.20.162/view.page?gpid=T44" rel="nofollow">传送门</a></p>

<p>先放张图得瑟得瑟, 一遍过, so happy.</p>

<p><img src="https://img-blog.csdn.net/201808090934554?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dqaDI2MjIwNzUxMjc=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述" title=""></p>

<p>这是一道描述非常简单的题目, 看到题目就有点小开心, 觉得肯定能做出来的.</p>

<p>目的很清晰, 所有的点到首都的距离都是最短路, 那么最短路就要保存下来舍弃其他无用的边. 看数据范围, 就<strong>用SPFA算法</strong>了. 中心思想是<strong>记录最短路径+去除无用边</strong></p>

<p>关键是<strong>一条路的最短路可能会有好几条</strong>, 那么应该怎么选呢? 如果停留在表面, 会觉得这道题目非常的复杂, 因为选出这些边, 似乎会影响后面的结果, 到底选哪些边? 计算机可不知道, 这里面一定有一个规则.</p>

<p>画张图, 仔细观察后会发现, <strong>一个点可以有几个出度(也可以有0个), 但是只会有一个入度. 因为&gt;1的话是无意义的. 那么很清晰了, 我们选出每个点入边里面最短的边即可, 也就是总共选出n - 1条边</strong>. 排个序来选就OK.</p>



<pre class="prettyprint"><code class=" hljs cpp"><span class="hljs-preprocessor">#include &lt;algorithm&gt;</span>
<span class="hljs-preprocessor">#include &lt;iostream&gt;</span>
<span class="hljs-preprocessor">#include &lt;cstring&gt;</span>
<span class="hljs-preprocessor">#include &lt;vector&gt;</span>
<span class="hljs-preprocessor">#include &lt;queue&gt;</span>
<span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;

<span class="hljs-keyword">struct</span> Node {
    <span class="hljs-keyword">int</span> to, w;
    Node (<span class="hljs-keyword">int</span> t, <span class="hljs-keyword">int</span> w) : to(t), w(w) {}
};

<span class="hljs-keyword">struct</span> Edge {
    <span class="hljs-keyword">int</span> from, to, w;
    Edge (<span class="hljs-keyword">int</span> f, <span class="hljs-keyword">int</span> t, <span class="hljs-keyword">int</span> w) : from(f), to(t), w(w) {}
};

<span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn = <span class="hljs-number">10000</span> + <span class="hljs-number">5</span>;
<span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> INF = <span class="hljs-number">0x3f3f3f3f</span>;
<span class="hljs-stl_container"><span class="hljs-built_in">vector</span>&lt;Node&gt;</span> G[maxn], last[maxn];
<span class="hljs-stl_container"><span class="hljs-built_in">vector</span>&lt;Edge&gt;</span> edge;
<span class="hljs-keyword">int</span> inque[maxn] = {}, n, m, dis[maxn], ans = <span class="hljs-number">0</span>;

<span class="hljs-keyword">bool</span> cmp(Edge x, Edge y)
{
    <span class="hljs-keyword">if</span> (x.to != y.to) <span class="hljs-keyword">return</span> x.to &lt; y.to;
    <span class="hljs-keyword">return</span> x.w &lt; y.w;
}

<span class="hljs-keyword">void</span> SPFA()
{
    <span class="hljs-stl_container"><span class="hljs-built_in">queue</span>&lt;<span class="hljs-keyword">int</span>&gt;</span> Q;
    Q.push(<span class="hljs-number">1</span>);
    inque[<span class="hljs-number">1</span>] = <span class="hljs-keyword">true</span>;
    dis[<span class="hljs-number">1</span>] = <span class="hljs-number">0</span>;
    <span class="hljs-keyword">while</span> (!Q.empty()) {
        <span class="hljs-keyword">int</span> now = Q.front();
        inque[now] = <span class="hljs-keyword">false</span>;
        Q.pop();
        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; G[now].size(); ++i) {
            <span class="hljs-keyword">int</span> v = G[now][i].to, w = G[now][i].w;
            <span class="hljs-keyword">if</span> (dis[v] == dis[now] + w) {
                last[v].push_back(Node(now, w));
            } <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (dis[v] &gt; dis[now] + w) {
                last[v].clear();
                last[v].push_back(Node(now, w));
                dis[v] = dis[now] + w;
                <span class="hljs-keyword">if</span> (!inque[v]) {
                    Q.push(v);
                    inque[v] = <span class="hljs-keyword">true</span>;
                }
            }
        }
    }
}

<span class="hljs-keyword">int</span> main()
{
    <span class="hljs-built_in">memset</span>(dis, <span class="hljs-number">0x3f</span>, <span class="hljs-keyword">sizeof</span>(dis));
    <span class="hljs-built_in">cin</span> &gt;&gt; n &gt;&gt; m;
    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>, u, v, w; i &lt;= m; ++i) {
        <span class="hljs-built_in">cin</span> &gt;&gt; u &gt;&gt; v &gt;&gt; w;
        G[u].push_back(Node(v, w));
        G[v].push_back(Node(u, w));
    }
    SPFA();
    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) {
        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; last[i].size(); ++j) {
            edge.push_back(Edge(last[i][j].to, i, last[i][j].w));
        }
    }
    sort(edge.begin(), edge.end(), cmp);
    <span class="hljs-keyword">int</span> to = <span class="hljs-number">2</span>;
    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; edge.size(); ++i) {
        <span class="hljs-keyword">if</span> (edge[i].to == to) {
            ans += edge[i].w;
            to++;
        }
    }
    <span class="hljs-built_in">cout</span> &lt;&lt; ans;
}</code></pre>            </div>
						<link href="https://csdnimg.cn/release/phoenix/mdeditor/markdown_views-258a4616f7.css" rel="stylesheet">
                      </div>
	</article>