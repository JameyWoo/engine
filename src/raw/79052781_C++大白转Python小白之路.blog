                                                                                                                                                         此博客的内容有:     异常处理    C++while(cin &gt;&gt; str)在Python中的形式    字符的值    导入模块    Python的编码注释    头部#!/usr/bin/python   KeyboardInterrupt : 用户中断执行(通常是输入Ctrl+C)  认识它是因为我想解决Python中while( cin &gt;&gt; s ) 的操作, 如何让循环程序停止  EOFError  :     没有内建输入,到达EOF 标记  补充, 看样子也许它是类似文件结束符?  这两块是包含在Python异常处理中的, 语法形式和C++类似  追加  pass语句  pass是空语句，是为了保持程序结构的完整性。  pass 不做任何事情，一般用做占位语句。  所以一个大概的while( cin &gt;&gt; s ) 可以写作这样  try:     while True:         str = input()         print(str) except KeyboardInterrupt:     pass  上面的程序在用户按下Ctrl + C时停止  try:     while True:         str = input()         print(str) except EOFError:     pass  上面的程序大概是输入文件结束时会停止  网上有资料介绍这样的:    import sys for str in sys.stdin:     pass  不很了解, 这似乎是一个for的while(cin)  更好的解决方案还不知道  拿出题目吧:     某系统内部的数据表示为26进制，其中0-25分别由a-z表示。如ba=1*26+0*1=26,efc=4*26*26+5*26+2*1=2836。请设计一个程序，输入若干个26进制的数，输出对应的10进制数。    样例输入：ba efc    样例输出：26 2836   如题, 按照C++移植过来的语法知识不足以完成此题  因为Python不可以直接对字符进行运算, 需要转换为ASCII值  有chr()、unichr()和ord()     char(int) int的值范围为0~255, 分别对应一个字符 ord(‘a’) 则是字符得到数字 unichr()与chr()类似,    不过是对于Unicode对象的   此处用ord()  num = 0 try:     while True:         str = input("请输入字符串\n")         for i in str:             num = num*26 + ord(i) - 97         print(num)         num = 0 except EOFError:     pass  至此, 一个简单的C++向Python转换就结束了  上面提到了Python的模块(Module), 下面介绍导入的方法  以从sys中导入stdin为例  import sys for str in sys.stdin:     print(str)  import sys as s for str in s.stdin:     print(str)  from sys import stdin for str in stdin:     print(str)  from sys import * //通配符, 最不推荐的方式 for str in stdin:     print(str)                                            