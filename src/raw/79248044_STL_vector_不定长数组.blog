                                                                                                                                                         vector是STL中的一种容器, 是一种不定长的数组.  包含在vector头文件中  使用方式为     vector&lt; int &gt;vec;  //定义了一个vec数组    vector&lt; int &gt; vec(10); //定义了元素数, 各元素都为0   有  size()函数            //返回数组元素数, 即数组大小  resize()函数      //重置数组大小  push_back(argu)     //函数向后添加元素argu  pop_back()      //删除最后一个元素  clear()函数       //将数组清空  resize()可以设置数组大小, 元素全为0  vector&lt; int &gt; vec(3); //元素数为3  vec.resize(5); //扩展为5, 元素值都为0  #include &lt;iostream&gt; #include &lt;vector&gt; #include &lt;algorithm&gt;  using namespace std;  int main() {     vector &lt;int&gt; vec;     cout &lt;&lt; "vec.size() = " &lt;&lt; vec.size() &lt;&lt; endl;     vec.push_back(4);     vec.push_back(5);     cout &lt;&lt; "vec.size() = " &lt;&lt; vec.size() &lt;&lt; endl;     vec.pop_back();     cout &lt;&lt; "vec.size() = " &lt;&lt; vec.size() &lt;&lt; endl;     vec.resize(4);     cout &lt;&lt; "vec.size() = " &lt;&lt; vec.size() &lt;&lt; endl; }  有 :  begin()函数, 返回数组的第一个元素的位置  end()函数, 返回数组的最后一个元素的下一个位置  插入函数insert()    //插入到当前指针位置, 原来的元素向后移  删除函数erase() //删除当前指针位置的元素, 之后的元素向前移动  判断是否为空函数empty()  //返回bool数  代码示例:    #include &lt;iostream&gt; #include &lt;vector&gt; #include &lt;algorithm&gt;  using namespace std;  int main() {     vector&lt;int&gt;vec;     for(int i = 0; i &lt; 20; ++i) {         vec.push_back(i);     }     for(int i = 0; i &lt; 20; ++i) {         cout &lt;&lt; vec[i]&lt;&lt; endl;     }     vec.insert(vec.begin(), -1);     for(int i = 0; i &lt; 20; ++i) {         cout &lt;&lt; vec[i]&lt;&lt; endl;     }     vec.erase(vec.end() - 1);     for(int i = 0; i &lt; 20; ++i) {         cout &lt;&lt; vec[i]&lt;&lt; endl;     } }  有三种打印方式   传统的下标, 如vec[1]   vec.at(i), 使用at函数的参数表示位置   使用迭代器的方法    代码示例:    #include &lt;iostream&gt; #include &lt;vector&gt; #include &lt;algorithm&gt;  using namespace std;  int main() {     vector&lt;int&gt;vec;     for(int i = 0; i &lt; 20; ++i) {         vec.push_back(i);     }     for(int i = 0; i &lt; 20; ++i) {         cout &lt;&lt; vec[i]&lt;&lt; endl;     }     for(int i = 0; i &lt; 20; ++i) {         cout &lt;&lt; vec.at(i)&lt;&lt; endl;     }     vector&lt;int&gt;::iterator it = vec.begin();     while(it != vec.end()) {         cout &lt;&lt; *it &lt;&lt; endl;         it++;     } }    一些相关函数    使用reverse将元素翻转  reverse(vec.begin(),vec.end());  //将元素翻转    使用sort排列  sort(vec.begin(), vec.end(), cmp);  cmp为自定义的比较函数    多维数组声明方式  vector&lt; int&gt; vec[100];  以上声明了一个元素数为100的vector数组  注意: 数组大小固定  同理有其他多维  vector &lt; int &gt; vec[100][100][100];  但这些除最后一维其他维都是固定的  另一种声明方式  vector &lt; vector&lt; int &gt; &gt; vec;  如:    #include &lt;iostream&gt; #include &lt;vector&gt;  using namespace std;  int main() {     vector&lt; vector&lt;int&gt; &gt; vec(20);     for( int i = 0; i &lt; 20; ++i ) {         vec[i].resize(20);     }     for( int i = 0; i &lt; 20; ++i ) {         for( int j = 0; j &lt; 20; ++j ) {             cout &lt;&lt; vec[i][j] &lt;&lt; ' ';         }         cout &lt;&lt; endl;     }     cout &lt;&lt; vec.size() &lt;&lt; endl; }    #include &lt;iostream&gt; #include &lt;vector&gt;  using namespace std;  int main() {     vector &lt;int&gt; vec(100);     for( int i = 0; i &lt; 100; ++i ) {         cout &lt;&lt; vec[i] &lt;&lt; endl;     }     cout &lt;&lt; vec.size() &lt;&lt; endl;     vector &lt;int&gt; vecc;     vecc.resize(10000);     for( int i = 0; i &lt; 10000; ++i ) {         cout &lt;&lt; vecc[i] &lt;&lt; ' ';     }     vec.push_back(3);     cout &lt;&lt; endl;     for( int i = 0; i &lt; 101; ++i ) {         cout &lt;&lt; vec[i];     } }                                            