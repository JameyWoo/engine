                                                                                                                                                          P1582 倒水， 传送门 题目描述 一天，CC买了N个容量可以认为是无限大的瓶子，开始时每个瓶子里有1升水。接着~~CC发现瓶子实在太多了，于是他决定保留不超过K个瓶子。每次他选择两个当前含水量相同的瓶子，把一个瓶子的水全部倒进另一个里，然后把空瓶丢弃。(不能丢弃有水的瓶子)   显然在某些情况下CC无法达到目标，比如N=3,K=1。此时CC会重新买一些新的瓶子(新瓶子容量无限，开始时有1升水)，以到达目标。    现在CC想知道，最少需要买多少新瓶子才能达到目标呢？   输入输出格式 输入格式： 一行两个正整数， N,K( 1\le N\le 2\times 10^9,K\le 10001≤N≤2×10   9,K≤1000 )。  输出格式： 一个非负整数，表示最少需要买多少新瓶子。  输入输出样例 输入样例#1： 3 1  输出样例#1： 1  输入样例#2： 13 2  输出样例#2： 3  输入样例#3： 1000000 5  输出样例#3： 15808   这道题目不得不说是非常巧妙的，不了解二进制的人大概会写的很复杂而且还不一定写的出来，而使用二进制，就变得十分简单了。不得不说二进制是非常神奇的东西  分析题意，是要求至少需要多少个1升的瓶子才能两两合起来最后瓶子数不超过k。如果暴力求解的话，恐怕枚举方式很复杂。  但是我们可以想象，对于一直数量的瓶子，比如13，它的二进制数是8+4+1，即1101，那么它加一个瓶子就是1110，至少瓶子数不会增多，那么对于现在的14，1110，需要加几个瓶子，会使得合起来之后的瓶子数会减少或不增多呢？很容易知道是2，合起来就是10000，如果只加一个，那就变成1111了，还多了一个。我们可以观察发现，它的瓶子数要变少，就需要至少加从右边数直到第一个1停止的那个数的数量。而学习过树状数组的同学（或者其他lowbit（）函数相关算法），应该就明白了。  没错，上面一段的关键，就是引出lowbit函数。 n &amp; -n.  对一个数的二进制表示上，有几位是1，就代表了有几个瓶子。所以我们可以while循环，直到该数的1的位数&lt;=k，不然就一直加n &amp; -n, 调整它的位数, 直到满足退出循环的条件。  所以代码也是非常非常简洁的。  #include &lt;iostream&gt; using namespace std;  int getOne(long long n) {     int cnt = 0;     for (int i = 0; i &lt; 62; ++i) {         if (n &amp; (1LL &lt;&lt; i)) cnt++;     }     return cnt; }  int main() {     long long n, k, ans = 0;     cin &gt;&gt; n &gt;&gt; k;     while (getOne(n) &gt; k) ans += n &amp; -n, n += n &amp; -n;     cout &lt;&lt; ans; }                                            