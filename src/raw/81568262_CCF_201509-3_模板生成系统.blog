                                                                                                                                                         CCF 201509-3 模板生成系统 传送门  一道还算简单的模板题, 不过最开始写的版本居然超时了?!!! 只得了90分. 然后做了一个优化, 还是超时, 又做了一个优化(其实是填坑), 终于不超时了.   但是我发现其实那个超时不是程序太慢的原因, 而是题目的一个坑! 专门用来卡我的这种做法的!   我的做法是对每一行, 查询满足{{ name }}格式的字符串, 然后用已知的键值对来替换掉. 每次只替换一对, 迭代着替换直到没有. 但是, 在一种情况下, 这种迭代是无止境的! 那就是键和值都是{{ name }}的情况!!! 题目特意强调了一下内容的ASCII码范围: ASCII 码范围 32, 33, 35-126,  而空格的ASCII码就是32!!!  左大括号和右大括号的ASCII码刚好是123和125!!! 所以懂的人秒懂这是在提示, 而不懂的人怕是轻易忽略了.  正确的解法是一次性地分隔出这些{{ name }}, 又快又准.  对了, 另一个优化是把键值对从pair改成了map, 本来就应该这样好伐!  100分代码.  #include &lt;algorithm&gt; #include &lt;iostream&gt; #include &lt;vector&gt; #include &lt;map&gt; using namespace std;  void replace(string &amp;str, vector&lt;string&gt; &amp;list, vector&lt;string&gt; &amp;pattern) {     string tmp, patt;     int i, last;     for (i = 0; i &lt; str.size(); ++i) {         if (str[i] == '{' &amp;&amp; str[i + 1] == '{') {             list.push_back(tmp);             tmp = "";             i = i + 3;             patt = "{{ ";             while (!(str[i] == '}' &amp;&amp; str[i] == '}')) {                 patt += str[i];                 i++;             }             i++;             last = i + 1;             patt += "}}";             pattern.push_back(patt);         } else tmp += str[i];     }     tmp = "";     for (i = last; i &lt; str.size(); ++i) {         tmp += str[i];     }     list.push_back(tmp); }  int main() {     register int n, m;     cin &gt;&gt; n &gt;&gt; m;     cin.get();     vector&lt;string&gt; str(n);     for (register int i = 0; i &lt; n; ++i) {         getline(cin, str[i]);     }     string variable, value;     map&lt;string, string&gt; mp;     for (register int i = 0; i &lt; m; ++i) {         cin &gt;&gt; variable;         cin.get();         getline(cin, value);         variable = "{{ " + variable + " }}";         value.erase(value.begin());         value.erase(value.end() - 1);         mp[variable] = value;     }     for (register int i = 0; i &lt; n; ++i) {         vector&lt;string&gt; list, pattern;         replace(str[i], list, pattern);         if (pattern.size() != 0) {             string tmp = list[0];             for (int j = 0; j &lt; pattern.size(); ++j) {                 if (mp.count(pattern[j]) != 0) tmp = tmp + mp[pattern[j]] + list[j + 1];                 else tmp = tmp + list[j + 1];             }             str[i] = tmp;         }     }     for (register int i = 0; i &lt; n; ++i) {         cout &lt;&lt; str[i] &lt;&lt; endl;     } }                                            