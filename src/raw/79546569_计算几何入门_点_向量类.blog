                                                                                                                                                         这是一个平面上点或向量类, 包含了常用的向量运算如: 数乘, 点乘.  三维或更高维的类可由此拓展出来.     /* 计算几何入门 设计一个点(向量)类, 包含各种属性和操作  */ #include &lt;iostream&gt; #include &lt;cmath&gt; using namespace std;  class Point; typedef Point Vector;  class Point  { public:     double x, y;     Point(int x = 0.0, int y = 0.0):x(x),y(y){}  //构造函数     double norm() {  //返回向量的模的平方         return x*x + y*y;     }     double abs() {         return sqrt(norm());  //返回向量的模     }      Point operator + (Point &amp;p) {  //+         return Point(x + p.x, y + p.y);     }     Point operator - (Point &amp;p) {  //-         return Point(x - p.x, y - p.y);     }     Point operator * (double k) {  //*         return Point(k*x, k*y);     }     Point operator / (double k) {  //除         return Point(x/k, y/k);     }      Point operator * (Point const p) {         return Point(x*p.x, y*p.y);     }     Point dot(Point const v) {         return Point(x*v.x, y*v.y);     }     /*Point cross(Point &amp;v) {         Point ()     }*/     friend ostream &amp; operator &lt;&lt; (ostream &amp; out, Point const p); };  ostream &amp; operator &lt;&lt; (ostream &amp; out, Point const p) {     out &lt;&lt; "x = " &lt;&lt; p.x &lt;&lt; ' ' &lt;&lt; "y = " &lt;&lt; p.y;     return out; }  int main() {     Point p1(1,2);     Point p2(3,4);     cout &lt;&lt; "p1的模平方: " &lt;&lt; p1.norm() &lt;&lt; endl;     cout &lt;&lt; "p1的模: " &lt;&lt; p1.abs() &lt;&lt; endl;     Point p3 = p1 + p2;     cout &lt;&lt; "p3: x = " &lt;&lt; p3.x &lt;&lt; " y = " &lt;&lt; p3.y &lt;&lt; endl;     p2 = p2*5;     cout &lt;&lt; "现在5*p2: x = " &lt;&lt; p2.x &lt;&lt; " y = " &lt;&lt; p2.y &lt;&lt; endl;     cout &lt;&lt; "p3: " &lt;&lt; p3 &lt;&lt; endl;     cout &lt;&lt; "计算p1,p2的点积:\n";     cout &lt;&lt; p1.dot(p2) &lt;&lt; endl;     cout &lt;&lt; p1*p2 &lt;&lt; endl; }                                            