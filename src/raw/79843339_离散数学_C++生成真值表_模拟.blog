                                                                                                                                                         生成真值表的代码  输入一个真值表达式, 程序自动生成它的真值表.  纯模拟思路     合取*     析取|    单条件&gt;     双条件-     非!     #include &lt;iostream&gt; #include &lt;string&gt; #include &lt;cmath&gt; using namespace std; int cnt = 0, chval[26] = {};  void getAlpha(string str, char *chs, int &amp;cnt)  //获取真值表中的字符  {     int ch[26] = {};     for(int i = 0; i &lt; (int)str.length(); ++i) {         if(isalpha(str[i])) ch[str[i] - 'a'] ++;     }     for(int i = 0; i &lt; 26; ++i) {         if(ch[i]) {             chs[cnt++] = i+97;         }     } }  string shuzhitihuan(string str, int chval[26]) {     string st = "";     for(int i = 0; i &lt; str.size(); ++i) {         if(str[i] &lt;= 'z' &amp;&amp; str[i] &gt;= 'a') {             st += chval[str[i] - 'a'] ? "1":"0";         } else st += str[i];     }     return st; }  void qvkuohao(string &amp; str)  //需要去除两种括号()(1)(0) {     string st = "";     for(int i = 0; i &lt; str.size(); ++i) {         if(str[i] == '(' &amp;&amp; i+2 &lt; str.size() &amp;&amp; str[i+2] == ')') {             st += str[i+1];             i += 2;         } else st += str[i];     }     str = st; }  void qvfei(string &amp;str)  {     string st = "";     for(int i = 0; i &lt; str.size(); ++i) {         if(str[i] == '!' &amp;&amp; i+1 &lt; str.size() &amp;&amp; str[i+1] == '0') {             st += '1';             i++;         } else if(str[i] == '!' &amp;&amp; i + 1 &lt; str.size() &amp;&amp; str[i+1] == '1') {             st += '0';             i++;         } else st += str[i];     }     str = st; }   void qvheqv(string &amp;str) {     string st = "";     for(int i = 0; i &lt; str.size(); ++i) {         if(str[i] == '1' &amp;&amp; i+2 &lt; str.size() &amp;&amp; str[i+2] == '1' &amp;&amp; str[i+1] == '*') {             st += '1';             i += 2;         } else if(i+2 &lt; str.size() &amp;&amp; str[i+1] == '*' &amp;&amp; ((str[i] == '1' &amp;&amp; str[i+2] == '0')         || (str[i] == '0' &amp;&amp; str[i+2] == '1') || (str[i] == '0' &amp;&amp; str[i+2] == '0'))) {             st += '0';             i += 2;         } else st += str[i];     }     str = st; }  void qvxiqv(string &amp; str) {     string st = "";     for(int i = 0; i &lt; str.size(); ++i) {         if(str[i] == '0' &amp;&amp; i+2 &lt; str.size() &amp;&amp; str[i+2] == '0' &amp;&amp; str[i+1] == '|') {             st += '0';             i += 2;         } else if (i+2 &lt; str.size() &amp;&amp; str[i+1] == '|' &amp;&amp; ((str[i] == '1' &amp;&amp; str[i+2] == '0')         || (str[i] == '0' &amp;&amp; str[i+2] == '1') || (str[i] == '1' &amp;&amp; str[i+2] == '1'))) {             st += '1';             i += 2;         } else st += str[i];     }     str = st; }  void qvdantiaojian(string &amp;str) {     string st = "";     for(int i = 0; i &lt; str.size(); ++i) {         if(str[i + 1] == '&gt;' &amp;&amp; str[i] == '1' &amp;&amp; str[i+2] == '0') {             st += '0';             i += 2;         } else if(str[i+1] == '&gt;' &amp;&amp; ((str[i] == '1' &amp;&amp; str[i+2] == '1')         || str[i] == '0' &amp;&amp;(str[i+2] == '1' || str[i+2] == '0'))) {             st += '1';             i += 2;         } else st += str[i];     }     str = st; }  void qvshuangtiaojian(string &amp;str) {     string st = "";     for(int i = 0; i &lt; str.size(); ++i) {         if(str[i+1] == '-' &amp;&amp; ((str[i] == '1' &amp;&amp; str[i+2] == '1') || (str[i] == '0' &amp;&amp; str[i+2] == '0'))) {             st += '1';             i += 2;         } else if(str[i+1] == '-' &amp;&amp; ((str[i] == '1' &amp;&amp; str[i+2] == '0') || (str[i] == '0' &amp;&amp; str[i+2] == '1'))) {             st += '0';             i += 2;         } else st += str[i];      }     str = st; }  int main() {     string str, tmp;     char chs[12];     cin &gt;&gt; str;     getAlpha(str, chs, cnt);  //只讨论小写字母     tmp = str;     for(int j = 0; j &lt; cnt; ++j) {         cout &lt;&lt; chs[j] &lt;&lt; "  ";     }      cout &lt;&lt; tmp;     cout &lt;&lt; endl;     for(int i = 0; i &lt; pow(2, cnt); ++i) {         for(int j = 0; j &lt; cnt; ++j) { //赋值过程              chval[chs[j] - 'a'] = (1 &amp; (i&gt;&gt;(cnt-1-j)));         }   cout &lt;&lt; endl;         for(int j = 0; j &lt; cnt; ++j) {             cout &lt;&lt; chval[chs[j] - 'a'] &lt;&lt; "  ";         }         str = shuzhitihuan(str, chval);         while(str.size() != 1) {             qvkuohao(str);             qvfei(str);             qvheqv(str);             qvxiqv(str);             qvdantiaojian(str);             qvshuangtiaojian(str);          }         for(int i = 0; i &lt; tmp.size() / 2; ++i) cout &lt;&lt; ' ';         cout &lt;&lt;  str &lt;&lt; endl;         str = tmp;     } }  /* ((p*q)*r)  (p*q)|(!p*!q) (!p|q)*(!q|p)  (p&gt;q)*(q&gt;p) !(p*q)&gt;(!p*!q) p-q  (!p|r)*(r&gt;q)|p*q p*q|r*b */                                            