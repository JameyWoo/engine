                                                                                                                                                         .     四平方和定理，又称为拉格朗日定理：每个正整数都可以表示为至多四个正整数的平方和。如果把 00 包括进去，就正好可以表示为四个数的平方和。      比如：      \displaystyle 5 = 0^2 + 0^2 + 1^2 + 2^25=0  2  +0  2  +1  2  +2  2        \displaystyle 7 = 1^2 + 1^2 + 1^2 + 2^27=1  2  +1  2  +1  2  +2  2        则对于一个给定的正整数 nn，可以表示为：n = a^2 + b^2 + c^2 + d^2n=a  2  +b  2  +c  2  +d    2  。      你需要求出 字典序 最小的一组解 a,b,c,da,b,c,d。      字典序大小：从左到右依次比较，如果相同则比较下一项，直到有一项不同，较小的一方字典序更小，反之字典序更大，所有项均相同则二者字典序相同。      输入格式 程序输入为一个正整数 N(1 \leq N \leq 5000000)N(1≤N≤5000000)。      输出格式 输出四个非负整数 a,b,c,da,b,c,d，中间用空格分开。      样例输入1 5 样例输出1 0 0 1 2 样例输入2 12 样例输出2 0 2 2 2   用四重循环就可以简单解决， 但是其实可以用三重循环， 因为第四个数据可以用前三个数据算出来， 这也是这道题的价值所在， 在做其他题目是， 可以用这种思想简化时间复杂度。  效果是很客观的， 就这道题来说， 实际时间差了50倍。  #include &lt;iostream&gt; #include &lt;cmath&gt; using namespace std;  int main() {     int n;     cin &gt;&gt; n;     for(int i = 0; i*i &lt; n; ++i) {         for(int j = i; j*j + i*i &lt; n; ++j) {             for(int k = j; k*k + j*j + i*i &lt; n; ++k) {                 if(int(pow(int(pow(n-i*i-j*j-k*k, 0.5)), 2)) == (n-i*i-j*j-k*k)) {                     cout &lt;&lt; i &lt;&lt; ' ' &lt;&lt; j &lt;&lt; ' ' &lt;&lt; k &lt;&lt; ' ' &lt;&lt; pow(n-i*i-j*j-k*k, 0.5);                     return 0;                 }             }         }     } }  四重循环代码：    #include &lt;iostream&gt; #include &lt;cmath&gt; using namespace std;  int main() {     int n;     cin &gt;&gt; n;     for(int i = 0; i*i &lt; n; ++i) {         int ii = i*i;         for(int j = i; ii + j*j &lt; n; ++j) {             int jj = ii+j*j;             for(int k = j; k*k + jj &lt; n; ++k) {                 int kk = jj + k*k;                 for(int l = k; l*l + kk &lt;= n; ++l) {                     if(l*l + kk == n) {                         cout &lt;&lt; i &lt;&lt; ' ' &lt;&lt; j &lt;&lt; ' ' &lt;&lt; k &lt;&lt; ' ' &lt;&lt; l;                         return 0;                     }                 }             }         }     } } /* 5 0 0 1 2  12 0 2 2 2 */                                            